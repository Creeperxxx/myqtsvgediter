// Created by Microsoft (R) C/C++ Compiler Version 14.43.34810.0 (8d9231f6).
//
// D:\Database\Code\vs\c++\KDevelop-Training\KDevelop-Training\week09\C++\OfficeAddinsSolution\CreeperOfficeAddIn\x64\Debug\MSPPT.tli
//
// Wrapper implementations for Win32 type library 91493440-5A91-11CF-8700-00AA0060263B
// compiler-generated file - DO NOT EDIT!


//
// interface Collection wrapper method implementations
//

#pragma implementation_key(1)
inline IUnknownPtr PPT::Collection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(2)
inline _variant_t PPT::Collection::_Index ( int Index ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw__Index(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3)
inline long PPT::Collection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ColorFormat wrapper method implementations
//

#pragma implementation_key(4)
inline IDispatchPtr PPT::ColorFormat::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(5)
inline long PPT::ColorFormat::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6)
inline IDispatchPtr PPT::ColorFormat::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(7)
inline Office::MsoRGBType PPT::ColorFormat::GetPPT_RGB ( ) {
    Office::MsoRGBType _result;
    HRESULT _hr = get_PPT_RGB(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(8)
inline void PPT::ColorFormat::PutPPT_RGB ( Office::MsoRGBType PPT_RGB ) {
    HRESULT _hr = put_PPT_RGB(PPT_RGB);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(9)
inline enum Office::MsoColorType PPT::ColorFormat::GetType ( ) {
    enum Office::MsoColorType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(10)
inline enum PPT::PpColorSchemeIndex PPT::ColorFormat::GetSchemeColor ( ) {
    enum PpColorSchemeIndex _result;
    HRESULT _hr = get_SchemeColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(11)
inline void PPT::ColorFormat::PutSchemeColor ( enum PpColorSchemeIndex SchemeColor ) {
    HRESULT _hr = put_SchemeColor(SchemeColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(12)
inline float PPT::ColorFormat::GetTintAndShade ( ) {
    float _result = 0;
    HRESULT _hr = get_TintAndShade(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(13)
inline void PPT::ColorFormat::PutTintAndShade ( float pValue ) {
    HRESULT _hr = put_TintAndShade(pValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(14)
inline enum Office::MsoThemeColorIndex PPT::ColorFormat::GetObjectThemeColor ( ) {
    enum Office::MsoThemeColorIndex _result;
    HRESULT _hr = get_ObjectThemeColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(15)
inline void PPT::ColorFormat::PutObjectThemeColor ( enum Office::MsoThemeColorIndex ObjectThemeColor ) {
    HRESULT _hr = put_ObjectThemeColor(ObjectThemeColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(16)
inline float PPT::ColorFormat::GetBrightness ( ) {
    float _result = 0;
    HRESULT _hr = get_Brightness(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(17)
inline void PPT::ColorFormat::PutBrightness ( float Brightness ) {
    HRESULT _hr = put_Brightness(Brightness);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface NamedSlideShow wrapper method implementations
//

#pragma implementation_key(18)
inline PPT::_ApplicationPtr PPT::NamedSlideShow::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(19)
inline IDispatchPtr PPT::NamedSlideShow::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(20)
inline _bstr_t PPT::NamedSlideShow::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(21)
inline HRESULT PPT::NamedSlideShow::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(22)
inline _variant_t PPT::NamedSlideShow::GetSlideIDs ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_SlideIDs(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(23)
inline long PPT::NamedSlideShow::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface NamedSlideShows wrapper method implementations
//

#pragma implementation_key(24)
inline PPT::_ApplicationPtr PPT::NamedSlideShows::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(25)
inline IDispatchPtr PPT::NamedSlideShows::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(26)
inline PPT::NamedSlideShowPtr PPT::NamedSlideShows::Item ( const _variant_t & Index ) {
    struct NamedSlideShow * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return NamedSlideShowPtr(_result, false);
}

#pragma implementation_key(27)
inline PPT::NamedSlideShowPtr PPT::NamedSlideShows::Add ( _bstr_t Name, const _variant_t & safeArrayOfSlideIDs ) {
    struct NamedSlideShow * _result = 0;
    HRESULT _hr = raw_Add(Name, safeArrayOfSlideIDs, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return NamedSlideShowPtr(_result, false);
}

//
// interface PrintRange wrapper method implementations
//

#pragma implementation_key(28)
inline PPT::_ApplicationPtr PPT::PrintRange::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(29)
inline IDispatchPtr PPT::PrintRange::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(30)
inline int PPT::PrintRange::GetStart ( ) {
    int _result = 0;
    HRESULT _hr = get_Start(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(31)
inline int PPT::PrintRange::GetEnd ( ) {
    int _result = 0;
    HRESULT _hr = get_End(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(32)
inline HRESULT PPT::PrintRange::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface PrintRanges wrapper method implementations
//

#pragma implementation_key(33)
inline PPT::PrintRangePtr PPT::PrintRanges::Add ( int Start, int End ) {
    struct PrintRange * _result = 0;
    HRESULT _hr = raw_Add(Start, End, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PrintRangePtr(_result, false);
}

#pragma implementation_key(34)
inline PPT::_ApplicationPtr PPT::PrintRanges::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(35)
inline HRESULT PPT::PrintRanges::ClearAll ( ) {
    HRESULT _hr = raw_ClearAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(36)
inline PPT::PrintRangePtr PPT::PrintRanges::Item ( int Index ) {
    struct PrintRange * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PrintRangePtr(_result, false);
}

#pragma implementation_key(37)
inline IDispatchPtr PPT::PrintRanges::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

//
// interface PrintOptions wrapper method implementations
//

#pragma implementation_key(38)
inline PPT::_ApplicationPtr PPT::PrintOptions::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(39)
inline enum PPT::PpPrintColorType PPT::PrintOptions::GetPrintColorType ( ) {
    enum PpPrintColorType _result;
    HRESULT _hr = get_PrintColorType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(40)
inline void PPT::PrintOptions::PutPrintColorType ( enum PpPrintColorType PrintColorType ) {
    HRESULT _hr = put_PrintColorType(PrintColorType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(41)
inline enum Office::MsoTriState PPT::PrintOptions::GetCollate ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Collate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(42)
inline void PPT::PrintOptions::PutCollate ( enum Office::MsoTriState Collate ) {
    HRESULT _hr = put_Collate(Collate);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(43)
inline enum Office::MsoTriState PPT::PrintOptions::GetFitToPage ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_FitToPage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(44)
inline void PPT::PrintOptions::PutFitToPage ( enum Office::MsoTriState FitToPage ) {
    HRESULT _hr = put_FitToPage(FitToPage);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(45)
inline enum Office::MsoTriState PPT::PrintOptions::GetFrameSlides ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_FrameSlides(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(46)
inline void PPT::PrintOptions::PutFrameSlides ( enum Office::MsoTriState FrameSlides ) {
    HRESULT _hr = put_FrameSlides(FrameSlides);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(47)
inline int PPT::PrintOptions::GetNumberOfCopies ( ) {
    int _result = 0;
    HRESULT _hr = get_NumberOfCopies(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(48)
inline void PPT::PrintOptions::PutNumberOfCopies ( int NumberOfCopies ) {
    HRESULT _hr = put_NumberOfCopies(NumberOfCopies);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(49)
inline enum PPT::PpPrintOutputType PPT::PrintOptions::GetOutputType ( ) {
    enum PpPrintOutputType _result;
    HRESULT _hr = get_OutputType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(50)
inline void PPT::PrintOptions::PutOutputType ( enum PpPrintOutputType OutputType ) {
    HRESULT _hr = put_OutputType(OutputType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(51)
inline IDispatchPtr PPT::PrintOptions::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(52)
inline enum Office::MsoTriState PPT::PrintOptions::GetPrintHiddenSlides ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_PrintHiddenSlides(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(53)
inline void PPT::PrintOptions::PutPrintHiddenSlides ( enum Office::MsoTriState PrintHiddenSlides ) {
    HRESULT _hr = put_PrintHiddenSlides(PrintHiddenSlides);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(54)
inline enum Office::MsoTriState PPT::PrintOptions::GetPrintInBackground ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_PrintInBackground(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(55)
inline void PPT::PrintOptions::PutPrintInBackground ( enum Office::MsoTriState PrintInBackground ) {
    HRESULT _hr = put_PrintInBackground(PrintInBackground);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(56)
inline enum PPT::PpPrintRangeType PPT::PrintOptions::GetRangeType ( ) {
    enum PpPrintRangeType _result;
    HRESULT _hr = get_RangeType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(57)
inline void PPT::PrintOptions::PutRangeType ( enum PpPrintRangeType RangeType ) {
    HRESULT _hr = put_RangeType(RangeType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(58)
inline PPT::PrintRangesPtr PPT::PrintOptions::GetRanges ( ) {
    struct PrintRanges * _result = 0;
    HRESULT _hr = get_Ranges(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PrintRangesPtr(_result, false);
}

#pragma implementation_key(59)
inline enum Office::MsoTriState PPT::PrintOptions::GetPrintFontsAsGraphics ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_PrintFontsAsGraphics(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(60)
inline void PPT::PrintOptions::PutPrintFontsAsGraphics ( enum Office::MsoTriState PrintFontsAsGraphics ) {
    HRESULT _hr = put_PrintFontsAsGraphics(PrintFontsAsGraphics);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(61)
inline _bstr_t PPT::PrintOptions::GetSlideShowName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SlideShowName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(62)
inline void PPT::PrintOptions::PutSlideShowName ( _bstr_t SlideShowName ) {
    HRESULT _hr = put_SlideShowName(SlideShowName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(63)
inline _bstr_t PPT::PrintOptions::GetActivePrinter ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ActivePrinter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(64)
inline void PPT::PrintOptions::PutActivePrinter ( _bstr_t ActivePrinter ) {
    HRESULT _hr = put_ActivePrinter(ActivePrinter);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(65)
inline enum PPT::PpPrintHandoutOrder PPT::PrintOptions::GetHandoutOrder ( ) {
    enum PpPrintHandoutOrder _result;
    HRESULT _hr = get_HandoutOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(66)
inline void PPT::PrintOptions::PutHandoutOrder ( enum PpPrintHandoutOrder HandoutOrder ) {
    HRESULT _hr = put_HandoutOrder(HandoutOrder);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(67)
inline enum Office::MsoTriState PPT::PrintOptions::GetPrintComments ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_PrintComments(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(68)
inline void PPT::PrintOptions::PutPrintComments ( enum Office::MsoTriState PrintComments ) {
    HRESULT _hr = put_PrintComments(PrintComments);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(69)
inline int PPT::PrintOptions::GetsectionIndex ( ) {
    int _result = 0;
    HRESULT _hr = get_sectionIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(70)
inline void PPT::PrintOptions::PutsectionIndex ( int sectionIndex ) {
    HRESULT _hr = put_sectionIndex(sectionIndex);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(71)
inline enum Office::MsoTriState PPT::PrintOptions::GetHighQuality ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_HighQuality(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(72)
inline void PPT::PrintOptions::PutHighQuality ( enum Office::MsoTriState HighQuality ) {
    HRESULT _hr = put_HighQuality(HighQuality);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface AddIn wrapper method implementations
//

#pragma implementation_key(73)
inline PPT::_ApplicationPtr PPT::AddIn::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(74)
inline IDispatchPtr PPT::AddIn::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(75)
inline _bstr_t PPT::AddIn::GetFullName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FullName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(76)
inline _bstr_t PPT::AddIn::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(77)
inline _bstr_t PPT::AddIn::GetPath ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Path(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(78)
inline enum Office::MsoTriState PPT::AddIn::GetRegistered ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Registered(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(79)
inline void PPT::AddIn::PutRegistered ( enum Office::MsoTriState Registered ) {
    HRESULT _hr = put_Registered(Registered);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(80)
inline enum Office::MsoTriState PPT::AddIn::GetAutoLoad ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_AutoLoad(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(81)
inline void PPT::AddIn::PutAutoLoad ( enum Office::MsoTriState AutoLoad ) {
    HRESULT _hr = put_AutoLoad(AutoLoad);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(82)
inline enum Office::MsoTriState PPT::AddIn::GetLoaded ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Loaded(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(83)
inline void PPT::AddIn::PutLoaded ( enum Office::MsoTriState Loaded ) {
    HRESULT _hr = put_Loaded(Loaded);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(84)
inline enum Office::MsoTriState PPT::AddIn::GetDisplayAlerts ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_DisplayAlerts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(85)
inline void PPT::AddIn::PutDisplayAlerts ( enum Office::MsoTriState DisplayAlerts ) {
    HRESULT _hr = put_DisplayAlerts(DisplayAlerts);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(86)
inline enum Office::MsoTriState PPT::AddIn::GetRegisteredInHKLM ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_RegisteredInHKLM(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface AddIns wrapper method implementations
//

#pragma implementation_key(87)
inline PPT::_ApplicationPtr PPT::AddIns::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(88)
inline IDispatchPtr PPT::AddIns::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(89)
inline PPT::AddInPtr PPT::AddIns::Item ( VARIANT * Index ) {
    struct AddIn * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AddInPtr(_result, false);
}

#pragma implementation_key(90)
inline PPT::AddInPtr PPT::AddIns::Add ( _bstr_t FileName ) {
    struct AddIn * _result = 0;
    HRESULT _hr = raw_Add(FileName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AddInPtr(_result, false);
}

#pragma implementation_key(91)
inline HRESULT PPT::AddIns::Remove ( VARIANT * Index ) {
    HRESULT _hr = raw_Remove(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface Presentations wrapper method implementations
//

#pragma implementation_key(92)
inline PPT::_ApplicationPtr PPT::Presentations::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(93)
inline IDispatchPtr PPT::Presentations::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(94)
inline PPT::_PresentationPtr PPT::Presentations::Item ( const _variant_t & Index ) {
    struct _Presentation * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _PresentationPtr(_result, false);
}

#pragma implementation_key(95)
inline PPT::_PresentationPtr PPT::Presentations::Add ( enum Office::MsoTriState WithWindow ) {
    struct _Presentation * _result = 0;
    HRESULT _hr = raw_Add(WithWindow, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _PresentationPtr(_result, false);
}

#pragma implementation_key(96)
inline PPT::_PresentationPtr PPT::Presentations::OpenOld ( _bstr_t FileName, enum Office::MsoTriState ReadOnly, enum Office::MsoTriState Untitled, enum Office::MsoTriState WithWindow ) {
    struct _Presentation * _result = 0;
    HRESULT _hr = raw_OpenOld(FileName, ReadOnly, Untitled, WithWindow, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _PresentationPtr(_result, false);
}

#pragma implementation_key(97)
inline PPT::_PresentationPtr PPT::Presentations::Open ( _bstr_t FileName, enum Office::MsoTriState ReadOnly, enum Office::MsoTriState Untitled, enum Office::MsoTriState WithWindow ) {
    struct _Presentation * _result = 0;
    HRESULT _hr = raw_Open(FileName, ReadOnly, Untitled, WithWindow, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _PresentationPtr(_result, false);
}

#pragma implementation_key(98)
inline HRESULT PPT::Presentations::CheckOut ( _bstr_t FileName ) {
    HRESULT _hr = raw_CheckOut(FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(99)
inline VARIANT_BOOL PPT::Presentations::CanCheckOut ( _bstr_t FileName ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_CanCheckOut(FileName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(100)
inline PPT::_PresentationPtr PPT::Presentations::Open2007 ( _bstr_t FileName, enum Office::MsoTriState ReadOnly, enum Office::MsoTriState Untitled, enum Office::MsoTriState WithWindow, enum Office::MsoTriState OpenAndRepair ) {
    struct _Presentation * _result = 0;
    HRESULT _hr = raw_Open2007(FileName, ReadOnly, Untitled, WithWindow, OpenAndRepair, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _PresentationPtr(_result, false);
}

//
// interface Hyperlink wrapper method implementations
//

#pragma implementation_key(101)
inline PPT::_ApplicationPtr PPT::Hyperlink::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(102)
inline IDispatchPtr PPT::Hyperlink::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(103)
inline enum Office::MsoHyperlinkType PPT::Hyperlink::GetType ( ) {
    enum Office::MsoHyperlinkType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(104)
inline _bstr_t PPT::Hyperlink::GetAddress ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Address(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(105)
inline void PPT::Hyperlink::PutAddress ( _bstr_t Address ) {
    HRESULT _hr = put_Address(Address);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(106)
inline _bstr_t PPT::Hyperlink::GetSubAddress ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SubAddress(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(107)
inline void PPT::Hyperlink::PutSubAddress ( _bstr_t SubAddress ) {
    HRESULT _hr = put_SubAddress(SubAddress);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(108)
inline HRESULT PPT::Hyperlink::AddToFavorites ( ) {
    HRESULT _hr = raw_AddToFavorites();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(109)
inline _bstr_t PPT::Hyperlink::GetEmailSubject ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_EmailSubject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(110)
inline void PPT::Hyperlink::PutEmailSubject ( _bstr_t EmailSubject ) {
    HRESULT _hr = put_EmailSubject(EmailSubject);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(111)
inline _bstr_t PPT::Hyperlink::GetScreenTip ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ScreenTip(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(112)
inline void PPT::Hyperlink::PutScreenTip ( _bstr_t ScreenTip ) {
    HRESULT _hr = put_ScreenTip(ScreenTip);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(113)
inline _bstr_t PPT::Hyperlink::GetTextToDisplay ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TextToDisplay(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(114)
inline void PPT::Hyperlink::PutTextToDisplay ( _bstr_t TextToDisplay ) {
    HRESULT _hr = put_TextToDisplay(TextToDisplay);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(115)
inline enum Office::MsoTriState PPT::Hyperlink::GetShowAndReturn ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_ShowAndReturn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(116)
inline void PPT::Hyperlink::PutShowAndReturn ( enum Office::MsoTriState ShowAndReturn ) {
    HRESULT _hr = put_ShowAndReturn(ShowAndReturn);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(117)
inline HRESULT PPT::Hyperlink::Follow ( ) {
    HRESULT _hr = raw_Follow();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(118)
inline HRESULT PPT::Hyperlink::CreateNewDocument ( _bstr_t FileName, enum Office::MsoTriState EditNow, enum Office::MsoTriState Overwrite ) {
    HRESULT _hr = raw_CreateNewDocument(FileName, EditNow, Overwrite);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(119)
inline HRESULT PPT::Hyperlink::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface Hyperlinks wrapper method implementations
//

#pragma implementation_key(120)
inline PPT::_ApplicationPtr PPT::Hyperlinks::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(121)
inline IDispatchPtr PPT::Hyperlinks::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(122)
inline PPT::HyperlinkPtr PPT::Hyperlinks::Item ( int Index ) {
    struct Hyperlink * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return HyperlinkPtr(_result, false);
}

//
// interface PPT_PageSetup wrapper method implementations
//

#pragma implementation_key(123)
inline PPT::_ApplicationPtr PPT::PPT_PageSetup::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(124)
inline IDispatchPtr PPT::PPT_PageSetup::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(125)
inline int PPT::PPT_PageSetup::GetFirstSlideNumber ( ) {
    int _result = 0;
    HRESULT _hr = get_FirstSlideNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(126)
inline void PPT::PPT_PageSetup::PutFirstSlideNumber ( int FirstSlideNumber ) {
    HRESULT _hr = put_FirstSlideNumber(FirstSlideNumber);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(127)
inline float PPT::PPT_PageSetup::GetSlideHeight ( ) {
    float _result = 0;
    HRESULT _hr = get_SlideHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(128)
inline void PPT::PPT_PageSetup::PutSlideHeight ( float SlideHeight ) {
    HRESULT _hr = put_SlideHeight(SlideHeight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(129)
inline float PPT::PPT_PageSetup::GetSlideWidth ( ) {
    float _result = 0;
    HRESULT _hr = get_SlideWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(130)
inline void PPT::PPT_PageSetup::PutSlideWidth ( float SlideWidth ) {
    HRESULT _hr = put_SlideWidth(SlideWidth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(131)
inline enum PPT::PpSlideSizeType PPT::PPT_PageSetup::GetSlideSize ( ) {
    enum PpSlideSizeType _result;
    HRESULT _hr = get_SlideSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(132)
inline void PPT::PPT_PageSetup::PutSlideSize ( enum PpSlideSizeType SlideSize ) {
    HRESULT _hr = put_SlideSize(SlideSize);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(133)
inline enum Office::MsoOrientation PPT::PPT_PageSetup::GetNotesOrientation ( ) {
    enum Office::MsoOrientation _result;
    HRESULT _hr = get_NotesOrientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(134)
inline void PPT::PPT_PageSetup::PutNotesOrientation ( enum Office::MsoOrientation NotesOrientation ) {
    HRESULT _hr = put_NotesOrientation(NotesOrientation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(135)
inline enum Office::MsoOrientation PPT::PPT_PageSetup::GetSlideOrientation ( ) {
    enum Office::MsoOrientation _result;
    HRESULT _hr = get_SlideOrientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(136)
inline void PPT::PPT_PageSetup::PutSlideOrientation ( enum Office::MsoOrientation SlideOrientation ) {
    HRESULT _hr = put_SlideOrientation(SlideOrientation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ExtraColors wrapper method implementations
//

#pragma implementation_key(137)
inline PPT::_ApplicationPtr PPT::ExtraColors::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(138)
inline IDispatchPtr PPT::ExtraColors::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(139)
inline Office::MsoRGBType PPT::ExtraColors::Item ( int Index ) {
    Office::MsoRGBType _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(140)
inline HRESULT PPT::ExtraColors::Add ( Office::MsoRGBType Type ) {
    HRESULT _hr = raw_Add(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(141)
inline HRESULT PPT::ExtraColors::Clear ( ) {
    HRESULT _hr = raw_Clear();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface RGBColor wrapper method implementations
//

#pragma implementation_key(142)
inline PPT::_ApplicationPtr PPT::RGBColor::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(143)
inline IDispatchPtr PPT::RGBColor::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(144)
inline Office::MsoRGBType PPT::RGBColor::GetPPT_RGB ( ) {
    Office::MsoRGBType _result;
    HRESULT _hr = get_PPT_RGB(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(145)
inline void PPT::RGBColor::PutPPT_RGB ( Office::MsoRGBType PPT_RGB ) {
    HRESULT _hr = put_PPT_RGB(PPT_RGB);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ColorScheme wrapper method implementations
//

#pragma implementation_key(146)
inline PPT::_ApplicationPtr PPT::ColorScheme::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(147)
inline IDispatchPtr PPT::ColorScheme::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(148)
inline PPT::RGBColorPtr PPT::ColorScheme::Colors ( enum PpColorSchemeIndex SchemeColor ) {
    struct RGBColor * _result = 0;
    HRESULT _hr = raw_Colors(SchemeColor, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RGBColorPtr(_result, false);
}

#pragma implementation_key(149)
inline HRESULT PPT::ColorScheme::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface ColorSchemes wrapper method implementations
//

#pragma implementation_key(150)
inline PPT::_ApplicationPtr PPT::ColorSchemes::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(151)
inline IDispatchPtr PPT::ColorSchemes::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(152)
inline PPT::ColorSchemePtr PPT::ColorSchemes::Item ( int Index ) {
    struct ColorScheme * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColorSchemePtr(_result, false);
}

#pragma implementation_key(153)
inline PPT::ColorSchemePtr PPT::ColorSchemes::Add ( struct ColorScheme * Scheme ) {
    struct ColorScheme * _result = 0;
    HRESULT _hr = raw_Add(Scheme, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColorSchemePtr(_result, false);
}

//
// interface SoundEffect wrapper method implementations
//

#pragma implementation_key(154)
inline PPT::_ApplicationPtr PPT::SoundEffect::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(155)
inline IDispatchPtr PPT::SoundEffect::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(156)
inline _bstr_t PPT::SoundEffect::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(157)
inline void PPT::SoundEffect::PutName ( _bstr_t Name ) {
    HRESULT _hr = put_Name(Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(158)
inline enum PPT::PpSoundEffectType PPT::SoundEffect::GetType ( ) {
    enum PpSoundEffectType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(159)
inline void PPT::SoundEffect::PutType ( enum PpSoundEffectType Type ) {
    HRESULT _hr = put_Type(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(160)
inline HRESULT PPT::SoundEffect::ImportFromFile ( _bstr_t FileName ) {
    HRESULT _hr = raw_ImportFromFile(FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(161)
inline HRESULT PPT::SoundEffect::Play ( ) {
    HRESULT _hr = raw_Play();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface SlideShowTransition wrapper method implementations
//

#pragma implementation_key(162)
inline PPT::_ApplicationPtr PPT::SlideShowTransition::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(163)
inline IDispatchPtr PPT::SlideShowTransition::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(164)
inline enum Office::MsoTriState PPT::SlideShowTransition::GetAdvanceOnClick ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_AdvanceOnClick(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(165)
inline void PPT::SlideShowTransition::PutAdvanceOnClick ( enum Office::MsoTriState AdvanceOnClick ) {
    HRESULT _hr = put_AdvanceOnClick(AdvanceOnClick);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(166)
inline enum Office::MsoTriState PPT::SlideShowTransition::GetAdvanceOnTime ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_AdvanceOnTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(167)
inline void PPT::SlideShowTransition::PutAdvanceOnTime ( enum Office::MsoTriState AdvanceOnTime ) {
    HRESULT _hr = put_AdvanceOnTime(AdvanceOnTime);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(168)
inline float PPT::SlideShowTransition::GetAdvanceTime ( ) {
    float _result = 0;
    HRESULT _hr = get_AdvanceTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(169)
inline void PPT::SlideShowTransition::PutAdvanceTime ( float AdvanceTime ) {
    HRESULT _hr = put_AdvanceTime(AdvanceTime);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(170)
inline enum PPT::PpEntryEffect PPT::SlideShowTransition::GetEntryEffect ( ) {
    enum PpEntryEffect _result;
    HRESULT _hr = get_EntryEffect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(171)
inline void PPT::SlideShowTransition::PutEntryEffect ( enum PpEntryEffect EntryEffect ) {
    HRESULT _hr = put_EntryEffect(EntryEffect);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(172)
inline enum Office::MsoTriState PPT::SlideShowTransition::GetHidden ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Hidden(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(173)
inline void PPT::SlideShowTransition::PutHidden ( enum Office::MsoTriState Hidden ) {
    HRESULT _hr = put_Hidden(Hidden);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(174)
inline enum Office::MsoTriState PPT::SlideShowTransition::GetLoopSoundUntilNext ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_LoopSoundUntilNext(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(175)
inline void PPT::SlideShowTransition::PutLoopSoundUntilNext ( enum Office::MsoTriState LoopSoundUntilNext ) {
    HRESULT _hr = put_LoopSoundUntilNext(LoopSoundUntilNext);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(176)
inline PPT::SoundEffectPtr PPT::SlideShowTransition::GetSoundEffect ( ) {
    struct SoundEffect * _result = 0;
    HRESULT _hr = get_SoundEffect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SoundEffectPtr(_result, false);
}

#pragma implementation_key(177)
inline enum PPT::PpTransitionSpeed PPT::SlideShowTransition::GetSpeed ( ) {
    enum PpTransitionSpeed _result;
    HRESULT _hr = get_Speed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(178)
inline void PPT::SlideShowTransition::PutSpeed ( enum PpTransitionSpeed Speed ) {
    HRESULT _hr = put_Speed(Speed);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(179)
inline float PPT::SlideShowTransition::GetDuration ( ) {
    float _result = 0;
    HRESULT _hr = get_Duration(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(180)
inline void PPT::SlideShowTransition::PutDuration ( float Duration ) {
    HRESULT _hr = put_Duration(Duration);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface SoundFormat wrapper method implementations
//

#pragma implementation_key(181)
inline HRESULT PPT::SoundFormat::Play ( ) {
    HRESULT _hr = raw_Play();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(182)
inline HRESULT PPT::SoundFormat::Import ( _bstr_t FileName ) {
    HRESULT _hr = raw_Import(FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(183)
inline enum PPT::PpSoundFormatType PPT::SoundFormat::Export ( _bstr_t FileName ) {
    enum PpSoundFormatType _result;
    HRESULT _hr = raw_Export(FileName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(184)
inline enum PPT::PpSoundFormatType PPT::SoundFormat::GetType ( ) {
    enum PpSoundFormatType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(185)
inline _bstr_t PPT::SoundFormat::GetSourceFullName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SourceFullName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface PlaceholderFormat wrapper method implementations
//

#pragma implementation_key(186)
inline PPT::_ApplicationPtr PPT::PlaceholderFormat::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(187)
inline IDispatchPtr PPT::PlaceholderFormat::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(188)
inline enum PPT::PpPlaceholderType PPT::PlaceholderFormat::GetType ( ) {
    enum PpPlaceholderType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(189)
inline _bstr_t PPT::PlaceholderFormat::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(190)
inline void PPT::PlaceholderFormat::PutName ( _bstr_t Name ) {
    HRESULT _hr = put_Name(Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(191)
inline enum Office::MsoShapeType PPT::PlaceholderFormat::GetContainedType ( ) {
    enum Office::MsoShapeType _result;
    HRESULT _hr = get_ContainedType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(192)
inline int PPT::PlaceholderFormat::GetPosition ( ) {
    int _result = 0;
    HRESULT _hr = get_Position(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface Adjustments wrapper method implementations
//

#pragma implementation_key(193)
inline IDispatchPtr PPT::Adjustments::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(194)
inline long PPT::Adjustments::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(195)
inline IDispatchPtr PPT::Adjustments::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(196)
inline int PPT::Adjustments::GetCount ( ) {
    int _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(197)
inline float PPT::Adjustments::GetItem ( int Index ) {
    float _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(198)
inline void PPT::Adjustments::PutItem ( int Index, float Val ) {
    HRESULT _hr = put_Item(Index, Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface PictureFormat wrapper method implementations
//

#pragma implementation_key(199)
inline IDispatchPtr PPT::PictureFormat::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(200)
inline long PPT::PictureFormat::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(201)
inline IDispatchPtr PPT::PictureFormat::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(202)
inline HRESULT PPT::PictureFormat::IncrementBrightness ( float Increment ) {
    HRESULT _hr = raw_IncrementBrightness(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(203)
inline HRESULT PPT::PictureFormat::IncrementContrast ( float Increment ) {
    HRESULT _hr = raw_IncrementContrast(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(204)
inline float PPT::PictureFormat::GetBrightness ( ) {
    float _result = 0;
    HRESULT _hr = get_Brightness(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(205)
inline void PPT::PictureFormat::PutBrightness ( float Brightness ) {
    HRESULT _hr = put_Brightness(Brightness);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(206)
inline enum Office::MsoPictureColorType PPT::PictureFormat::GetColorType ( ) {
    enum Office::MsoPictureColorType _result;
    HRESULT _hr = get_ColorType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(207)
inline void PPT::PictureFormat::PutColorType ( enum Office::MsoPictureColorType ColorType ) {
    HRESULT _hr = put_ColorType(ColorType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(208)
inline float PPT::PictureFormat::GetContrast ( ) {
    float _result = 0;
    HRESULT _hr = get_Contrast(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(209)
inline void PPT::PictureFormat::PutContrast ( float Contrast ) {
    HRESULT _hr = put_Contrast(Contrast);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(210)
inline float PPT::PictureFormat::GetCropBottom ( ) {
    float _result = 0;
    HRESULT _hr = get_CropBottom(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(211)
inline void PPT::PictureFormat::PutCropBottom ( float CropBottom ) {
    HRESULT _hr = put_CropBottom(CropBottom);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(212)
inline float PPT::PictureFormat::GetCropLeft ( ) {
    float _result = 0;
    HRESULT _hr = get_CropLeft(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(213)
inline void PPT::PictureFormat::PutCropLeft ( float CropLeft ) {
    HRESULT _hr = put_CropLeft(CropLeft);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(214)
inline float PPT::PictureFormat::GetCropRight ( ) {
    float _result = 0;
    HRESULT _hr = get_CropRight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(215)
inline void PPT::PictureFormat::PutCropRight ( float CropRight ) {
    HRESULT _hr = put_CropRight(CropRight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(216)
inline float PPT::PictureFormat::GetCropTop ( ) {
    float _result = 0;
    HRESULT _hr = get_CropTop(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(217)
inline void PPT::PictureFormat::PutCropTop ( float CropTop ) {
    HRESULT _hr = put_CropTop(CropTop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(218)
inline Office::MsoRGBType PPT::PictureFormat::GetTransparencyColor ( ) {
    Office::MsoRGBType _result;
    HRESULT _hr = get_TransparencyColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(219)
inline void PPT::PictureFormat::PutTransparencyColor ( Office::MsoRGBType TransparencyColor ) {
    HRESULT _hr = put_TransparencyColor(TransparencyColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(220)
inline enum Office::MsoTriState PPT::PictureFormat::GetTransparentBackground ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_TransparentBackground(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(221)
inline void PPT::PictureFormat::PutTransparentBackground ( enum Office::MsoTriState TransparentBackground ) {
    HRESULT _hr = put_TransparentBackground(TransparentBackground);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(222)
inline Office::CropPtr PPT::PictureFormat::GetCrop ( ) {
    struct Office::Crop * _result = 0;
    HRESULT _hr = get_Crop(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::CropPtr(_result, false);
}

//
// interface FillFormat wrapper method implementations
//

#pragma implementation_key(223)
inline IDispatchPtr PPT::FillFormat::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(224)
inline long PPT::FillFormat::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(225)
inline IDispatchPtr PPT::FillFormat::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(226)
inline HRESULT PPT::FillFormat::Background ( ) {
    HRESULT _hr = raw_Background();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(227)
inline HRESULT PPT::FillFormat::OneColorGradient ( enum Office::MsoGradientStyle Style, int Variant, float Degree ) {
    HRESULT _hr = raw_OneColorGradient(Style, Variant, Degree);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(228)
inline HRESULT PPT::FillFormat::Patterned ( enum Office::MsoPatternType Pattern ) {
    HRESULT _hr = raw_Patterned(Pattern);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(229)
inline HRESULT PPT::FillFormat::PresetGradient ( enum Office::MsoGradientStyle Style, int Variant, enum Office::MsoPresetGradientType PresetGradientType ) {
    HRESULT _hr = raw_PresetGradient(Style, Variant, PresetGradientType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(230)
inline HRESULT PPT::FillFormat::PresetTextured ( enum Office::MsoPresetTexture PresetTexture ) {
    HRESULT _hr = raw_PresetTextured(PresetTexture);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(231)
inline HRESULT PPT::FillFormat::Solid ( ) {
    HRESULT _hr = raw_Solid();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(232)
inline HRESULT PPT::FillFormat::TwoColorGradient ( enum Office::MsoGradientStyle Style, int Variant ) {
    HRESULT _hr = raw_TwoColorGradient(Style, Variant);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(233)
inline HRESULT PPT::FillFormat::UserPicture ( _bstr_t PictureFile ) {
    HRESULT _hr = raw_UserPicture(PictureFile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(234)
inline HRESULT PPT::FillFormat::UserTextured ( _bstr_t TextureFile ) {
    HRESULT _hr = raw_UserTextured(TextureFile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(235)
inline PPT::ColorFormatPtr PPT::FillFormat::GetBackColor ( ) {
    struct ColorFormat * _result = 0;
    HRESULT _hr = get_BackColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColorFormatPtr(_result, false);
}

#pragma implementation_key(236)
inline void PPT::FillFormat::PutBackColor ( struct ColorFormat * BackColor ) {
    HRESULT _hr = put_BackColor(BackColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(237)
inline PPT::ColorFormatPtr PPT::FillFormat::GetForeColor ( ) {
    struct ColorFormat * _result = 0;
    HRESULT _hr = get_ForeColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColorFormatPtr(_result, false);
}

#pragma implementation_key(238)
inline void PPT::FillFormat::PutForeColor ( struct ColorFormat * ForeColor ) {
    HRESULT _hr = put_ForeColor(ForeColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(239)
inline enum Office::MsoGradientColorType PPT::FillFormat::GetGradientColorType ( ) {
    enum Office::MsoGradientColorType _result;
    HRESULT _hr = get_GradientColorType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(240)
inline float PPT::FillFormat::GetGradientDegree ( ) {
    float _result = 0;
    HRESULT _hr = get_GradientDegree(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(241)
inline enum Office::MsoGradientStyle PPT::FillFormat::GetGradientStyle ( ) {
    enum Office::MsoGradientStyle _result;
    HRESULT _hr = get_GradientStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(242)
inline int PPT::FillFormat::GetGradientVariant ( ) {
    int _result = 0;
    HRESULT _hr = get_GradientVariant(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(243)
inline enum Office::MsoPatternType PPT::FillFormat::GetPattern ( ) {
    enum Office::MsoPatternType _result;
    HRESULT _hr = get_Pattern(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(244)
inline enum Office::MsoPresetGradientType PPT::FillFormat::GetPresetGradientType ( ) {
    enum Office::MsoPresetGradientType _result;
    HRESULT _hr = get_PresetGradientType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(245)
inline enum Office::MsoPresetTexture PPT::FillFormat::GetPresetTexture ( ) {
    enum Office::MsoPresetTexture _result;
    HRESULT _hr = get_PresetTexture(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(246)
inline _bstr_t PPT::FillFormat::GetTextureName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TextureName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(247)
inline enum Office::MsoTextureType PPT::FillFormat::GetTextureType ( ) {
    enum Office::MsoTextureType _result;
    HRESULT _hr = get_TextureType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(248)
inline float PPT::FillFormat::GetTransparency ( ) {
    float _result = 0;
    HRESULT _hr = get_Transparency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(249)
inline void PPT::FillFormat::PutTransparency ( float Transparency ) {
    HRESULT _hr = put_Transparency(Transparency);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(250)
inline enum Office::MsoFillType PPT::FillFormat::GetType ( ) {
    enum Office::MsoFillType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(251)
inline enum Office::MsoTriState PPT::FillFormat::GetVisible ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(252)
inline void PPT::FillFormat::PutVisible ( enum Office::MsoTriState Visible ) {
    HRESULT _hr = put_Visible(Visible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(253)
inline Office::GradientStopsPtr PPT::FillFormat::GetGradientStops ( ) {
    struct Office::GradientStops * _result = 0;
    HRESULT _hr = get_GradientStops(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::GradientStopsPtr(_result, false);
}

#pragma implementation_key(254)
inline float PPT::FillFormat::GetTextureOffsetX ( ) {
    float _result = 0;
    HRESULT _hr = get_TextureOffsetX(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(255)
inline void PPT::FillFormat::PutTextureOffsetX ( float TextureOffsetX ) {
    HRESULT _hr = put_TextureOffsetX(TextureOffsetX);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(256)
inline float PPT::FillFormat::GetTextureOffsetY ( ) {
    float _result = 0;
    HRESULT _hr = get_TextureOffsetY(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(257)
inline void PPT::FillFormat::PutTextureOffsetY ( float TextureOffsetY ) {
    HRESULT _hr = put_TextureOffsetY(TextureOffsetY);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(258)
inline enum Office::MsoTextureAlignment PPT::FillFormat::GetTextureAlignment ( ) {
    enum Office::MsoTextureAlignment _result;
    HRESULT _hr = get_TextureAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(259)
inline void PPT::FillFormat::PutTextureAlignment ( enum Office::MsoTextureAlignment TextureAlignment ) {
    HRESULT _hr = put_TextureAlignment(TextureAlignment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(260)
inline float PPT::FillFormat::GetTextureHorizontalScale ( ) {
    float _result = 0;
    HRESULT _hr = get_TextureHorizontalScale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(261)
inline void PPT::FillFormat::PutTextureHorizontalScale ( float HorizontalScale ) {
    HRESULT _hr = put_TextureHorizontalScale(HorizontalScale);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(262)
inline float PPT::FillFormat::GetTextureVerticalScale ( ) {
    float _result = 0;
    HRESULT _hr = get_TextureVerticalScale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(263)
inline void PPT::FillFormat::PutTextureVerticalScale ( float VerticalScale ) {
    HRESULT _hr = put_TextureVerticalScale(VerticalScale);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(264)
inline enum Office::MsoTriState PPT::FillFormat::GetTextureTile ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_TextureTile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(265)
inline void PPT::FillFormat::PutTextureTile ( enum Office::MsoTriState TextureTile ) {
    HRESULT _hr = put_TextureTile(TextureTile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(266)
inline enum Office::MsoTriState PPT::FillFormat::GetRotateWithObject ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_RotateWithObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(267)
inline void PPT::FillFormat::PutRotateWithObject ( enum Office::MsoTriState RotateWithObject ) {
    HRESULT _hr = put_RotateWithObject(RotateWithObject);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(268)
inline Office::PictureEffectsPtr PPT::FillFormat::GetPictureEffects ( ) {
    struct Office::PictureEffects * _result = 0;
    HRESULT _hr = get_PictureEffects(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::PictureEffectsPtr(_result, false);
}

#pragma implementation_key(269)
inline float PPT::FillFormat::GetGradientAngle ( ) {
    float _result = 0;
    HRESULT _hr = get_GradientAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(270)
inline void PPT::FillFormat::PutGradientAngle ( float GradientAngle ) {
    HRESULT _hr = put_GradientAngle(GradientAngle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface LineFormat wrapper method implementations
//

#pragma implementation_key(271)
inline IDispatchPtr PPT::LineFormat::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(272)
inline long PPT::LineFormat::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(273)
inline IDispatchPtr PPT::LineFormat::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(274)
inline PPT::ColorFormatPtr PPT::LineFormat::GetBackColor ( ) {
    struct ColorFormat * _result = 0;
    HRESULT _hr = get_BackColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColorFormatPtr(_result, false);
}

#pragma implementation_key(275)
inline void PPT::LineFormat::PutBackColor ( struct ColorFormat * BackColor ) {
    HRESULT _hr = put_BackColor(BackColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(276)
inline enum Office::MsoArrowheadLength PPT::LineFormat::GetBeginArrowheadLength ( ) {
    enum Office::MsoArrowheadLength _result;
    HRESULT _hr = get_BeginArrowheadLength(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(277)
inline void PPT::LineFormat::PutBeginArrowheadLength ( enum Office::MsoArrowheadLength BeginArrowheadLength ) {
    HRESULT _hr = put_BeginArrowheadLength(BeginArrowheadLength);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(278)
inline enum Office::MsoArrowheadStyle PPT::LineFormat::GetBeginArrowheadStyle ( ) {
    enum Office::MsoArrowheadStyle _result;
    HRESULT _hr = get_BeginArrowheadStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(279)
inline void PPT::LineFormat::PutBeginArrowheadStyle ( enum Office::MsoArrowheadStyle BeginArrowheadStyle ) {
    HRESULT _hr = put_BeginArrowheadStyle(BeginArrowheadStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(280)
inline enum Office::MsoArrowheadWidth PPT::LineFormat::GetBeginArrowheadWidth ( ) {
    enum Office::MsoArrowheadWidth _result;
    HRESULT _hr = get_BeginArrowheadWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(281)
inline void PPT::LineFormat::PutBeginArrowheadWidth ( enum Office::MsoArrowheadWidth BeginArrowheadWidth ) {
    HRESULT _hr = put_BeginArrowheadWidth(BeginArrowheadWidth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(282)
inline enum Office::MsoLineDashStyle PPT::LineFormat::GetDashStyle ( ) {
    enum Office::MsoLineDashStyle _result;
    HRESULT _hr = get_DashStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(283)
inline void PPT::LineFormat::PutDashStyle ( enum Office::MsoLineDashStyle DashStyle ) {
    HRESULT _hr = put_DashStyle(DashStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(284)
inline enum Office::MsoArrowheadLength PPT::LineFormat::GetEndArrowheadLength ( ) {
    enum Office::MsoArrowheadLength _result;
    HRESULT _hr = get_EndArrowheadLength(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(285)
inline void PPT::LineFormat::PutEndArrowheadLength ( enum Office::MsoArrowheadLength EndArrowheadLength ) {
    HRESULT _hr = put_EndArrowheadLength(EndArrowheadLength);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(286)
inline enum Office::MsoArrowheadStyle PPT::LineFormat::GetEndArrowheadStyle ( ) {
    enum Office::MsoArrowheadStyle _result;
    HRESULT _hr = get_EndArrowheadStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(287)
inline void PPT::LineFormat::PutEndArrowheadStyle ( enum Office::MsoArrowheadStyle EndArrowheadStyle ) {
    HRESULT _hr = put_EndArrowheadStyle(EndArrowheadStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(288)
inline enum Office::MsoArrowheadWidth PPT::LineFormat::GetEndArrowheadWidth ( ) {
    enum Office::MsoArrowheadWidth _result;
    HRESULT _hr = get_EndArrowheadWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(289)
inline void PPT::LineFormat::PutEndArrowheadWidth ( enum Office::MsoArrowheadWidth EndArrowheadWidth ) {
    HRESULT _hr = put_EndArrowheadWidth(EndArrowheadWidth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(290)
inline PPT::ColorFormatPtr PPT::LineFormat::GetForeColor ( ) {
    struct ColorFormat * _result = 0;
    HRESULT _hr = get_ForeColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColorFormatPtr(_result, false);
}

#pragma implementation_key(291)
inline void PPT::LineFormat::PutForeColor ( struct ColorFormat * ForeColor ) {
    HRESULT _hr = put_ForeColor(ForeColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(292)
inline enum Office::MsoPatternType PPT::LineFormat::GetPattern ( ) {
    enum Office::MsoPatternType _result;
    HRESULT _hr = get_Pattern(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(293)
inline void PPT::LineFormat::PutPattern ( enum Office::MsoPatternType Pattern ) {
    HRESULT _hr = put_Pattern(Pattern);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(294)
inline enum Office::MsoLineStyle PPT::LineFormat::GetStyle ( ) {
    enum Office::MsoLineStyle _result;
    HRESULT _hr = get_Style(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(295)
inline void PPT::LineFormat::PutStyle ( enum Office::MsoLineStyle Style ) {
    HRESULT _hr = put_Style(Style);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(296)
inline float PPT::LineFormat::GetTransparency ( ) {
    float _result = 0;
    HRESULT _hr = get_Transparency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(297)
inline void PPT::LineFormat::PutTransparency ( float Transparency ) {
    HRESULT _hr = put_Transparency(Transparency);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(298)
inline enum Office::MsoTriState PPT::LineFormat::GetVisible ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(299)
inline void PPT::LineFormat::PutVisible ( enum Office::MsoTriState Visible ) {
    HRESULT _hr = put_Visible(Visible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(300)
inline float PPT::LineFormat::GetWeight ( ) {
    float _result = 0;
    HRESULT _hr = get_Weight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(301)
inline void PPT::LineFormat::PutWeight ( float Weight ) {
    HRESULT _hr = put_Weight(Weight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(302)
inline enum Office::MsoTriState PPT::LineFormat::GetInsetPen ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_InsetPen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(303)
inline void PPT::LineFormat::PutInsetPen ( enum Office::MsoTriState InsetPen ) {
    HRESULT _hr = put_InsetPen(InsetPen);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ShadowFormat wrapper method implementations
//

#pragma implementation_key(304)
inline IDispatchPtr PPT::ShadowFormat::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(305)
inline long PPT::ShadowFormat::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(306)
inline IDispatchPtr PPT::ShadowFormat::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(307)
inline HRESULT PPT::ShadowFormat::IncrementOffsetX ( float Increment ) {
    HRESULT _hr = raw_IncrementOffsetX(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(308)
inline HRESULT PPT::ShadowFormat::IncrementOffsetY ( float Increment ) {
    HRESULT _hr = raw_IncrementOffsetY(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(309)
inline PPT::ColorFormatPtr PPT::ShadowFormat::GetForeColor ( ) {
    struct ColorFormat * _result = 0;
    HRESULT _hr = get_ForeColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColorFormatPtr(_result, false);
}

#pragma implementation_key(310)
inline void PPT::ShadowFormat::PutForeColor ( struct ColorFormat * ForeColor ) {
    HRESULT _hr = put_ForeColor(ForeColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(311)
inline enum Office::MsoTriState PPT::ShadowFormat::GetObscured ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Obscured(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(312)
inline void PPT::ShadowFormat::PutObscured ( enum Office::MsoTriState Obscured ) {
    HRESULT _hr = put_Obscured(Obscured);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(313)
inline float PPT::ShadowFormat::GetOffsetX ( ) {
    float _result = 0;
    HRESULT _hr = get_OffsetX(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(314)
inline void PPT::ShadowFormat::PutOffsetX ( float OffsetX ) {
    HRESULT _hr = put_OffsetX(OffsetX);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(315)
inline float PPT::ShadowFormat::GetOffsetY ( ) {
    float _result = 0;
    HRESULT _hr = get_OffsetY(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(316)
inline void PPT::ShadowFormat::PutOffsetY ( float OffsetY ) {
    HRESULT _hr = put_OffsetY(OffsetY);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(317)
inline float PPT::ShadowFormat::GetTransparency ( ) {
    float _result = 0;
    HRESULT _hr = get_Transparency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(318)
inline void PPT::ShadowFormat::PutTransparency ( float Transparency ) {
    HRESULT _hr = put_Transparency(Transparency);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(319)
inline enum Office::MsoShadowType PPT::ShadowFormat::GetType ( ) {
    enum Office::MsoShadowType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(320)
inline void PPT::ShadowFormat::PutType ( enum Office::MsoShadowType Type ) {
    HRESULT _hr = put_Type(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(321)
inline enum Office::MsoTriState PPT::ShadowFormat::GetVisible ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(322)
inline void PPT::ShadowFormat::PutVisible ( enum Office::MsoTriState Visible ) {
    HRESULT _hr = put_Visible(Visible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(323)
inline enum Office::MsoShadowStyle PPT::ShadowFormat::GetStyle ( ) {
    enum Office::MsoShadowStyle _result;
    HRESULT _hr = get_Style(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(324)
inline void PPT::ShadowFormat::PutStyle ( enum Office::MsoShadowStyle ShadowStyle ) {
    HRESULT _hr = put_Style(ShadowStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(325)
inline float PPT::ShadowFormat::GetBlur ( ) {
    float _result = 0;
    HRESULT _hr = get_Blur(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(326)
inline void PPT::ShadowFormat::PutBlur ( float Blur ) {
    HRESULT _hr = put_Blur(Blur);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(327)
inline float PPT::ShadowFormat::GetSize ( ) {
    float _result = 0;
    HRESULT _hr = get_Size(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(328)
inline void PPT::ShadowFormat::PutSize ( float Size ) {
    HRESULT _hr = put_Size(Size);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(329)
inline enum Office::MsoTriState PPT::ShadowFormat::GetRotateWithShape ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_RotateWithShape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(330)
inline void PPT::ShadowFormat::PutRotateWithShape ( enum Office::MsoTriState RotateWithShape ) {
    HRESULT _hr = put_RotateWithShape(RotateWithShape);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface TextEffectFormat wrapper method implementations
//

#pragma implementation_key(331)
inline IDispatchPtr PPT::TextEffectFormat::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(332)
inline long PPT::TextEffectFormat::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(333)
inline IDispatchPtr PPT::TextEffectFormat::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(334)
inline HRESULT PPT::TextEffectFormat::ToggleVerticalText ( ) {
    HRESULT _hr = raw_ToggleVerticalText();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(335)
inline enum Office::MsoTextEffectAlignment PPT::TextEffectFormat::GetAlignment ( ) {
    enum Office::MsoTextEffectAlignment _result;
    HRESULT _hr = get_Alignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(336)
inline void PPT::TextEffectFormat::PutAlignment ( enum Office::MsoTextEffectAlignment Alignment ) {
    HRESULT _hr = put_Alignment(Alignment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(337)
inline enum Office::MsoTriState PPT::TextEffectFormat::GetFontBold ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_FontBold(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(338)
inline void PPT::TextEffectFormat::PutFontBold ( enum Office::MsoTriState FontBold ) {
    HRESULT _hr = put_FontBold(FontBold);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(339)
inline enum Office::MsoTriState PPT::TextEffectFormat::GetFontItalic ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_FontItalic(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(340)
inline void PPT::TextEffectFormat::PutFontItalic ( enum Office::MsoTriState FontItalic ) {
    HRESULT _hr = put_FontItalic(FontItalic);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(341)
inline _bstr_t PPT::TextEffectFormat::GetFontName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FontName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(342)
inline void PPT::TextEffectFormat::PutFontName ( _bstr_t FontName ) {
    HRESULT _hr = put_FontName(FontName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(343)
inline float PPT::TextEffectFormat::GetFontSize ( ) {
    float _result = 0;
    HRESULT _hr = get_FontSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(344)
inline void PPT::TextEffectFormat::PutFontSize ( float FontSize ) {
    HRESULT _hr = put_FontSize(FontSize);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(345)
inline enum Office::MsoTriState PPT::TextEffectFormat::GetKernedPairs ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_KernedPairs(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(346)
inline void PPT::TextEffectFormat::PutKernedPairs ( enum Office::MsoTriState KernedPairs ) {
    HRESULT _hr = put_KernedPairs(KernedPairs);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(347)
inline enum Office::MsoTriState PPT::TextEffectFormat::GetNormalizedHeight ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_NormalizedHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(348)
inline void PPT::TextEffectFormat::PutNormalizedHeight ( enum Office::MsoTriState NormalizedHeight ) {
    HRESULT _hr = put_NormalizedHeight(NormalizedHeight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(349)
inline enum Office::MsoPresetTextEffectShape PPT::TextEffectFormat::GetPresetShape ( ) {
    enum Office::MsoPresetTextEffectShape _result;
    HRESULT _hr = get_PresetShape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(350)
inline void PPT::TextEffectFormat::PutPresetShape ( enum Office::MsoPresetTextEffectShape PresetShape ) {
    HRESULT _hr = put_PresetShape(PresetShape);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(351)
inline enum Office::MsoPresetTextEffect PPT::TextEffectFormat::GetPresetTextEffect ( ) {
    enum Office::MsoPresetTextEffect _result;
    HRESULT _hr = get_PresetTextEffect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(352)
inline void PPT::TextEffectFormat::PutPresetTextEffect ( enum Office::MsoPresetTextEffect Preset ) {
    HRESULT _hr = put_PresetTextEffect(Preset);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(353)
inline enum Office::MsoTriState PPT::TextEffectFormat::GetRotatedChars ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_RotatedChars(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(354)
inline void PPT::TextEffectFormat::PutRotatedChars ( enum Office::MsoTriState RotatedChars ) {
    HRESULT _hr = put_RotatedChars(RotatedChars);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(355)
inline _bstr_t PPT::TextEffectFormat::GetText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(356)
inline void PPT::TextEffectFormat::PutText ( _bstr_t Text ) {
    HRESULT _hr = put_Text(Text);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(357)
inline float PPT::TextEffectFormat::GetTracking ( ) {
    float _result = 0;
    HRESULT _hr = get_Tracking(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(358)
inline void PPT::TextEffectFormat::PutTracking ( float Tracking ) {
    HRESULT _hr = put_Tracking(Tracking);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ThreeDFormat wrapper method implementations
//

#pragma implementation_key(359)
inline IDispatchPtr PPT::ThreeDFormat::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(360)
inline long PPT::ThreeDFormat::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(361)
inline IDispatchPtr PPT::ThreeDFormat::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(362)
inline HRESULT PPT::ThreeDFormat::IncrementRotationX ( float Increment ) {
    HRESULT _hr = raw_IncrementRotationX(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(363)
inline HRESULT PPT::ThreeDFormat::IncrementRotationY ( float Increment ) {
    HRESULT _hr = raw_IncrementRotationY(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(364)
inline HRESULT PPT::ThreeDFormat::ResetRotation ( ) {
    HRESULT _hr = raw_ResetRotation();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(365)
inline HRESULT PPT::ThreeDFormat::SetThreeDFormat ( enum Office::MsoPresetThreeDFormat PresetThreeDFormat ) {
    HRESULT _hr = raw_SetThreeDFormat(PresetThreeDFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(366)
inline HRESULT PPT::ThreeDFormat::SetExtrusionDirection ( enum Office::MsoPresetExtrusionDirection PresetExtrusionDirection ) {
    HRESULT _hr = raw_SetExtrusionDirection(PresetExtrusionDirection);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(367)
inline float PPT::ThreeDFormat::GetDepth ( ) {
    float _result = 0;
    HRESULT _hr = get_Depth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(368)
inline void PPT::ThreeDFormat::PutDepth ( float Depth ) {
    HRESULT _hr = put_Depth(Depth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(369)
inline PPT::ColorFormatPtr PPT::ThreeDFormat::GetExtrusionColor ( ) {
    struct ColorFormat * _result = 0;
    HRESULT _hr = get_ExtrusionColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColorFormatPtr(_result, false);
}

#pragma implementation_key(370)
inline enum Office::MsoExtrusionColorType PPT::ThreeDFormat::GetExtrusionColorType ( ) {
    enum Office::MsoExtrusionColorType _result;
    HRESULT _hr = get_ExtrusionColorType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(371)
inline void PPT::ThreeDFormat::PutExtrusionColorType ( enum Office::MsoExtrusionColorType ExtrusionColorType ) {
    HRESULT _hr = put_ExtrusionColorType(ExtrusionColorType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(372)
inline enum Office::MsoTriState PPT::ThreeDFormat::GetPerspective ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Perspective(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(373)
inline void PPT::ThreeDFormat::PutPerspective ( enum Office::MsoTriState Perspective ) {
    HRESULT _hr = put_Perspective(Perspective);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(374)
inline enum Office::MsoPresetExtrusionDirection PPT::ThreeDFormat::GetPresetExtrusionDirection ( ) {
    enum Office::MsoPresetExtrusionDirection _result;
    HRESULT _hr = get_PresetExtrusionDirection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(375)
inline enum Office::MsoPresetLightingDirection PPT::ThreeDFormat::GetPresetLightingDirection ( ) {
    enum Office::MsoPresetLightingDirection _result;
    HRESULT _hr = get_PresetLightingDirection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(376)
inline void PPT::ThreeDFormat::PutPresetLightingDirection ( enum Office::MsoPresetLightingDirection PresetLightingDirection ) {
    HRESULT _hr = put_PresetLightingDirection(PresetLightingDirection);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(377)
inline enum Office::MsoPresetLightingSoftness PPT::ThreeDFormat::GetPresetLightingSoftness ( ) {
    enum Office::MsoPresetLightingSoftness _result;
    HRESULT _hr = get_PresetLightingSoftness(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(378)
inline void PPT::ThreeDFormat::PutPresetLightingSoftness ( enum Office::MsoPresetLightingSoftness PresetLightingSoftness ) {
    HRESULT _hr = put_PresetLightingSoftness(PresetLightingSoftness);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(379)
inline enum Office::MsoPresetMaterial PPT::ThreeDFormat::GetPresetMaterial ( ) {
    enum Office::MsoPresetMaterial _result;
    HRESULT _hr = get_PresetMaterial(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(380)
inline void PPT::ThreeDFormat::PutPresetMaterial ( enum Office::MsoPresetMaterial PresetMaterial ) {
    HRESULT _hr = put_PresetMaterial(PresetMaterial);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(381)
inline enum Office::MsoPresetThreeDFormat PPT::ThreeDFormat::GetPresetThreeDFormat ( ) {
    enum Office::MsoPresetThreeDFormat _result;
    HRESULT _hr = get_PresetThreeDFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(382)
inline float PPT::ThreeDFormat::GetRotationX ( ) {
    float _result = 0;
    HRESULT _hr = get_RotationX(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(383)
inline void PPT::ThreeDFormat::PutRotationX ( float RotationX ) {
    HRESULT _hr = put_RotationX(RotationX);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(384)
inline float PPT::ThreeDFormat::GetRotationY ( ) {
    float _result = 0;
    HRESULT _hr = get_RotationY(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(385)
inline void PPT::ThreeDFormat::PutRotationY ( float RotationY ) {
    HRESULT _hr = put_RotationY(RotationY);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(386)
inline enum Office::MsoTriState PPT::ThreeDFormat::GetVisible ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(387)
inline void PPT::ThreeDFormat::PutVisible ( enum Office::MsoTriState Visible ) {
    HRESULT _hr = put_Visible(Visible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(388)
inline HRESULT PPT::ThreeDFormat::SetPresetCamera ( enum Office::MsoPresetCamera PresetCamera ) {
    HRESULT _hr = raw_SetPresetCamera(PresetCamera);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(389)
inline HRESULT PPT::ThreeDFormat::IncrementRotationZ ( float Increment ) {
    HRESULT _hr = raw_IncrementRotationZ(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(390)
inline HRESULT PPT::ThreeDFormat::IncrementRotationHorizontal ( float Increment ) {
    HRESULT _hr = raw_IncrementRotationHorizontal(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(391)
inline HRESULT PPT::ThreeDFormat::IncrementRotationVertical ( float Increment ) {
    HRESULT _hr = raw_IncrementRotationVertical(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(392)
inline enum Office::MsoLightRigType PPT::ThreeDFormat::GetPresetLighting ( ) {
    enum Office::MsoLightRigType _result;
    HRESULT _hr = get_PresetLighting(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(393)
inline void PPT::ThreeDFormat::PutPresetLighting ( enum Office::MsoLightRigType PresetLightRigType ) {
    HRESULT _hr = put_PresetLighting(PresetLightRigType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(394)
inline float PPT::ThreeDFormat::GetZ ( ) {
    float _result = 0;
    HRESULT _hr = get_Z(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(395)
inline void PPT::ThreeDFormat::PutZ ( float Z ) {
    HRESULT _hr = put_Z(Z);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(396)
inline enum Office::MsoBevelType PPT::ThreeDFormat::GetBevelTopType ( ) {
    enum Office::MsoBevelType _result;
    HRESULT _hr = get_BevelTopType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(397)
inline void PPT::ThreeDFormat::PutBevelTopType ( enum Office::MsoBevelType BevelTopType ) {
    HRESULT _hr = put_BevelTopType(BevelTopType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(398)
inline float PPT::ThreeDFormat::GetBevelTopInset ( ) {
    float _result = 0;
    HRESULT _hr = get_BevelTopInset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(399)
inline void PPT::ThreeDFormat::PutBevelTopInset ( float BevelTopInset ) {
    HRESULT _hr = put_BevelTopInset(BevelTopInset);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(400)
inline float PPT::ThreeDFormat::GetBevelTopDepth ( ) {
    float _result = 0;
    HRESULT _hr = get_BevelTopDepth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(401)
inline void PPT::ThreeDFormat::PutBevelTopDepth ( float BevelTopDepth ) {
    HRESULT _hr = put_BevelTopDepth(BevelTopDepth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(402)
inline enum Office::MsoBevelType PPT::ThreeDFormat::GetBevelBottomType ( ) {
    enum Office::MsoBevelType _result;
    HRESULT _hr = get_BevelBottomType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(403)
inline void PPT::ThreeDFormat::PutBevelBottomType ( enum Office::MsoBevelType BevelBottomType ) {
    HRESULT _hr = put_BevelBottomType(BevelBottomType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(404)
inline float PPT::ThreeDFormat::GetBevelBottomInset ( ) {
    float _result = 0;
    HRESULT _hr = get_BevelBottomInset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(405)
inline void PPT::ThreeDFormat::PutBevelBottomInset ( float BevelBottomInset ) {
    HRESULT _hr = put_BevelBottomInset(BevelBottomInset);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(406)
inline float PPT::ThreeDFormat::GetBevelBottomDepth ( ) {
    float _result = 0;
    HRESULT _hr = get_BevelBottomDepth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(407)
inline void PPT::ThreeDFormat::PutBevelBottomDepth ( float BevelBottomDepth ) {
    HRESULT _hr = put_BevelBottomDepth(BevelBottomDepth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(408)
inline enum Office::MsoPresetCamera PPT::ThreeDFormat::GetPresetCamera ( ) {
    enum Office::MsoPresetCamera _result;
    HRESULT _hr = get_PresetCamera(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(409)
inline float PPT::ThreeDFormat::GetRotationZ ( ) {
    float _result = 0;
    HRESULT _hr = get_RotationZ(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(410)
inline void PPT::ThreeDFormat::PutRotationZ ( float RotationZ ) {
    HRESULT _hr = put_RotationZ(RotationZ);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(411)
inline float PPT::ThreeDFormat::GetContourWidth ( ) {
    float _result = 0;
    HRESULT _hr = get_ContourWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(412)
inline void PPT::ThreeDFormat::PutContourWidth ( float Width ) {
    HRESULT _hr = put_ContourWidth(Width);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(413)
inline PPT::ColorFormatPtr PPT::ThreeDFormat::GetContourColor ( ) {
    struct ColorFormat * _result = 0;
    HRESULT _hr = get_ContourColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColorFormatPtr(_result, false);
}

#pragma implementation_key(414)
inline float PPT::ThreeDFormat::GetFieldOfView ( ) {
    float _result = 0;
    HRESULT _hr = get_FieldOfView(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(415)
inline void PPT::ThreeDFormat::PutFieldOfView ( float FOV ) {
    HRESULT _hr = put_FieldOfView(FOV);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(416)
inline enum Office::MsoTriState PPT::ThreeDFormat::GetProjectText ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_ProjectText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(417)
inline void PPT::ThreeDFormat::PutProjectText ( enum Office::MsoTriState ProjectText ) {
    HRESULT _hr = put_ProjectText(ProjectText);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(418)
inline float PPT::ThreeDFormat::GetLightAngle ( ) {
    float _result = 0;
    HRESULT _hr = get_LightAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(419)
inline void PPT::ThreeDFormat::PutLightAngle ( float LightAngle ) {
    HRESULT _hr = put_LightAngle(LightAngle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface CalloutFormat wrapper method implementations
//

#pragma implementation_key(420)
inline IDispatchPtr PPT::CalloutFormat::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(421)
inline long PPT::CalloutFormat::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(422)
inline IDispatchPtr PPT::CalloutFormat::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(423)
inline HRESULT PPT::CalloutFormat::AutomaticLength ( ) {
    HRESULT _hr = raw_AutomaticLength();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(424)
inline HRESULT PPT::CalloutFormat::CustomDrop ( float Drop ) {
    HRESULT _hr = raw_CustomDrop(Drop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(425)
inline HRESULT PPT::CalloutFormat::CustomLength ( float Length ) {
    HRESULT _hr = raw_CustomLength(Length);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(426)
inline HRESULT PPT::CalloutFormat::PresetDrop ( enum Office::MsoCalloutDropType DropType ) {
    HRESULT _hr = raw_PresetDrop(DropType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(427)
inline enum Office::MsoTriState PPT::CalloutFormat::GetAccent ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Accent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(428)
inline void PPT::CalloutFormat::PutAccent ( enum Office::MsoTriState Accent ) {
    HRESULT _hr = put_Accent(Accent);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(429)
inline enum Office::MsoCalloutAngleType PPT::CalloutFormat::GetAngle ( ) {
    enum Office::MsoCalloutAngleType _result;
    HRESULT _hr = get_Angle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(430)
inline void PPT::CalloutFormat::PutAngle ( enum Office::MsoCalloutAngleType Angle ) {
    HRESULT _hr = put_Angle(Angle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(431)
inline enum Office::MsoTriState PPT::CalloutFormat::GetAutoAttach ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_AutoAttach(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(432)
inline void PPT::CalloutFormat::PutAutoAttach ( enum Office::MsoTriState AutoAttach ) {
    HRESULT _hr = put_AutoAttach(AutoAttach);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(433)
inline enum Office::MsoTriState PPT::CalloutFormat::GetAutoLength ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_AutoLength(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(434)
inline enum Office::MsoTriState PPT::CalloutFormat::GetBorder ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(435)
inline void PPT::CalloutFormat::PutBorder ( enum Office::MsoTriState Border ) {
    HRESULT _hr = put_Border(Border);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(436)
inline float PPT::CalloutFormat::GetDrop ( ) {
    float _result = 0;
    HRESULT _hr = get_Drop(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(437)
inline enum Office::MsoCalloutDropType PPT::CalloutFormat::GetDropType ( ) {
    enum Office::MsoCalloutDropType _result;
    HRESULT _hr = get_DropType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(438)
inline float PPT::CalloutFormat::GetGap ( ) {
    float _result = 0;
    HRESULT _hr = get_Gap(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(439)
inline void PPT::CalloutFormat::PutGap ( float Gap ) {
    HRESULT _hr = put_Gap(Gap);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(440)
inline float PPT::CalloutFormat::GetLength ( ) {
    float _result = 0;
    HRESULT _hr = get_Length(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(441)
inline enum Office::MsoCalloutType PPT::CalloutFormat::GetType ( ) {
    enum Office::MsoCalloutType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(442)
inline void PPT::CalloutFormat::PutType ( enum Office::MsoCalloutType Type ) {
    HRESULT _hr = put_Type(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ShapeNode wrapper method implementations
//

#pragma implementation_key(443)
inline IDispatchPtr PPT::ShapeNode::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(444)
inline long PPT::ShapeNode::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(445)
inline IDispatchPtr PPT::ShapeNode::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(446)
inline enum Office::MsoEditingType PPT::ShapeNode::GetEditingType ( ) {
    enum Office::MsoEditingType _result;
    HRESULT _hr = get_EditingType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(447)
inline _variant_t PPT::ShapeNode::GetPoints ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Points(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(448)
inline enum Office::MsoSegmentType PPT::ShapeNode::GetSegmentType ( ) {
    enum Office::MsoSegmentType _result;
    HRESULT _hr = get_SegmentType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ShapeNodes wrapper method implementations
//

#pragma implementation_key(449)
inline IDispatchPtr PPT::ShapeNodes::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(450)
inline long PPT::ShapeNodes::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(451)
inline IDispatchPtr PPT::ShapeNodes::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(452)
inline int PPT::ShapeNodes::GetCount ( ) {
    int _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(453)
inline PPT::ShapeNodePtr PPT::ShapeNodes::Item ( const _variant_t & Index ) {
    struct ShapeNode * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeNodePtr(_result, false);
}

#pragma implementation_key(454)
inline IUnknownPtr PPT::ShapeNodes::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(455)
inline HRESULT PPT::ShapeNodes::Delete ( int Index ) {
    HRESULT _hr = raw_Delete(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(456)
inline HRESULT PPT::ShapeNodes::Insert ( int Index, enum Office::MsoSegmentType SegmentType, enum Office::MsoEditingType EditingType, float X1, float Y1, float X2, float Y2, float X3, float Y3 ) {
    HRESULT _hr = raw_Insert(Index, SegmentType, EditingType, X1, Y1, X2, Y2, X3, Y3);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(457)
inline HRESULT PPT::ShapeNodes::SetEditingType ( int Index, enum Office::MsoEditingType EditingType ) {
    HRESULT _hr = raw_SetEditingType(Index, EditingType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(458)
inline HRESULT PPT::ShapeNodes::SetPosition ( int Index, float X1, float Y1 ) {
    HRESULT _hr = raw_SetPosition(Index, X1, Y1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(459)
inline HRESULT PPT::ShapeNodes::SetSegmentType ( int Index, enum Office::MsoSegmentType SegmentType ) {
    HRESULT _hr = raw_SetSegmentType(Index, SegmentType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface LinkFormat wrapper method implementations
//

#pragma implementation_key(460)
inline PPT::_ApplicationPtr PPT::LinkFormat::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(461)
inline IDispatchPtr PPT::LinkFormat::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(462)
inline _bstr_t PPT::LinkFormat::GetSourceFullName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SourceFullName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(463)
inline void PPT::LinkFormat::PutSourceFullName ( _bstr_t SourceFullName ) {
    HRESULT _hr = put_SourceFullName(SourceFullName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(464)
inline enum PPT::PpUpdateOption PPT::LinkFormat::GetAutoUpdate ( ) {
    enum PpUpdateOption _result;
    HRESULT _hr = get_AutoUpdate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(465)
inline void PPT::LinkFormat::PutAutoUpdate ( enum PpUpdateOption AutoUpdate ) {
    HRESULT _hr = put_AutoUpdate(AutoUpdate);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(466)
inline HRESULT PPT::LinkFormat::Update ( ) {
    HRESULT _hr = raw_Update();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(467)
inline HRESULT PPT::LinkFormat::BreakLink ( ) {
    HRESULT _hr = raw_BreakLink();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface ObjectVerbs wrapper method implementations
//

#pragma implementation_key(468)
inline PPT::_ApplicationPtr PPT::ObjectVerbs::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(469)
inline IDispatchPtr PPT::ObjectVerbs::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(470)
inline _bstr_t PPT::ObjectVerbs::Item ( int Index ) {
    BSTR _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface OLEFormat wrapper method implementations
//

#pragma implementation_key(471)
inline PPT::_ApplicationPtr PPT::OLEFormat::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(472)
inline IDispatchPtr PPT::OLEFormat::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(473)
inline PPT::ObjectVerbsPtr PPT::OLEFormat::GetObjectVerbs ( ) {
    struct ObjectVerbs * _result = 0;
    HRESULT _hr = get_ObjectVerbs(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ObjectVerbsPtr(_result, false);
}

#pragma implementation_key(474)
inline IDispatchPtr PPT::OLEFormat::GetObject ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Object(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(475)
inline _bstr_t PPT::OLEFormat::GetProgID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ProgID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(476)
inline enum PPT::PpFollowColors PPT::OLEFormat::GetFollowColors ( ) {
    enum PpFollowColors _result;
    HRESULT _hr = get_FollowColors(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(477)
inline void PPT::OLEFormat::PutFollowColors ( enum PpFollowColors FollowColors ) {
    HRESULT _hr = put_FollowColors(FollowColors);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(478)
inline HRESULT PPT::OLEFormat::DoVerb ( int Index ) {
    HRESULT _hr = raw_DoVerb(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(479)
inline HRESULT PPT::OLEFormat::Activate ( ) {
    HRESULT _hr = raw_Activate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface ActionSetting wrapper method implementations
//

#pragma implementation_key(480)
inline PPT::_ApplicationPtr PPT::ActionSetting::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(481)
inline IDispatchPtr PPT::ActionSetting::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(482)
inline enum PPT::PpActionType PPT::ActionSetting::GetAction ( ) {
    enum PpActionType _result;
    HRESULT _hr = get_Action(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(483)
inline void PPT::ActionSetting::PutAction ( enum PpActionType Action ) {
    HRESULT _hr = put_Action(Action);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(484)
inline _bstr_t PPT::ActionSetting::GetActionVerb ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ActionVerb(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(485)
inline void PPT::ActionSetting::PutActionVerb ( _bstr_t ActionVerb ) {
    HRESULT _hr = put_ActionVerb(ActionVerb);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(486)
inline enum Office::MsoTriState PPT::ActionSetting::GetAnimateAction ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_AnimateAction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(487)
inline void PPT::ActionSetting::PutAnimateAction ( enum Office::MsoTriState AnimateAction ) {
    HRESULT _hr = put_AnimateAction(AnimateAction);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(488)
inline _bstr_t PPT::ActionSetting::GetRun ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Run(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(489)
inline void PPT::ActionSetting::PutRun ( _bstr_t Run ) {
    HRESULT _hr = put_Run(Run);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(490)
inline _bstr_t PPT::ActionSetting::GetSlideShowName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SlideShowName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(491)
inline void PPT::ActionSetting::PutSlideShowName ( _bstr_t SlideShowName ) {
    HRESULT _hr = put_SlideShowName(SlideShowName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(492)
inline PPT::HyperlinkPtr PPT::ActionSetting::GetHyperlink ( ) {
    struct Hyperlink * _result = 0;
    HRESULT _hr = get_Hyperlink(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return HyperlinkPtr(_result, false);
}

#pragma implementation_key(493)
inline PPT::SoundEffectPtr PPT::ActionSetting::GetSoundEffect ( ) {
    struct SoundEffect * _result = 0;
    HRESULT _hr = get_SoundEffect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SoundEffectPtr(_result, false);
}

#pragma implementation_key(494)
inline enum Office::MsoTriState PPT::ActionSetting::GetShowAndReturn ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_ShowAndReturn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(495)
inline void PPT::ActionSetting::PutShowAndReturn ( enum Office::MsoTriState ShowAndReturn ) {
    HRESULT _hr = put_ShowAndReturn(ShowAndReturn);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ActionSettings wrapper method implementations
//

#pragma implementation_key(496)
inline PPT::_ApplicationPtr PPT::ActionSettings::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(497)
inline IDispatchPtr PPT::ActionSettings::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(498)
inline PPT::ActionSettingPtr PPT::ActionSettings::Item ( enum PpMouseActivation Index ) {
    struct ActionSetting * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ActionSettingPtr(_result, false);
}

//
// interface PlaySettings wrapper method implementations
//

#pragma implementation_key(499)
inline PPT::_ApplicationPtr PPT::PlaySettings::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(500)
inline IDispatchPtr PPT::PlaySettings::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(501)
inline _bstr_t PPT::PlaySettings::GetActionVerb ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ActionVerb(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(502)
inline void PPT::PlaySettings::PutActionVerb ( _bstr_t ActionVerb ) {
    HRESULT _hr = put_ActionVerb(ActionVerb);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(503)
inline enum Office::MsoTriState PPT::PlaySettings::GetHideWhileNotPlaying ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_HideWhileNotPlaying(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(504)
inline void PPT::PlaySettings::PutHideWhileNotPlaying ( enum Office::MsoTriState HideWhileNotPlaying ) {
    HRESULT _hr = put_HideWhileNotPlaying(HideWhileNotPlaying);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(505)
inline enum Office::MsoTriState PPT::PlaySettings::GetLoopUntilStopped ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_LoopUntilStopped(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(506)
inline void PPT::PlaySettings::PutLoopUntilStopped ( enum Office::MsoTriState LoopUntilStopped ) {
    HRESULT _hr = put_LoopUntilStopped(LoopUntilStopped);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(507)
inline enum Office::MsoTriState PPT::PlaySettings::GetPlayOnEntry ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_PlayOnEntry(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(508)
inline void PPT::PlaySettings::PutPlayOnEntry ( enum Office::MsoTriState PlayOnEntry ) {
    HRESULT _hr = put_PlayOnEntry(PlayOnEntry);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(509)
inline enum Office::MsoTriState PPT::PlaySettings::GetRewindMovie ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_RewindMovie(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(510)
inline void PPT::PlaySettings::PutRewindMovie ( enum Office::MsoTriState RewindMovie ) {
    HRESULT _hr = put_RewindMovie(RewindMovie);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(511)
inline enum Office::MsoTriState PPT::PlaySettings::GetPauseAnimation ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_PauseAnimation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(512)
inline void PPT::PlaySettings::PutPauseAnimation ( enum Office::MsoTriState PauseAnimation ) {
    HRESULT _hr = put_PauseAnimation(PauseAnimation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(513)
inline int PPT::PlaySettings::GetStopAfterSlides ( ) {
    int _result = 0;
    HRESULT _hr = get_StopAfterSlides(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(514)
inline void PPT::PlaySettings::PutStopAfterSlides ( int StopAfterSlides ) {
    HRESULT _hr = put_StopAfterSlides(StopAfterSlides);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface AnimationSettings wrapper method implementations
//

#pragma implementation_key(515)
inline PPT::_ApplicationPtr PPT::AnimationSettings::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(516)
inline IDispatchPtr PPT::AnimationSettings::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(517)
inline PPT::ColorFormatPtr PPT::AnimationSettings::GetDimColor ( ) {
    struct ColorFormat * _result = 0;
    HRESULT _hr = get_DimColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColorFormatPtr(_result, false);
}

#pragma implementation_key(518)
inline PPT::SoundEffectPtr PPT::AnimationSettings::GetSoundEffect ( ) {
    struct SoundEffect * _result = 0;
    HRESULT _hr = get_SoundEffect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SoundEffectPtr(_result, false);
}

#pragma implementation_key(519)
inline enum PPT::PpEntryEffect PPT::AnimationSettings::GetEntryEffect ( ) {
    enum PpEntryEffect _result;
    HRESULT _hr = get_EntryEffect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(520)
inline void PPT::AnimationSettings::PutEntryEffect ( enum PpEntryEffect EntryEffect ) {
    HRESULT _hr = put_EntryEffect(EntryEffect);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(521)
inline enum PPT::PpAfterEffect PPT::AnimationSettings::GetAfterEffect ( ) {
    enum PpAfterEffect _result;
    HRESULT _hr = get_AfterEffect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(522)
inline void PPT::AnimationSettings::PutAfterEffect ( enum PpAfterEffect AfterEffect ) {
    HRESULT _hr = put_AfterEffect(AfterEffect);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(523)
inline int PPT::AnimationSettings::GetAnimationOrder ( ) {
    int _result = 0;
    HRESULT _hr = get_AnimationOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(524)
inline void PPT::AnimationSettings::PutAnimationOrder ( int AnimationOrder ) {
    HRESULT _hr = put_AnimationOrder(AnimationOrder);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(525)
inline enum PPT::PpAdvanceMode PPT::AnimationSettings::GetAdvanceMode ( ) {
    enum PpAdvanceMode _result;
    HRESULT _hr = get_AdvanceMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(526)
inline void PPT::AnimationSettings::PutAdvanceMode ( enum PpAdvanceMode AdvanceMode ) {
    HRESULT _hr = put_AdvanceMode(AdvanceMode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(527)
inline float PPT::AnimationSettings::GetAdvanceTime ( ) {
    float _result = 0;
    HRESULT _hr = get_AdvanceTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(528)
inline void PPT::AnimationSettings::PutAdvanceTime ( float AdvanceTime ) {
    HRESULT _hr = put_AdvanceTime(AdvanceTime);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(529)
inline PPT::PlaySettingsPtr PPT::AnimationSettings::GetPlaySettings ( ) {
    struct PlaySettings * _result = 0;
    HRESULT _hr = get_PlaySettings(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PlaySettingsPtr(_result, false);
}

#pragma implementation_key(530)
inline enum PPT::PpTextLevelEffect PPT::AnimationSettings::GetTextLevelEffect ( ) {
    enum PpTextLevelEffect _result;
    HRESULT _hr = get_TextLevelEffect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(531)
inline void PPT::AnimationSettings::PutTextLevelEffect ( enum PpTextLevelEffect TextLevelEffect ) {
    HRESULT _hr = put_TextLevelEffect(TextLevelEffect);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(532)
inline enum PPT::PpTextUnitEffect PPT::AnimationSettings::GetTextUnitEffect ( ) {
    enum PpTextUnitEffect _result;
    HRESULT _hr = get_TextUnitEffect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(533)
inline void PPT::AnimationSettings::PutTextUnitEffect ( enum PpTextUnitEffect TextUnitEffect ) {
    HRESULT _hr = put_TextUnitEffect(TextUnitEffect);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(534)
inline enum Office::MsoTriState PPT::AnimationSettings::GetAnimate ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Animate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(535)
inline void PPT::AnimationSettings::PutAnimate ( enum Office::MsoTriState Animate ) {
    HRESULT _hr = put_Animate(Animate);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(536)
inline enum Office::MsoTriState PPT::AnimationSettings::GetAnimateBackground ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_AnimateBackground(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(537)
inline void PPT::AnimationSettings::PutAnimateBackground ( enum Office::MsoTriState AnimateBackground ) {
    HRESULT _hr = put_AnimateBackground(AnimateBackground);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(538)
inline enum Office::MsoTriState PPT::AnimationSettings::GetAnimateTextInReverse ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_AnimateTextInReverse(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(539)
inline void PPT::AnimationSettings::PutAnimateTextInReverse ( enum Office::MsoTriState AnimateTextInReverse ) {
    HRESULT _hr = put_AnimateTextInReverse(AnimateTextInReverse);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(540)
inline enum PPT::PpChartUnitEffect PPT::AnimationSettings::GetChartUnitEffect ( ) {
    enum PpChartUnitEffect _result;
    HRESULT _hr = get_ChartUnitEffect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(541)
inline void PPT::AnimationSettings::PutChartUnitEffect ( enum PpChartUnitEffect ChartUnitEffect ) {
    HRESULT _hr = put_ChartUnitEffect(ChartUnitEffect);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface RulerLevel wrapper method implementations
//

#pragma implementation_key(542)
inline PPT::_ApplicationPtr PPT::RulerLevel::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(543)
inline IDispatchPtr PPT::RulerLevel::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(544)
inline float PPT::RulerLevel::GetFirstMargin ( ) {
    float _result = 0;
    HRESULT _hr = get_FirstMargin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(545)
inline void PPT::RulerLevel::PutFirstMargin ( float FirstMargin ) {
    HRESULT _hr = put_FirstMargin(FirstMargin);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(546)
inline float PPT::RulerLevel::GetLeftMargin ( ) {
    float _result = 0;
    HRESULT _hr = get_LeftMargin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(547)
inline void PPT::RulerLevel::PutLeftMargin ( float LeftMargin ) {
    HRESULT _hr = put_LeftMargin(LeftMargin);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface RulerLevels wrapper method implementations
//

#pragma implementation_key(548)
inline PPT::_ApplicationPtr PPT::RulerLevels::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(549)
inline IDispatchPtr PPT::RulerLevels::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(550)
inline PPT::RulerLevelPtr PPT::RulerLevels::Item ( int Index ) {
    struct RulerLevel * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RulerLevelPtr(_result, false);
}

//
// interface TabStop wrapper method implementations
//

#pragma implementation_key(551)
inline PPT::_ApplicationPtr PPT::TabStop::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(552)
inline IDispatchPtr PPT::TabStop::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(553)
inline enum PPT::PpTabStopType PPT::TabStop::GetType ( ) {
    enum PpTabStopType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(554)
inline void PPT::TabStop::PutType ( enum PpTabStopType Type ) {
    HRESULT _hr = put_Type(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(555)
inline float PPT::TabStop::GetPosition ( ) {
    float _result = 0;
    HRESULT _hr = get_Position(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(556)
inline void PPT::TabStop::PutPosition ( float Position ) {
    HRESULT _hr = put_Position(Position);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(557)
inline HRESULT PPT::TabStop::Clear ( ) {
    HRESULT _hr = raw_Clear();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface TabStops wrapper method implementations
//

#pragma implementation_key(558)
inline PPT::_ApplicationPtr PPT::TabStops::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(559)
inline IDispatchPtr PPT::TabStops::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(560)
inline PPT::TabStopPtr PPT::TabStops::Item ( int Index ) {
    struct TabStop * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TabStopPtr(_result, false);
}

#pragma implementation_key(561)
inline float PPT::TabStops::GetDefaultSpacing ( ) {
    float _result = 0;
    HRESULT _hr = get_DefaultSpacing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(562)
inline void PPT::TabStops::PutDefaultSpacing ( float DefaultSpacing ) {
    HRESULT _hr = put_DefaultSpacing(DefaultSpacing);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(563)
inline PPT::TabStopPtr PPT::TabStops::Add ( enum PpTabStopType Type, float Position ) {
    struct TabStop * _result = 0;
    HRESULT _hr = raw_Add(Type, Position, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TabStopPtr(_result, false);
}

//
// interface Ruler wrapper method implementations
//

#pragma implementation_key(564)
inline PPT::_ApplicationPtr PPT::Ruler::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(565)
inline IDispatchPtr PPT::Ruler::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(566)
inline PPT::TabStopsPtr PPT::Ruler::GetTabStops ( ) {
    struct TabStops * _result = 0;
    HRESULT _hr = get_TabStops(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TabStopsPtr(_result, false);
}

#pragma implementation_key(567)
inline PPT::RulerLevelsPtr PPT::Ruler::GetLevels ( ) {
    struct RulerLevels * _result = 0;
    HRESULT _hr = get_Levels(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RulerLevelsPtr(_result, false);
}

//
// interface Font wrapper method implementations
//

#pragma implementation_key(568)
inline PPT::_ApplicationPtr PPT::Font::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(569)
inline IDispatchPtr PPT::Font::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(570)
inline PPT::ColorFormatPtr PPT::Font::GetColor ( ) {
    struct ColorFormat * _result = 0;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColorFormatPtr(_result, false);
}

#pragma implementation_key(571)
inline enum Office::MsoTriState PPT::Font::GetBold ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Bold(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(572)
inline void PPT::Font::PutBold ( enum Office::MsoTriState Bold ) {
    HRESULT _hr = put_Bold(Bold);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(573)
inline enum Office::MsoTriState PPT::Font::GetItalic ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Italic(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(574)
inline void PPT::Font::PutItalic ( enum Office::MsoTriState Italic ) {
    HRESULT _hr = put_Italic(Italic);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(575)
inline enum Office::MsoTriState PPT::Font::GetShadow ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Shadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(576)
inline void PPT::Font::PutShadow ( enum Office::MsoTriState Shadow ) {
    HRESULT _hr = put_Shadow(Shadow);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(577)
inline enum Office::MsoTriState PPT::Font::GetEmboss ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Emboss(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(578)
inline void PPT::Font::PutEmboss ( enum Office::MsoTriState Emboss ) {
    HRESULT _hr = put_Emboss(Emboss);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(579)
inline enum Office::MsoTriState PPT::Font::GetUnderline ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Underline(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(580)
inline void PPT::Font::PutUnderline ( enum Office::MsoTriState Underline ) {
    HRESULT _hr = put_Underline(Underline);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(581)
inline enum Office::MsoTriState PPT::Font::GetSubscript ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Subscript(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(582)
inline void PPT::Font::PutSubscript ( enum Office::MsoTriState Subscript ) {
    HRESULT _hr = put_Subscript(Subscript);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(583)
inline enum Office::MsoTriState PPT::Font::GetSuperscript ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Superscript(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(584)
inline void PPT::Font::PutSuperscript ( enum Office::MsoTriState Superscript ) {
    HRESULT _hr = put_Superscript(Superscript);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(585)
inline float PPT::Font::GetBaselineOffset ( ) {
    float _result = 0;
    HRESULT _hr = get_BaselineOffset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(586)
inline void PPT::Font::PutBaselineOffset ( float BaselineOffset ) {
    HRESULT _hr = put_BaselineOffset(BaselineOffset);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(587)
inline enum Office::MsoTriState PPT::Font::GetEmbedded ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Embedded(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(588)
inline enum Office::MsoTriState PPT::Font::GetEmbeddable ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Embeddable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(589)
inline float PPT::Font::GetSize ( ) {
    float _result = 0;
    HRESULT _hr = get_Size(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(590)
inline void PPT::Font::PutSize ( float Size ) {
    HRESULT _hr = put_Size(Size);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(591)
inline _bstr_t PPT::Font::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(592)
inline void PPT::Font::PutName ( _bstr_t Name ) {
    HRESULT _hr = put_Name(Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(593)
inline _bstr_t PPT::Font::GetNameFarEast ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_NameFarEast(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(594)
inline void PPT::Font::PutNameFarEast ( _bstr_t NameFarEast ) {
    HRESULT _hr = put_NameFarEast(NameFarEast);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(595)
inline _bstr_t PPT::Font::GetNameAscii ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_NameAscii(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(596)
inline void PPT::Font::PutNameAscii ( _bstr_t NameAscii ) {
    HRESULT _hr = put_NameAscii(NameAscii);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(597)
inline enum Office::MsoTriState PPT::Font::GetAutoRotateNumbers ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_AutoRotateNumbers(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(598)
inline void PPT::Font::PutAutoRotateNumbers ( enum Office::MsoTriState AutoRotateNumbers ) {
    HRESULT _hr = put_AutoRotateNumbers(AutoRotateNumbers);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(599)
inline _bstr_t PPT::Font::GetNameOther ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_NameOther(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(600)
inline void PPT::Font::PutNameOther ( _bstr_t NameOther ) {
    HRESULT _hr = put_NameOther(NameOther);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(601)
inline _bstr_t PPT::Font::GetNameComplexScript ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_NameComplexScript(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(602)
inline void PPT::Font::PutNameComplexScript ( _bstr_t NameComplexScript ) {
    HRESULT _hr = put_NameComplexScript(NameComplexScript);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface Fonts wrapper method implementations
//

#pragma implementation_key(603)
inline PPT::_ApplicationPtr PPT::Fonts::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(604)
inline IDispatchPtr PPT::Fonts::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(605)
inline PPT::FontPtr PPT::Fonts::Item ( const _variant_t & Index ) {
    struct Font * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FontPtr(_result, false);
}

#pragma implementation_key(606)
inline HRESULT PPT::Fonts::Replace ( _bstr_t Original, _bstr_t Replacement ) {
    HRESULT _hr = raw_Replace(Original, Replacement);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface HeaderFooter wrapper method implementations
//

#pragma implementation_key(607)
inline PPT::_ApplicationPtr PPT::HeaderFooter::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(608)
inline IDispatchPtr PPT::HeaderFooter::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(609)
inline enum Office::MsoTriState PPT::HeaderFooter::GetVisible ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(610)
inline void PPT::HeaderFooter::PutVisible ( enum Office::MsoTriState Visible ) {
    HRESULT _hr = put_Visible(Visible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(611)
inline _bstr_t PPT::HeaderFooter::GetText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(612)
inline void PPT::HeaderFooter::PutText ( _bstr_t Text ) {
    HRESULT _hr = put_Text(Text);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(613)
inline enum Office::MsoTriState PPT::HeaderFooter::GetUseFormat ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_UseFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(614)
inline void PPT::HeaderFooter::PutUseFormat ( enum Office::MsoTriState UseFormat ) {
    HRESULT _hr = put_UseFormat(UseFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(615)
inline enum PPT::PpDateTimeFormat PPT::HeaderFooter::GetFormat ( ) {
    enum PpDateTimeFormat _result;
    HRESULT _hr = get_Format(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(616)
inline void PPT::HeaderFooter::PutFormat ( enum PpDateTimeFormat Format ) {
    HRESULT _hr = put_Format(Format);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface HeadersFooters wrapper method implementations
//

#pragma implementation_key(617)
inline PPT::_ApplicationPtr PPT::HeadersFooters::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(618)
inline IDispatchPtr PPT::HeadersFooters::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(619)
inline PPT::HeaderFooterPtr PPT::HeadersFooters::GetDateAndTime ( ) {
    struct HeaderFooter * _result = 0;
    HRESULT _hr = get_DateAndTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return HeaderFooterPtr(_result, false);
}

#pragma implementation_key(620)
inline PPT::HeaderFooterPtr PPT::HeadersFooters::GetSlideNumber ( ) {
    struct HeaderFooter * _result = 0;
    HRESULT _hr = get_SlideNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return HeaderFooterPtr(_result, false);
}

#pragma implementation_key(621)
inline PPT::HeaderFooterPtr PPT::HeadersFooters::GetHeader ( ) {
    struct HeaderFooter * _result = 0;
    HRESULT _hr = get_Header(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return HeaderFooterPtr(_result, false);
}

#pragma implementation_key(622)
inline PPT::HeaderFooterPtr PPT::HeadersFooters::GetFooter ( ) {
    struct HeaderFooter * _result = 0;
    HRESULT _hr = get_Footer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return HeaderFooterPtr(_result, false);
}

#pragma implementation_key(623)
inline enum Office::MsoTriState PPT::HeadersFooters::GetDisplayOnTitleSlide ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_DisplayOnTitleSlide(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(624)
inline void PPT::HeadersFooters::PutDisplayOnTitleSlide ( enum Office::MsoTriState DisplayOnTitleSlide ) {
    HRESULT _hr = put_DisplayOnTitleSlide(DisplayOnTitleSlide);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(625)
inline HRESULT PPT::HeadersFooters::Clear ( ) {
    HRESULT _hr = raw_Clear();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface Tags wrapper method implementations
//

#pragma implementation_key(626)
inline PPT::_ApplicationPtr PPT::Tags::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(627)
inline IDispatchPtr PPT::Tags::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(628)
inline _bstr_t PPT::Tags::Item ( _bstr_t Name ) {
    BSTR _result = 0;
    HRESULT _hr = raw_Item(Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(629)
inline HRESULT PPT::Tags::Add ( _bstr_t Name, _bstr_t Value ) {
    HRESULT _hr = raw_Add(Name, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(630)
inline HRESULT PPT::Tags::Delete ( _bstr_t Name ) {
    HRESULT _hr = raw_Delete(Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(631)
inline HRESULT PPT::Tags::AddBinary ( _bstr_t Name, _bstr_t FilePath ) {
    HRESULT _hr = raw_AddBinary(Name, FilePath);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(632)
inline long PPT::Tags::BinaryValue ( _bstr_t Name ) {
    long _result = 0;
    HRESULT _hr = raw_BinaryValue(Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(633)
inline _bstr_t PPT::Tags::Name ( int Index ) {
    BSTR _result = 0;
    HRESULT _hr = raw_Name(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(634)
inline _bstr_t PPT::Tags::Value ( int Index ) {
    BSTR _result = 0;
    HRESULT _hr = raw_Value(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface MouseTracker wrapper method implementations
//

#pragma implementation_key(635)
inline HRESULT PPT::MouseTracker::OnTrack ( float X, float Y ) {
    HRESULT _hr = raw_OnTrack(X, Y);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(636)
inline HRESULT PPT::MouseTracker::EndTrack ( float X, float Y ) {
    HRESULT _hr = raw_EndTrack(X, Y);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface MouseDownHandler wrapper method implementations
//

#pragma implementation_key(637)
inline HRESULT PPT::MouseDownHandler::OnMouseDown ( IUnknown * activeWin ) {
    HRESULT _hr = raw_OnMouseDown(activeWin);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface OCXExtender wrapper method implementations
//

#pragma implementation_key(638)
inline VARIANT_BOOL PPT::OCXExtender::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(639)
inline void PPT::OCXExtender::PutVisible ( VARIANT_BOOL Visible ) {
    HRESULT _hr = put_Visible(Visible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(640)
inline float PPT::OCXExtender::GetLeft ( ) {
    float _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(641)
inline void PPT::OCXExtender::PutLeft ( float Left ) {
    HRESULT _hr = put_Left(Left);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(642)
inline float PPT::OCXExtender::GetTop ( ) {
    float _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(643)
inline void PPT::OCXExtender::PutTop ( float Top ) {
    HRESULT _hr = put_Top(Top);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(644)
inline float PPT::OCXExtender::GetHeight ( ) {
    float _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(645)
inline void PPT::OCXExtender::PutHeight ( float Height ) {
    HRESULT _hr = put_Height(Height);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(646)
inline float PPT::OCXExtender::GetWidth ( ) {
    float _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(647)
inline void PPT::OCXExtender::PutWidth ( float Width ) {
    HRESULT _hr = put_Width(Width);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(648)
inline int PPT::OCXExtender::GetZOrderPosition ( ) {
    int _result = 0;
    HRESULT _hr = get_ZOrderPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(649)
inline _bstr_t PPT::OCXExtender::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(650)
inline void PPT::OCXExtender::PutName ( _bstr_t Name ) {
    HRESULT _hr = put_Name(Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(651)
inline _bstr_t PPT::OCXExtender::GetAltHTML ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AltHTML(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(652)
inline void PPT::OCXExtender::PutAltHTML ( _bstr_t AltHTML ) {
    HRESULT _hr = put_AltHTML(AltHTML);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface OCXExtenderEvents wrapper method implementations
//

#pragma implementation_key(653)
inline HRESULT PPT::OCXExtenderEvents::GotFocus ( ) {
    HRESULT _hr = raw_GotFocus();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(654)
inline HRESULT PPT::OCXExtenderEvents::LostFocus ( ) {
    HRESULT _hr = raw_LostFocus();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface BulletFormat wrapper method implementations
//

#pragma implementation_key(655)
inline PPT::_ApplicationPtr PPT::BulletFormat::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(656)
inline IDispatchPtr PPT::BulletFormat::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(657)
inline enum Office::MsoTriState PPT::BulletFormat::GetVisible ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(658)
inline void PPT::BulletFormat::PutVisible ( enum Office::MsoTriState Visible ) {
    HRESULT _hr = put_Visible(Visible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(659)
inline int PPT::BulletFormat::GetCharacter ( ) {
    int _result = 0;
    HRESULT _hr = get_Character(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(660)
inline void PPT::BulletFormat::PutCharacter ( int Character ) {
    HRESULT _hr = put_Character(Character);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(661)
inline float PPT::BulletFormat::GetRelativeSize ( ) {
    float _result = 0;
    HRESULT _hr = get_RelativeSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(662)
inline void PPT::BulletFormat::PutRelativeSize ( float RelativeSize ) {
    HRESULT _hr = put_RelativeSize(RelativeSize);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(663)
inline enum Office::MsoTriState PPT::BulletFormat::GetUseTextColor ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_UseTextColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(664)
inline void PPT::BulletFormat::PutUseTextColor ( enum Office::MsoTriState UseTextColor ) {
    HRESULT _hr = put_UseTextColor(UseTextColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(665)
inline enum Office::MsoTriState PPT::BulletFormat::GetUseTextFont ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_UseTextFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(666)
inline void PPT::BulletFormat::PutUseTextFont ( enum Office::MsoTriState UseTextFont ) {
    HRESULT _hr = put_UseTextFont(UseTextFont);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(667)
inline PPT::FontPtr PPT::BulletFormat::GetFont ( ) {
    struct Font * _result = 0;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FontPtr(_result, false);
}

#pragma implementation_key(668)
inline enum PPT::PpBulletType PPT::BulletFormat::GetType ( ) {
    enum PpBulletType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(669)
inline void PPT::BulletFormat::PutType ( enum PpBulletType Type ) {
    HRESULT _hr = put_Type(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(670)
inline enum PPT::PpNumberedBulletStyle PPT::BulletFormat::GetStyle ( ) {
    enum PpNumberedBulletStyle _result;
    HRESULT _hr = get_Style(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(671)
inline void PPT::BulletFormat::PutStyle ( enum PpNumberedBulletStyle Style ) {
    HRESULT _hr = put_Style(Style);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(672)
inline int PPT::BulletFormat::GetStartValue ( ) {
    int _result = 0;
    HRESULT _hr = get_StartValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(673)
inline void PPT::BulletFormat::PutStartValue ( int StartValue ) {
    HRESULT _hr = put_StartValue(StartValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(674)
inline HRESULT PPT::BulletFormat::Picture ( _bstr_t Picture ) {
    HRESULT _hr = raw_Picture(Picture);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(675)
inline int PPT::BulletFormat::GetNumber ( ) {
    int _result = 0;
    HRESULT _hr = get_Number(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ParagraphFormat wrapper method implementations
//

#pragma implementation_key(676)
inline PPT::_ApplicationPtr PPT::ParagraphFormat::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(677)
inline IDispatchPtr PPT::ParagraphFormat::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(678)
inline enum PPT::PpParagraphAlignment PPT::ParagraphFormat::GetAlignment ( ) {
    enum PpParagraphAlignment _result;
    HRESULT _hr = get_Alignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(679)
inline void PPT::ParagraphFormat::PutAlignment ( enum PpParagraphAlignment Alignment ) {
    HRESULT _hr = put_Alignment(Alignment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(680)
inline PPT::BulletFormatPtr PPT::ParagraphFormat::GetBullet ( ) {
    struct BulletFormat * _result = 0;
    HRESULT _hr = get_Bullet(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BulletFormatPtr(_result, false);
}

#pragma implementation_key(681)
inline enum Office::MsoTriState PPT::ParagraphFormat::GetLineRuleBefore ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_LineRuleBefore(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(682)
inline void PPT::ParagraphFormat::PutLineRuleBefore ( enum Office::MsoTriState LineRuleBefore ) {
    HRESULT _hr = put_LineRuleBefore(LineRuleBefore);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(683)
inline enum Office::MsoTriState PPT::ParagraphFormat::GetLineRuleAfter ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_LineRuleAfter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(684)
inline void PPT::ParagraphFormat::PutLineRuleAfter ( enum Office::MsoTriState LineRuleAfter ) {
    HRESULT _hr = put_LineRuleAfter(LineRuleAfter);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(685)
inline enum Office::MsoTriState PPT::ParagraphFormat::GetLineRuleWithin ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_LineRuleWithin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(686)
inline void PPT::ParagraphFormat::PutLineRuleWithin ( enum Office::MsoTriState LineRuleWithin ) {
    HRESULT _hr = put_LineRuleWithin(LineRuleWithin);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(687)
inline float PPT::ParagraphFormat::GetSpaceBefore ( ) {
    float _result = 0;
    HRESULT _hr = get_SpaceBefore(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(688)
inline void PPT::ParagraphFormat::PutSpaceBefore ( float SpaceBefore ) {
    HRESULT _hr = put_SpaceBefore(SpaceBefore);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(689)
inline float PPT::ParagraphFormat::GetSpaceAfter ( ) {
    float _result = 0;
    HRESULT _hr = get_SpaceAfter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(690)
inline void PPT::ParagraphFormat::PutSpaceAfter ( float SpaceAfter ) {
    HRESULT _hr = put_SpaceAfter(SpaceAfter);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(691)
inline float PPT::ParagraphFormat::GetSpaceWithin ( ) {
    float _result = 0;
    HRESULT _hr = get_SpaceWithin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(692)
inline void PPT::ParagraphFormat::PutSpaceWithin ( float SpaceWithin ) {
    HRESULT _hr = put_SpaceWithin(SpaceWithin);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(693)
inline enum PPT::PpBaselineAlignment PPT::ParagraphFormat::GetBaseLineAlignment ( ) {
    enum PpBaselineAlignment _result;
    HRESULT _hr = get_BaseLineAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(694)
inline void PPT::ParagraphFormat::PutBaseLineAlignment ( enum PpBaselineAlignment BaseLineAlignment ) {
    HRESULT _hr = put_BaseLineAlignment(BaseLineAlignment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(695)
inline enum Office::MsoTriState PPT::ParagraphFormat::GetFarEastLineBreakControl ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_FarEastLineBreakControl(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(696)
inline void PPT::ParagraphFormat::PutFarEastLineBreakControl ( enum Office::MsoTriState FarEastLineBreakControl ) {
    HRESULT _hr = put_FarEastLineBreakControl(FarEastLineBreakControl);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(697)
inline enum Office::MsoTriState PPT::ParagraphFormat::GetWordWrap ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_WordWrap(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(698)
inline void PPT::ParagraphFormat::PutWordWrap ( enum Office::MsoTriState WordWrap ) {
    HRESULT _hr = put_WordWrap(WordWrap);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(699)
inline enum Office::MsoTriState PPT::ParagraphFormat::GetHangingPunctuation ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_HangingPunctuation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(700)
inline void PPT::ParagraphFormat::PutHangingPunctuation ( enum Office::MsoTriState HangingPunctuation ) {
    HRESULT _hr = put_HangingPunctuation(HangingPunctuation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(701)
inline enum PPT::PpDirection PPT::ParagraphFormat::GetTextDirection ( ) {
    enum PpDirection _result;
    HRESULT _hr = get_TextDirection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(702)
inline void PPT::ParagraphFormat::PutTextDirection ( enum PpDirection TextDirection ) {
    HRESULT _hr = put_TextDirection(TextDirection);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface TextStyleLevel wrapper method implementations
//

#pragma implementation_key(703)
inline PPT::_ApplicationPtr PPT::TextStyleLevel::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(704)
inline IDispatchPtr PPT::TextStyleLevel::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(705)
inline PPT::ParagraphFormatPtr PPT::TextStyleLevel::GetParagraphFormat ( ) {
    struct ParagraphFormat * _result = 0;
    HRESULT _hr = get_ParagraphFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ParagraphFormatPtr(_result, false);
}

#pragma implementation_key(706)
inline PPT::FontPtr PPT::TextStyleLevel::GetFont ( ) {
    struct Font * _result = 0;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FontPtr(_result, false);
}

//
// interface TextStyleLevels wrapper method implementations
//

#pragma implementation_key(707)
inline PPT::_ApplicationPtr PPT::TextStyleLevels::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(708)
inline IDispatchPtr PPT::TextStyleLevels::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(709)
inline PPT::TextStyleLevelPtr PPT::TextStyleLevels::Item ( int Level ) {
    struct TextStyleLevel * _result = 0;
    HRESULT _hr = raw_Item(Level, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextStyleLevelPtr(_result, false);
}

//
// interface Borders wrapper method implementations
//

#pragma implementation_key(710)
inline PPT::_ApplicationPtr PPT::Borders::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(711)
inline IDispatchPtr PPT::Borders::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(712)
inline PPT::LineFormatPtr PPT::Borders::Item ( enum PpBorderType BorderType ) {
    struct LineFormat * _result = 0;
    HRESULT _hr = raw_Item(BorderType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return LineFormatPtr(_result, false);
}

//
// interface Pane wrapper method implementations
//

#pragma implementation_key(713)
inline IDispatchPtr PPT::Pane::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(714)
inline HRESULT PPT::Pane::Activate ( ) {
    HRESULT _hr = raw_Activate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(715)
inline enum Office::MsoTriState PPT::Pane::GetActive ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Active(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(716)
inline PPT::_ApplicationPtr PPT::Pane::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(717)
inline enum PPT::PpViewType PPT::Pane::GetViewType ( ) {
    enum PpViewType _result;
    HRESULT _hr = get_ViewType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface Panes wrapper method implementations
//

#pragma implementation_key(718)
inline PPT::_ApplicationPtr PPT::Panes::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(719)
inline PPT::PanePtr PPT::Panes::Item ( int Index ) {
    struct Pane * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PanePtr(_result, false);
}

#pragma implementation_key(720)
inline IDispatchPtr PPT::Panes::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

//
// interface DefaultWebOptions wrapper method implementations
//

#pragma implementation_key(721)
inline enum Office::MsoTriState PPT::DefaultWebOptions::GetIncludeNavigation ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_IncludeNavigation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(722)
inline void PPT::DefaultWebOptions::PutIncludeNavigation ( enum Office::MsoTriState IncludeNavigation ) {
    HRESULT _hr = put_IncludeNavigation(IncludeNavigation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(723)
inline enum PPT::PpFrameColors PPT::DefaultWebOptions::GetFrameColors ( ) {
    enum PpFrameColors _result;
    HRESULT _hr = get_FrameColors(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(724)
inline void PPT::DefaultWebOptions::PutFrameColors ( enum PpFrameColors FrameColors ) {
    HRESULT _hr = put_FrameColors(FrameColors);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(725)
inline enum Office::MsoTriState PPT::DefaultWebOptions::GetResizeGraphics ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_ResizeGraphics(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(726)
inline void PPT::DefaultWebOptions::PutResizeGraphics ( enum Office::MsoTriState ResizeGraphics ) {
    HRESULT _hr = put_ResizeGraphics(ResizeGraphics);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(727)
inline enum Office::MsoTriState PPT::DefaultWebOptions::GetShowSlideAnimation ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_ShowSlideAnimation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(728)
inline void PPT::DefaultWebOptions::PutShowSlideAnimation ( enum Office::MsoTriState ShowSlideAnimation ) {
    HRESULT _hr = put_ShowSlideAnimation(ShowSlideAnimation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(729)
inline enum Office::MsoTriState PPT::DefaultWebOptions::GetOrganizeInFolder ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_OrganizeInFolder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(730)
inline void PPT::DefaultWebOptions::PutOrganizeInFolder ( enum Office::MsoTriState OrganizeInFolder ) {
    HRESULT _hr = put_OrganizeInFolder(OrganizeInFolder);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(731)
inline enum Office::MsoTriState PPT::DefaultWebOptions::GetUseLongFileNames ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_UseLongFileNames(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(732)
inline void PPT::DefaultWebOptions::PutUseLongFileNames ( enum Office::MsoTriState UseLongFileNames ) {
    HRESULT _hr = put_UseLongFileNames(UseLongFileNames);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(733)
inline enum Office::MsoTriState PPT::DefaultWebOptions::GetRelyOnVML ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_RelyOnVML(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(734)
inline void PPT::DefaultWebOptions::PutRelyOnVML ( enum Office::MsoTriState RelyOnVML ) {
    HRESULT _hr = put_RelyOnVML(RelyOnVML);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(735)
inline enum Office::MsoTriState PPT::DefaultWebOptions::GetAllowPNG ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_AllowPNG(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(736)
inline void PPT::DefaultWebOptions::PutAllowPNG ( enum Office::MsoTriState AllowPNG ) {
    HRESULT _hr = put_AllowPNG(AllowPNG);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(737)
inline enum Office::MsoScreenSize PPT::DefaultWebOptions::GetScreenSize ( ) {
    enum Office::MsoScreenSize _result;
    HRESULT _hr = get_ScreenSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(738)
inline void PPT::DefaultWebOptions::PutScreenSize ( enum Office::MsoScreenSize ScreenSize ) {
    HRESULT _hr = put_ScreenSize(ScreenSize);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(739)
inline enum Office::MsoEncoding PPT::DefaultWebOptions::GetEncoding ( ) {
    enum Office::MsoEncoding _result;
    HRESULT _hr = get_Encoding(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(740)
inline void PPT::DefaultWebOptions::PutEncoding ( enum Office::MsoEncoding Encoding ) {
    HRESULT _hr = put_Encoding(Encoding);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(741)
inline enum Office::MsoTriState PPT::DefaultWebOptions::GetUpdateLinksOnSave ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_UpdateLinksOnSave(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(742)
inline void PPT::DefaultWebOptions::PutUpdateLinksOnSave ( enum Office::MsoTriState UpdateLinksOnSave ) {
    HRESULT _hr = put_UpdateLinksOnSave(UpdateLinksOnSave);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(743)
inline enum Office::MsoTriState PPT::DefaultWebOptions::GetCheckIfOfficeIsHTMLEditor ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_CheckIfOfficeIsHTMLEditor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(744)
inline void PPT::DefaultWebOptions::PutCheckIfOfficeIsHTMLEditor ( enum Office::MsoTriState CheckIfOfficeIsHTMLEditor ) {
    HRESULT _hr = put_CheckIfOfficeIsHTMLEditor(CheckIfOfficeIsHTMLEditor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(745)
inline enum Office::MsoTriState PPT::DefaultWebOptions::GetAlwaysSaveInDefaultEncoding ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_AlwaysSaveInDefaultEncoding(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(746)
inline void PPT::DefaultWebOptions::PutAlwaysSaveInDefaultEncoding ( enum Office::MsoTriState AlwaysSaveInDefaultEncoding ) {
    HRESULT _hr = put_AlwaysSaveInDefaultEncoding(AlwaysSaveInDefaultEncoding);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(747)
inline Office::WebPageFontsPtr PPT::DefaultWebOptions::GetFonts ( ) {
    struct Office::WebPageFonts * _result = 0;
    HRESULT _hr = get_Fonts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::WebPageFontsPtr(_result, false);
}

#pragma implementation_key(748)
inline _bstr_t PPT::DefaultWebOptions::GetFolderSuffix ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FolderSuffix(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(749)
inline enum Office::MsoTargetBrowser PPT::DefaultWebOptions::GetTargetBrowser ( ) {
    enum Office::MsoTargetBrowser _result;
    HRESULT _hr = get_TargetBrowser(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(750)
inline void PPT::DefaultWebOptions::PutTargetBrowser ( enum Office::MsoTargetBrowser TargetBrowser ) {
    HRESULT _hr = put_TargetBrowser(TargetBrowser);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(751)
inline enum Office::MsoTriState PPT::DefaultWebOptions::GetSaveNewWebPagesAsWebArchives ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_SaveNewWebPagesAsWebArchives(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(752)
inline void PPT::DefaultWebOptions::PutSaveNewWebPagesAsWebArchives ( enum Office::MsoTriState SaveNewWebPagesAsWebArchives ) {
    HRESULT _hr = put_SaveNewWebPagesAsWebArchives(SaveNewWebPagesAsWebArchives);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(753)
inline enum PPT::PpHTMLVersion PPT::DefaultWebOptions::GetHTMLVersion ( ) {
    enum PpHTMLVersion _result;
    HRESULT _hr = get_HTMLVersion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(754)
inline void PPT::DefaultWebOptions::PutHTMLVersion ( enum PpHTMLVersion HTMLVersion ) {
    HRESULT _hr = put_HTMLVersion(HTMLVersion);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface WebOptions wrapper method implementations
//

#pragma implementation_key(755)
inline enum Office::MsoTriState PPT::WebOptions::GetIncludeNavigation ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_IncludeNavigation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(756)
inline void PPT::WebOptions::PutIncludeNavigation ( enum Office::MsoTriState IncludeNavigation ) {
    HRESULT _hr = put_IncludeNavigation(IncludeNavigation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(757)
inline enum PPT::PpFrameColors PPT::WebOptions::GetFrameColors ( ) {
    enum PpFrameColors _result;
    HRESULT _hr = get_FrameColors(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(758)
inline void PPT::WebOptions::PutFrameColors ( enum PpFrameColors FrameColors ) {
    HRESULT _hr = put_FrameColors(FrameColors);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(759)
inline enum Office::MsoTriState PPT::WebOptions::GetResizeGraphics ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_ResizeGraphics(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(760)
inline void PPT::WebOptions::PutResizeGraphics ( enum Office::MsoTriState ResizeGraphics ) {
    HRESULT _hr = put_ResizeGraphics(ResizeGraphics);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(761)
inline enum Office::MsoTriState PPT::WebOptions::GetShowSlideAnimation ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_ShowSlideAnimation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(762)
inline void PPT::WebOptions::PutShowSlideAnimation ( enum Office::MsoTriState ShowSlideAnimation ) {
    HRESULT _hr = put_ShowSlideAnimation(ShowSlideAnimation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(763)
inline enum Office::MsoTriState PPT::WebOptions::GetOrganizeInFolder ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_OrganizeInFolder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(764)
inline void PPT::WebOptions::PutOrganizeInFolder ( enum Office::MsoTriState OrganizeInFolder ) {
    HRESULT _hr = put_OrganizeInFolder(OrganizeInFolder);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(765)
inline enum Office::MsoTriState PPT::WebOptions::GetUseLongFileNames ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_UseLongFileNames(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(766)
inline void PPT::WebOptions::PutUseLongFileNames ( enum Office::MsoTriState UseLongFileNames ) {
    HRESULT _hr = put_UseLongFileNames(UseLongFileNames);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(767)
inline enum Office::MsoTriState PPT::WebOptions::GetRelyOnVML ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_RelyOnVML(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(768)
inline void PPT::WebOptions::PutRelyOnVML ( enum Office::MsoTriState RelyOnVML ) {
    HRESULT _hr = put_RelyOnVML(RelyOnVML);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(769)
inline enum Office::MsoTriState PPT::WebOptions::GetAllowPNG ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_AllowPNG(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(770)
inline void PPT::WebOptions::PutAllowPNG ( enum Office::MsoTriState AllowPNG ) {
    HRESULT _hr = put_AllowPNG(AllowPNG);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(771)
inline enum Office::MsoScreenSize PPT::WebOptions::GetScreenSize ( ) {
    enum Office::MsoScreenSize _result;
    HRESULT _hr = get_ScreenSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(772)
inline void PPT::WebOptions::PutScreenSize ( enum Office::MsoScreenSize ScreenSize ) {
    HRESULT _hr = put_ScreenSize(ScreenSize);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(773)
inline enum Office::MsoEncoding PPT::WebOptions::GetEncoding ( ) {
    enum Office::MsoEncoding _result;
    HRESULT _hr = get_Encoding(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(774)
inline void PPT::WebOptions::PutEncoding ( enum Office::MsoEncoding Encoding ) {
    HRESULT _hr = put_Encoding(Encoding);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(775)
inline _bstr_t PPT::WebOptions::GetFolderSuffix ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FolderSuffix(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(776)
inline HRESULT PPT::WebOptions::UseDefaultFolderSuffix ( ) {
    HRESULT _hr = raw_UseDefaultFolderSuffix();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(777)
inline enum Office::MsoTargetBrowser PPT::WebOptions::GetTargetBrowser ( ) {
    enum Office::MsoTargetBrowser _result;
    HRESULT _hr = get_TargetBrowser(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(778)
inline void PPT::WebOptions::PutTargetBrowser ( enum Office::MsoTargetBrowser TargetBrowser ) {
    HRESULT _hr = put_TargetBrowser(TargetBrowser);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(779)
inline enum PPT::PpHTMLVersion PPT::WebOptions::GetHTMLVersion ( ) {
    enum PpHTMLVersion _result;
    HRESULT _hr = get_HTMLVersion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(780)
inline void PPT::WebOptions::PutHTMLVersion ( enum PpHTMLVersion HTMLVersion ) {
    HRESULT _hr = put_HTMLVersion(HTMLVersion);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface PublishObject wrapper method implementations
//

#pragma implementation_key(781)
inline PPT::_ApplicationPtr PPT::PublishObject::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(782)
inline IDispatchPtr PPT::PublishObject::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(783)
inline enum PPT::PpHTMLVersion PPT::PublishObject::GetHTMLVersion ( ) {
    enum PpHTMLVersion _result;
    HRESULT _hr = get_HTMLVersion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(784)
inline void PPT::PublishObject::PutHTMLVersion ( enum PpHTMLVersion HTMLVersion ) {
    HRESULT _hr = put_HTMLVersion(HTMLVersion);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(785)
inline enum PPT::PpPublishSourceType PPT::PublishObject::GetSourceType ( ) {
    enum PpPublishSourceType _result;
    HRESULT _hr = get_SourceType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(786)
inline void PPT::PublishObject::PutSourceType ( enum PpPublishSourceType SourceType ) {
    HRESULT _hr = put_SourceType(SourceType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(787)
inline int PPT::PublishObject::GetRangeStart ( ) {
    int _result = 0;
    HRESULT _hr = get_RangeStart(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(788)
inline void PPT::PublishObject::PutRangeStart ( int RangeStart ) {
    HRESULT _hr = put_RangeStart(RangeStart);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(789)
inline int PPT::PublishObject::GetRangeEnd ( ) {
    int _result = 0;
    HRESULT _hr = get_RangeEnd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(790)
inline void PPT::PublishObject::PutRangeEnd ( int RangeEnd ) {
    HRESULT _hr = put_RangeEnd(RangeEnd);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(791)
inline _bstr_t PPT::PublishObject::GetSlideShowName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SlideShowName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(792)
inline void PPT::PublishObject::PutSlideShowName ( _bstr_t SlideShowName ) {
    HRESULT _hr = put_SlideShowName(SlideShowName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(793)
inline enum Office::MsoTriState PPT::PublishObject::GetSpeakerNotes ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_SpeakerNotes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(794)
inline void PPT::PublishObject::PutSpeakerNotes ( enum Office::MsoTriState SpeakerNotes ) {
    HRESULT _hr = put_SpeakerNotes(SpeakerNotes);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(795)
inline _bstr_t PPT::PublishObject::GetFileName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FileName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(796)
inline void PPT::PublishObject::PutFileName ( _bstr_t FileName ) {
    HRESULT _hr = put_FileName(FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(797)
inline HRESULT PPT::PublishObject::Publish ( ) {
    HRESULT _hr = raw_Publish();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface PublishObjects wrapper method implementations
//

#pragma implementation_key(798)
inline PPT::_ApplicationPtr PPT::PublishObjects::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(799)
inline IDispatchPtr PPT::PublishObjects::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(800)
inline PPT::PublishObjectPtr PPT::PublishObjects::Item ( int Index ) {
    struct PublishObject * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PublishObjectPtr(_result, false);
}

//
// interface PPT_TextRange wrapper method implementations
//

#pragma implementation_key(801)
inline PPT::_ApplicationPtr PPT::PPT_TextRange::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(802)
inline IDispatchPtr PPT::PPT_TextRange::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(803)
inline PPT::ActionSettingsPtr PPT::PPT_TextRange::GetActionSettings ( ) {
    struct ActionSettings * _result = 0;
    HRESULT _hr = get_ActionSettings(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ActionSettingsPtr(_result, false);
}

#pragma implementation_key(804)
inline long PPT::PPT_TextRange::GetStart ( ) {
    long _result = 0;
    HRESULT _hr = get_Start(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(805)
inline long PPT::PPT_TextRange::GetLength ( ) {
    long _result = 0;
    HRESULT _hr = get_Length(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(806)
inline float PPT::PPT_TextRange::GetBoundLeft ( ) {
    float _result = 0;
    HRESULT _hr = get_BoundLeft(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(807)
inline float PPT::PPT_TextRange::GetBoundTop ( ) {
    float _result = 0;
    HRESULT _hr = get_BoundTop(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(808)
inline float PPT::PPT_TextRange::GetBoundWidth ( ) {
    float _result = 0;
    HRESULT _hr = get_BoundWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(809)
inline float PPT::PPT_TextRange::GetBoundHeight ( ) {
    float _result = 0;
    HRESULT _hr = get_BoundHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(810)
inline PPT::PPT_TextRangePtr PPT::PPT_TextRange::Paragraphs ( int Start, int Length ) {
    struct PPT_TextRange * _result = 0;
    HRESULT _hr = raw_Paragraphs(Start, Length, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PPT_TextRangePtr(_result, false);
}

#pragma implementation_key(811)
inline PPT::PPT_TextRangePtr PPT::PPT_TextRange::Sentences ( int Start, int Length ) {
    struct PPT_TextRange * _result = 0;
    HRESULT _hr = raw_Sentences(Start, Length, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PPT_TextRangePtr(_result, false);
}

#pragma implementation_key(812)
inline PPT::PPT_TextRangePtr PPT::PPT_TextRange::Words ( int Start, int Length ) {
    struct PPT_TextRange * _result = 0;
    HRESULT _hr = raw_Words(Start, Length, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PPT_TextRangePtr(_result, false);
}

#pragma implementation_key(813)
inline PPT::PPT_TextRangePtr PPT::PPT_TextRange::Characters ( int Start, int Length ) {
    struct PPT_TextRange * _result = 0;
    HRESULT _hr = raw_Characters(Start, Length, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PPT_TextRangePtr(_result, false);
}

#pragma implementation_key(814)
inline PPT::PPT_TextRangePtr PPT::PPT_TextRange::Lines ( int Start, int Length ) {
    struct PPT_TextRange * _result = 0;
    HRESULT _hr = raw_Lines(Start, Length, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PPT_TextRangePtr(_result, false);
}

#pragma implementation_key(815)
inline PPT::PPT_TextRangePtr PPT::PPT_TextRange::Runs ( int Start, int Length ) {
    struct PPT_TextRange * _result = 0;
    HRESULT _hr = raw_Runs(Start, Length, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PPT_TextRangePtr(_result, false);
}

#pragma implementation_key(816)
inline PPT::PPT_TextRangePtr PPT::PPT_TextRange::TrimText ( ) {
    struct PPT_TextRange * _result = 0;
    HRESULT _hr = raw_TrimText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PPT_TextRangePtr(_result, false);
}

#pragma implementation_key(817)
inline _bstr_t PPT::PPT_TextRange::GetText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(818)
inline void PPT::PPT_TextRange::PutText ( _bstr_t Text ) {
    HRESULT _hr = put_Text(Text);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(819)
inline PPT::PPT_TextRangePtr PPT::PPT_TextRange::InsertAfter ( _bstr_t NewText ) {
    struct PPT_TextRange * _result = 0;
    HRESULT _hr = raw_InsertAfter(NewText, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PPT_TextRangePtr(_result, false);
}

#pragma implementation_key(820)
inline PPT::PPT_TextRangePtr PPT::PPT_TextRange::InsertBefore ( _bstr_t NewText ) {
    struct PPT_TextRange * _result = 0;
    HRESULT _hr = raw_InsertBefore(NewText, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PPT_TextRangePtr(_result, false);
}

#pragma implementation_key(821)
inline PPT::PPT_TextRangePtr PPT::PPT_TextRange::InsertDateTime ( enum PpDateTimeFormat DateTimeFormat, enum Office::MsoTriState InsertAsField ) {
    struct PPT_TextRange * _result = 0;
    HRESULT _hr = raw_InsertDateTime(DateTimeFormat, InsertAsField, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PPT_TextRangePtr(_result, false);
}

#pragma implementation_key(822)
inline PPT::PPT_TextRangePtr PPT::PPT_TextRange::InsertSlideNumber ( ) {
    struct PPT_TextRange * _result = 0;
    HRESULT _hr = raw_InsertSlideNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PPT_TextRangePtr(_result, false);
}

#pragma implementation_key(823)
inline PPT::PPT_TextRangePtr PPT::PPT_TextRange::InsertSymbol ( _bstr_t FontName, int CharNumber, enum Office::MsoTriState Unicode ) {
    struct PPT_TextRange * _result = 0;
    HRESULT _hr = raw_InsertSymbol(FontName, CharNumber, Unicode, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PPT_TextRangePtr(_result, false);
}

#pragma implementation_key(824)
inline PPT::FontPtr PPT::PPT_TextRange::GetFont ( ) {
    struct Font * _result = 0;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FontPtr(_result, false);
}

#pragma implementation_key(825)
inline PPT::ParagraphFormatPtr PPT::PPT_TextRange::GetParagraphFormat ( ) {
    struct ParagraphFormat * _result = 0;
    HRESULT _hr = get_ParagraphFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ParagraphFormatPtr(_result, false);
}

#pragma implementation_key(826)
inline int PPT::PPT_TextRange::GetIndentLevel ( ) {
    int _result = 0;
    HRESULT _hr = get_IndentLevel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(827)
inline void PPT::PPT_TextRange::PutIndentLevel ( int IndentLevel ) {
    HRESULT _hr = put_IndentLevel(IndentLevel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(828)
inline HRESULT PPT::PPT_TextRange::Select ( ) {
    HRESULT _hr = raw_Select();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(829)
inline HRESULT PPT::PPT_TextRange::Cut ( ) {
    HRESULT _hr = raw_Cut();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(830)
inline HRESULT PPT::PPT_TextRange::Copy ( ) {
    HRESULT _hr = raw_Copy();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(831)
inline HRESULT PPT::PPT_TextRange::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(832)
inline PPT::PPT_TextRangePtr PPT::PPT_TextRange::Paste ( ) {
    struct PPT_TextRange * _result = 0;
    HRESULT _hr = raw_Paste(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PPT_TextRangePtr(_result, false);
}

#pragma implementation_key(833)
inline HRESULT PPT::PPT_TextRange::ChangeCase ( enum PpChangeCase Type ) {
    HRESULT _hr = raw_ChangeCase(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(834)
inline HRESULT PPT::PPT_TextRange::AddPeriods ( ) {
    HRESULT _hr = raw_AddPeriods();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(835)
inline HRESULT PPT::PPT_TextRange::RemovePeriods ( ) {
    HRESULT _hr = raw_RemovePeriods();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(836)
inline PPT::PPT_TextRangePtr PPT::PPT_TextRange::Find ( _bstr_t FindWhat, int After, enum Office::MsoTriState MatchCase, enum Office::MsoTriState WholeWords ) {
    struct PPT_TextRange * _result = 0;
    HRESULT _hr = raw_Find(FindWhat, After, MatchCase, WholeWords, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PPT_TextRangePtr(_result, false);
}

#pragma implementation_key(837)
inline PPT::PPT_TextRangePtr PPT::PPT_TextRange::Replace ( _bstr_t FindWhat, _bstr_t ReplaceWhat, int After, enum Office::MsoTriState MatchCase, enum Office::MsoTriState WholeWords ) {
    struct PPT_TextRange * _result = 0;
    HRESULT _hr = raw_Replace(FindWhat, ReplaceWhat, After, MatchCase, WholeWords, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PPT_TextRangePtr(_result, false);
}

#pragma implementation_key(838)
inline HRESULT PPT::PPT_TextRange::RotatedBounds ( float * X1, float * Y1, float * X2, float * Y2, float * X3, float * Y3, float * x4, float * y4 ) {
    HRESULT _hr = raw_RotatedBounds(X1, Y1, X2, Y2, X3, Y3, x4, y4);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(839)
inline enum Office::MsoLanguageID PPT::PPT_TextRange::GetLanguageID ( ) {
    enum Office::MsoLanguageID _result;
    HRESULT _hr = get_LanguageID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(840)
inline void PPT::PPT_TextRange::PutLanguageID ( enum Office::MsoLanguageID LanguageID ) {
    HRESULT _hr = put_LanguageID(LanguageID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(841)
inline HRESULT PPT::PPT_TextRange::RtlRun ( ) {
    HRESULT _hr = raw_RtlRun();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(842)
inline HRESULT PPT::PPT_TextRange::LtrRun ( ) {
    HRESULT _hr = raw_LtrRun();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(843)
inline PPT::PPT_TextRangePtr PPT::PPT_TextRange::PasteSpecial ( enum PpPasteDataType DataType, enum Office::MsoTriState DisplayAsIcon, _bstr_t IconFileName, int IconIndex, _bstr_t IconLabel, enum Office::MsoTriState Link ) {
    struct PPT_TextRange * _result = 0;
    HRESULT _hr = raw_PasteSpecial(DataType, DisplayAsIcon, IconFileName, IconIndex, IconLabel, Link, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PPT_TextRangePtr(_result, false);
}

//
// interface TextFrame wrapper method implementations
//

#pragma implementation_key(844)
inline IDispatchPtr PPT::TextFrame::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(845)
inline long PPT::TextFrame::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(846)
inline IDispatchPtr PPT::TextFrame::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(847)
inline float PPT::TextFrame::GetMarginBottom ( ) {
    float _result = 0;
    HRESULT _hr = get_MarginBottom(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(848)
inline void PPT::TextFrame::PutMarginBottom ( float MarginBottom ) {
    HRESULT _hr = put_MarginBottom(MarginBottom);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(849)
inline float PPT::TextFrame::GetMarginLeft ( ) {
    float _result = 0;
    HRESULT _hr = get_MarginLeft(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(850)
inline void PPT::TextFrame::PutMarginLeft ( float MarginLeft ) {
    HRESULT _hr = put_MarginLeft(MarginLeft);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(851)
inline float PPT::TextFrame::GetMarginRight ( ) {
    float _result = 0;
    HRESULT _hr = get_MarginRight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(852)
inline void PPT::TextFrame::PutMarginRight ( float MarginRight ) {
    HRESULT _hr = put_MarginRight(MarginRight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(853)
inline float PPT::TextFrame::GetMarginTop ( ) {
    float _result = 0;
    HRESULT _hr = get_MarginTop(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(854)
inline void PPT::TextFrame::PutMarginTop ( float MarginTop ) {
    HRESULT _hr = put_MarginTop(MarginTop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(855)
inline enum Office::MsoTextOrientation PPT::TextFrame::GetOrientation ( ) {
    enum Office::MsoTextOrientation _result;
    HRESULT _hr = get_Orientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(856)
inline void PPT::TextFrame::PutOrientation ( enum Office::MsoTextOrientation Orientation ) {
    HRESULT _hr = put_Orientation(Orientation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(857)
inline enum Office::MsoTriState PPT::TextFrame::GetHasText ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_HasText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(858)
inline PPT::PPT_TextRangePtr PPT::TextFrame::GetPPT_TextRange ( ) {
    struct PPT_TextRange * _result = 0;
    HRESULT _hr = get_PPT_TextRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PPT_TextRangePtr(_result, false);
}

#pragma implementation_key(859)
inline PPT::RulerPtr PPT::TextFrame::GetRuler ( ) {
    struct Ruler * _result = 0;
    HRESULT _hr = get_Ruler(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RulerPtr(_result, false);
}

#pragma implementation_key(860)
inline enum Office::MsoHorizontalAnchor PPT::TextFrame::GetHorizontalAnchor ( ) {
    enum Office::MsoHorizontalAnchor _result;
    HRESULT _hr = get_HorizontalAnchor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(861)
inline void PPT::TextFrame::PutHorizontalAnchor ( enum Office::MsoHorizontalAnchor HorizontalAnchor ) {
    HRESULT _hr = put_HorizontalAnchor(HorizontalAnchor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(862)
inline enum Office::MsoVerticalAnchor PPT::TextFrame::GetVerticalAnchor ( ) {
    enum Office::MsoVerticalAnchor _result;
    HRESULT _hr = get_VerticalAnchor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(863)
inline void PPT::TextFrame::PutVerticalAnchor ( enum Office::MsoVerticalAnchor VerticalAnchor ) {
    HRESULT _hr = put_VerticalAnchor(VerticalAnchor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(864)
inline enum PPT::PpAutoSize PPT::TextFrame::GetAutoSize ( ) {
    enum PpAutoSize _result;
    HRESULT _hr = get_AutoSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(865)
inline void PPT::TextFrame::PutAutoSize ( enum PpAutoSize AutoSize ) {
    HRESULT _hr = put_AutoSize(AutoSize);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(866)
inline enum Office::MsoTriState PPT::TextFrame::GetWordWrap ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_WordWrap(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(867)
inline void PPT::TextFrame::PutWordWrap ( enum Office::MsoTriState WordWrap ) {
    HRESULT _hr = put_WordWrap(WordWrap);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(868)
inline HRESULT PPT::TextFrame::DeleteText ( ) {
    HRESULT _hr = raw_DeleteText();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface TextStyle wrapper method implementations
//

#pragma implementation_key(869)
inline PPT::_ApplicationPtr PPT::TextStyle::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(870)
inline IDispatchPtr PPT::TextStyle::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(871)
inline PPT::RulerPtr PPT::TextStyle::GetRuler ( ) {
    struct Ruler * _result = 0;
    HRESULT _hr = get_Ruler(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RulerPtr(_result, false);
}

#pragma implementation_key(872)
inline PPT::TextFramePtr PPT::TextStyle::GetTextFrame ( ) {
    struct TextFrame * _result = 0;
    HRESULT _hr = get_TextFrame(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextFramePtr(_result, false);
}

#pragma implementation_key(873)
inline PPT::TextStyleLevelsPtr PPT::TextStyle::GetLevels ( ) {
    struct TextStyleLevels * _result = 0;
    HRESULT _hr = get_Levels(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextStyleLevelsPtr(_result, false);
}

//
// interface TextStyles wrapper method implementations
//

#pragma implementation_key(874)
inline PPT::_ApplicationPtr PPT::TextStyles::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(875)
inline IDispatchPtr PPT::TextStyles::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(876)
inline PPT::TextStylePtr PPT::TextStyles::Item ( enum PpTextStyleType Type ) {
    struct TextStyle * _result = 0;
    HRESULT _hr = raw_Item(Type, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextStylePtr(_result, false);
}

//
// interface _PowerRex wrapper method implementations
//

#pragma implementation_key(877)
inline HRESULT PPT::_PowerRex::OnAsfEncoderEvent ( const _variant_t & erorCode, const _variant_t & bstrErrorDesc ) {
    HRESULT _hr = raw_OnAsfEncoderEvent(erorCode, bstrErrorDesc);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface EffectParameters wrapper method implementations
//

#pragma implementation_key(878)
inline PPT::_ApplicationPtr PPT::EffectParameters::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(879)
inline IDispatchPtr PPT::EffectParameters::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(880)
inline enum PPT::MsoAnimDirection PPT::EffectParameters::GetDirection ( ) {
    enum MsoAnimDirection _result;
    HRESULT _hr = get_Direction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(881)
inline void PPT::EffectParameters::PutDirection ( enum MsoAnimDirection Direction ) {
    HRESULT _hr = put_Direction(Direction);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(882)
inline float PPT::EffectParameters::GetAmount ( ) {
    float _result = 0;
    HRESULT _hr = get_Amount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(883)
inline void PPT::EffectParameters::PutAmount ( float Amount ) {
    HRESULT _hr = put_Amount(Amount);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(884)
inline float PPT::EffectParameters::GetSize ( ) {
    float _result = 0;
    HRESULT _hr = get_Size(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(885)
inline void PPT::EffectParameters::PutSize ( float Size ) {
    HRESULT _hr = put_Size(Size);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(886)
inline PPT::ColorFormatPtr PPT::EffectParameters::GetColor2 ( ) {
    struct ColorFormat * _result = 0;
    HRESULT _hr = get_Color2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColorFormatPtr(_result, false);
}

#pragma implementation_key(887)
inline enum Office::MsoTriState PPT::EffectParameters::GetRelative ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Relative(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(888)
inline void PPT::EffectParameters::PutRelative ( enum Office::MsoTriState Relative ) {
    HRESULT _hr = put_Relative(Relative);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(889)
inline _bstr_t PPT::EffectParameters::GetFontName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FontName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(890)
inline void PPT::EffectParameters::PutFontName ( _bstr_t FontName ) {
    HRESULT _hr = put_FontName(FontName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface EffectInformation wrapper method implementations
//

#pragma implementation_key(891)
inline PPT::_ApplicationPtr PPT::EffectInformation::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(892)
inline IDispatchPtr PPT::EffectInformation::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(893)
inline enum PPT::MsoAnimAfterEffect PPT::EffectInformation::GetAfterEffect ( ) {
    enum MsoAnimAfterEffect _result;
    HRESULT _hr = get_AfterEffect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(894)
inline enum Office::MsoTriState PPT::EffectInformation::GetAnimateBackground ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_AnimateBackground(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(895)
inline enum Office::MsoTriState PPT::EffectInformation::GetAnimateTextInReverse ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_AnimateTextInReverse(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(896)
inline enum PPT::MsoAnimateByLevel PPT::EffectInformation::GetBuildByLevelEffect ( ) {
    enum MsoAnimateByLevel _result;
    HRESULT _hr = get_BuildByLevelEffect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(897)
inline PPT::ColorFormatPtr PPT::EffectInformation::GetDim ( ) {
    struct ColorFormat * _result = 0;
    HRESULT _hr = get_Dim(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColorFormatPtr(_result, false);
}

#pragma implementation_key(898)
inline PPT::PlaySettingsPtr PPT::EffectInformation::GetPlaySettings ( ) {
    struct PlaySettings * _result = 0;
    HRESULT _hr = get_PlaySettings(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PlaySettingsPtr(_result, false);
}

#pragma implementation_key(899)
inline PPT::SoundEffectPtr PPT::EffectInformation::GetSoundEffect ( ) {
    struct SoundEffect * _result = 0;
    HRESULT _hr = get_SoundEffect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SoundEffectPtr(_result, false);
}

#pragma implementation_key(900)
inline enum PPT::MsoAnimTextUnitEffect PPT::EffectInformation::GetTextUnitEffect ( ) {
    enum MsoAnimTextUnitEffect _result;
    HRESULT _hr = get_TextUnitEffect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface MotionEffect wrapper method implementations
//

#pragma implementation_key(901)
inline PPT::_ApplicationPtr PPT::MotionEffect::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(902)
inline IDispatchPtr PPT::MotionEffect::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(903)
inline float PPT::MotionEffect::GetByX ( ) {
    float _result = 0;
    HRESULT _hr = get_ByX(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(904)
inline void PPT::MotionEffect::PutByX ( float ByX ) {
    HRESULT _hr = put_ByX(ByX);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(905)
inline float PPT::MotionEffect::GetByY ( ) {
    float _result = 0;
    HRESULT _hr = get_ByY(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(906)
inline void PPT::MotionEffect::PutByY ( float ByY ) {
    HRESULT _hr = put_ByY(ByY);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(907)
inline float PPT::MotionEffect::GetFromX ( ) {
    float _result = 0;
    HRESULT _hr = get_FromX(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(908)
inline void PPT::MotionEffect::PutFromX ( float FromX ) {
    HRESULT _hr = put_FromX(FromX);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(909)
inline float PPT::MotionEffect::GetFromY ( ) {
    float _result = 0;
    HRESULT _hr = get_FromY(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(910)
inline void PPT::MotionEffect::PutFromY ( float FromY ) {
    HRESULT _hr = put_FromY(FromY);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(911)
inline float PPT::MotionEffect::GetToX ( ) {
    float _result = 0;
    HRESULT _hr = get_ToX(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(912)
inline void PPT::MotionEffect::PutToX ( float ToX ) {
    HRESULT _hr = put_ToX(ToX);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(913)
inline float PPT::MotionEffect::GetToY ( ) {
    float _result = 0;
    HRESULT _hr = get_ToY(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(914)
inline void PPT::MotionEffect::PutToY ( float ToY ) {
    HRESULT _hr = put_ToY(ToY);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(915)
inline _bstr_t PPT::MotionEffect::GetPath ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Path(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(916)
inline void PPT::MotionEffect::PutPath ( _bstr_t Path ) {
    HRESULT _hr = put_Path(Path);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ColorEffect wrapper method implementations
//

#pragma implementation_key(917)
inline PPT::_ApplicationPtr PPT::ColorEffect::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(918)
inline IDispatchPtr PPT::ColorEffect::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(919)
inline PPT::ColorFormatPtr PPT::ColorEffect::GetBy ( ) {
    struct ColorFormat * _result = 0;
    HRESULT _hr = get_By(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColorFormatPtr(_result, false);
}

#pragma implementation_key(920)
inline PPT::ColorFormatPtr PPT::ColorEffect::GetFrom ( ) {
    struct ColorFormat * _result = 0;
    HRESULT _hr = get_From(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColorFormatPtr(_result, false);
}

#pragma implementation_key(921)
inline PPT::ColorFormatPtr PPT::ColorEffect::GetTo ( ) {
    struct ColorFormat * _result = 0;
    HRESULT _hr = get_To(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColorFormatPtr(_result, false);
}

//
// interface ScaleEffect wrapper method implementations
//

#pragma implementation_key(922)
inline PPT::_ApplicationPtr PPT::ScaleEffect::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(923)
inline IDispatchPtr PPT::ScaleEffect::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(924)
inline float PPT::ScaleEffect::GetByX ( ) {
    float _result = 0;
    HRESULT _hr = get_ByX(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(925)
inline void PPT::ScaleEffect::PutByX ( float ByX ) {
    HRESULT _hr = put_ByX(ByX);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(926)
inline float PPT::ScaleEffect::GetByY ( ) {
    float _result = 0;
    HRESULT _hr = get_ByY(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(927)
inline void PPT::ScaleEffect::PutByY ( float ByY ) {
    HRESULT _hr = put_ByY(ByY);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(928)
inline float PPT::ScaleEffect::GetFromX ( ) {
    float _result = 0;
    HRESULT _hr = get_FromX(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(929)
inline void PPT::ScaleEffect::PutFromX ( float FromX ) {
    HRESULT _hr = put_FromX(FromX);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(930)
inline float PPT::ScaleEffect::GetFromY ( ) {
    float _result = 0;
    HRESULT _hr = get_FromY(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(931)
inline void PPT::ScaleEffect::PutFromY ( float FromY ) {
    HRESULT _hr = put_FromY(FromY);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(932)
inline float PPT::ScaleEffect::GetToX ( ) {
    float _result = 0;
    HRESULT _hr = get_ToX(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(933)
inline void PPT::ScaleEffect::PutToX ( float ToX ) {
    HRESULT _hr = put_ToX(ToX);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(934)
inline float PPT::ScaleEffect::GetToY ( ) {
    float _result = 0;
    HRESULT _hr = get_ToY(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(935)
inline void PPT::ScaleEffect::PutToY ( float ToY ) {
    HRESULT _hr = put_ToY(ToY);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface RotationEffect wrapper method implementations
//

#pragma implementation_key(936)
inline PPT::_ApplicationPtr PPT::RotationEffect::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(937)
inline IDispatchPtr PPT::RotationEffect::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(938)
inline float PPT::RotationEffect::GetBy ( ) {
    float _result = 0;
    HRESULT _hr = get_By(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(939)
inline void PPT::RotationEffect::PutBy ( float By ) {
    HRESULT _hr = put_By(By);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(940)
inline float PPT::RotationEffect::GetFrom ( ) {
    float _result = 0;
    HRESULT _hr = get_From(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(941)
inline void PPT::RotationEffect::PutFrom ( float From ) {
    HRESULT _hr = put_From(From);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(942)
inline float PPT::RotationEffect::GetTo ( ) {
    float _result = 0;
    HRESULT _hr = get_To(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(943)
inline void PPT::RotationEffect::PutTo ( float To ) {
    HRESULT _hr = put_To(To);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface AnimationPoint wrapper method implementations
//

#pragma implementation_key(944)
inline PPT::_ApplicationPtr PPT::AnimationPoint::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(945)
inline IDispatchPtr PPT::AnimationPoint::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(946)
inline HRESULT PPT::AnimationPoint::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(947)
inline float PPT::AnimationPoint::GetTime ( ) {
    float _result = 0;
    HRESULT _hr = get_Time(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(948)
inline void PPT::AnimationPoint::PutTime ( float Time ) {
    HRESULT _hr = put_Time(Time);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(949)
inline _variant_t PPT::AnimationPoint::GetValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(950)
inline void PPT::AnimationPoint::PutValue ( const _variant_t & Value ) {
    HRESULT _hr = put_Value(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(951)
inline _bstr_t PPT::AnimationPoint::GetFormula ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Formula(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(952)
inline void PPT::AnimationPoint::PutFormula ( _bstr_t Formula ) {
    HRESULT _hr = put_Formula(Formula);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface AnimationPoints wrapper method implementations
//

#pragma implementation_key(953)
inline PPT::_ApplicationPtr PPT::AnimationPoints::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(954)
inline IDispatchPtr PPT::AnimationPoints::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(955)
inline PPT::AnimationPointPtr PPT::AnimationPoints::Item ( int Index ) {
    struct AnimationPoint * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AnimationPointPtr(_result, false);
}

#pragma implementation_key(956)
inline PPT::AnimationPointPtr PPT::AnimationPoints::Add ( int Index ) {
    struct AnimationPoint * _result = 0;
    HRESULT _hr = raw_Add(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AnimationPointPtr(_result, false);
}

#pragma implementation_key(957)
inline enum Office::MsoTriState PPT::AnimationPoints::GetSmooth ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Smooth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(958)
inline void PPT::AnimationPoints::PutSmooth ( enum Office::MsoTriState Smooth ) {
    HRESULT _hr = put_Smooth(Smooth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface PropertyEffect wrapper method implementations
//

#pragma implementation_key(959)
inline PPT::_ApplicationPtr PPT::PropertyEffect::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(960)
inline IDispatchPtr PPT::PropertyEffect::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(961)
inline enum PPT::MsoAnimProperty PPT::PropertyEffect::GetProperty ( ) {
    enum MsoAnimProperty _result;
    HRESULT _hr = get_Property(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(962)
inline void PPT::PropertyEffect::PutProperty ( enum MsoAnimProperty Property ) {
    HRESULT _hr = put_Property(Property);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(963)
inline PPT::AnimationPointsPtr PPT::PropertyEffect::GetPoints ( ) {
    struct AnimationPoints * _result = 0;
    HRESULT _hr = get_Points(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AnimationPointsPtr(_result, false);
}

#pragma implementation_key(964)
inline _variant_t PPT::PropertyEffect::GetFrom ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_From(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(965)
inline void PPT::PropertyEffect::PutFrom ( const _variant_t & From ) {
    HRESULT _hr = put_From(From);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(966)
inline _variant_t PPT::PropertyEffect::GetTo ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_To(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(967)
inline void PPT::PropertyEffect::PutTo ( const _variant_t & To ) {
    HRESULT _hr = put_To(To);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface AutoCorrect wrapper method implementations
//

#pragma implementation_key(968)
inline VARIANT_BOOL PPT::AutoCorrect::GetDisplayAutoCorrectOptions ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DisplayAutoCorrectOptions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(969)
inline void PPT::AutoCorrect::PutDisplayAutoCorrectOptions ( VARIANT_BOOL DisplayAutoCorrectOptions ) {
    HRESULT _hr = put_DisplayAutoCorrectOptions(DisplayAutoCorrectOptions);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(970)
inline VARIANT_BOOL PPT::AutoCorrect::GetDisplayAutoLayoutOptions ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DisplayAutoLayoutOptions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(971)
inline void PPT::AutoCorrect::PutDisplayAutoLayoutOptions ( VARIANT_BOOL DisplayAutoLayoutOptions ) {
    HRESULT _hr = put_DisplayAutoLayoutOptions(DisplayAutoLayoutOptions);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface Options wrapper method implementations
//

#pragma implementation_key(972)
inline enum Office::MsoTriState PPT::Options::GetDisplayPasteOptions ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_DisplayPasteOptions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(973)
inline void PPT::Options::PutDisplayPasteOptions ( enum Office::MsoTriState DisplayPasteOptions ) {
    HRESULT _hr = put_DisplayPasteOptions(DisplayPasteOptions);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(974)
inline enum Office::MsoTriState PPT::Options::GetDoNotPromptForConvert ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_DoNotPromptForConvert(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(975)
inline void PPT::Options::PutDoNotPromptForConvert ( enum Office::MsoTriState DoNotPromptForConvert ) {
    HRESULT _hr = put_DoNotPromptForConvert(DoNotPromptForConvert);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(976)
inline VARIANT_BOOL PPT::Options::GetShowCoauthoringMergeChanges ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowCoauthoringMergeChanges(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(977)
inline void PPT::Options::PutShowCoauthoringMergeChanges ( VARIANT_BOOL ShowCoauthoringMergeChanges ) {
    HRESULT _hr = put_ShowCoauthoringMergeChanges(ShowCoauthoringMergeChanges);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface CommandEffect wrapper method implementations
//

#pragma implementation_key(978)
inline PPT::_ApplicationPtr PPT::CommandEffect::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(979)
inline IDispatchPtr PPT::CommandEffect::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(980)
inline enum PPT::MsoAnimCommandType PPT::CommandEffect::GetType ( ) {
    enum MsoAnimCommandType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(981)
inline void PPT::CommandEffect::PutType ( enum MsoAnimCommandType Type ) {
    HRESULT _hr = put_Type(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(982)
inline _bstr_t PPT::CommandEffect::GetCommand ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Command(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(983)
inline void PPT::CommandEffect::PutCommand ( _bstr_t Command ) {
    HRESULT _hr = put_Command(Command);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(984)
inline _bstr_t PPT::CommandEffect::Getbookmark ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_bookmark(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(985)
inline void PPT::CommandEffect::Putbookmark ( _bstr_t bookmark ) {
    HRESULT _hr = put_bookmark(bookmark);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface FilterEffect wrapper method implementations
//

#pragma implementation_key(986)
inline PPT::_ApplicationPtr PPT::FilterEffect::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(987)
inline IDispatchPtr PPT::FilterEffect::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(988)
inline enum PPT::MsoAnimFilterEffectType PPT::FilterEffect::GetType ( ) {
    enum MsoAnimFilterEffectType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(989)
inline void PPT::FilterEffect::PutType ( enum MsoAnimFilterEffectType Type ) {
    HRESULT _hr = put_Type(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(990)
inline enum PPT::MsoAnimFilterEffectSubtype PPT::FilterEffect::GetSubtype ( ) {
    enum MsoAnimFilterEffectSubtype _result;
    HRESULT _hr = get_Subtype(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(991)
inline void PPT::FilterEffect::PutSubtype ( enum MsoAnimFilterEffectSubtype Subtype ) {
    HRESULT _hr = put_Subtype(Subtype);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(992)
inline enum Office::MsoTriState PPT::FilterEffect::GetReveal ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Reveal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(993)
inline void PPT::FilterEffect::PutReveal ( enum Office::MsoTriState Reveal ) {
    HRESULT _hr = put_Reveal(Reveal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface SetEffect wrapper method implementations
//

#pragma implementation_key(994)
inline PPT::_ApplicationPtr PPT::SetEffect::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(995)
inline IDispatchPtr PPT::SetEffect::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(996)
inline enum PPT::MsoAnimProperty PPT::SetEffect::GetProperty ( ) {
    enum MsoAnimProperty _result;
    HRESULT _hr = get_Property(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(997)
inline void PPT::SetEffect::PutProperty ( enum MsoAnimProperty Property ) {
    HRESULT _hr = put_Property(Property);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(998)
inline _variant_t PPT::SetEffect::GetTo ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_To(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(999)
inline void PPT::SetEffect::PutTo ( const _variant_t & To ) {
    HRESULT _hr = put_To(To);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface TableStyle wrapper method implementations
//

#pragma implementation_key(1000)
inline _bstr_t PPT::TableStyle::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1001)
inline _bstr_t PPT::TableStyle::GetId ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Id(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface CustomerData wrapper method implementations
//

#pragma implementation_key(1002)
inline PPT::_ApplicationPtr PPT::CustomerData::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1003)
inline IDispatchPtr PPT::CustomerData::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1004)
inline Office::_CustomXMLPartPtr PPT::CustomerData::Item ( _bstr_t Id ) {
    struct Office::_CustomXMLPart * _result = 0;
    HRESULT _hr = raw_Item(Id, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::_CustomXMLPartPtr(_result, false);
}

#pragma implementation_key(1005)
inline Office::_CustomXMLPartPtr PPT::CustomerData::Add ( ) {
    struct Office::_CustomXMLPart * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::_CustomXMLPartPtr(_result, false);
}

#pragma implementation_key(1006)
inline HRESULT PPT::CustomerData::Delete ( _bstr_t Id ) {
    HRESULT _hr = raw_Delete(Id);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface Research wrapper method implementations
//

#pragma implementation_key(1007)
inline PPT::_ApplicationPtr PPT::Research::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1008)
inline IDispatchPtr PPT::Research::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1009)
inline HRESULT PPT::Research::Query ( _bstr_t ServiceID, VARIANT * QueryString, VARIANT * QueryLanguage, VARIANT_BOOL UseSelection, VARIANT_BOOL LaunchQuery ) {
    HRESULT _hr = raw_Query(ServiceID, QueryString, QueryLanguage, UseSelection, LaunchQuery);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1010)
inline HRESULT PPT::Research::SetLanguagePair ( VARIANT * Language1, VARIANT * Language2 ) {
    HRESULT _hr = raw_SetLanguagePair(Language1, Language2);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1011)
inline VARIANT_BOOL PPT::Research::IsResearchService ( _bstr_t ServiceID ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsResearchService(ServiceID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface TableBackground wrapper method implementations
//

#pragma implementation_key(1012)
inline PPT::FillFormatPtr PPT::TableBackground::GetFill ( ) {
    struct FillFormat * _result = 0;
    HRESULT _hr = get_Fill(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FillFormatPtr(_result, false);
}

#pragma implementation_key(1013)
inline PPT::PictureFormatPtr PPT::TableBackground::GetPicture ( ) {
    struct PictureFormat * _result = 0;
    HRESULT _hr = get_Picture(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PictureFormatPtr(_result, false);
}

#pragma implementation_key(1014)
inline Office::ReflectionFormatPtr PPT::TableBackground::GetReflection ( ) {
    struct Office::ReflectionFormat * _result = 0;
    HRESULT _hr = get_Reflection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::ReflectionFormatPtr(_result, false);
}

#pragma implementation_key(1015)
inline PPT::ShadowFormatPtr PPT::TableBackground::GetShadow ( ) {
    struct ShadowFormat * _result = 0;
    HRESULT _hr = get_Shadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShadowFormatPtr(_result, false);
}

//
// interface TextFrame2 wrapper method implementations
//

#pragma implementation_key(1016)
inline IDispatchPtr PPT::TextFrame2::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1017)
inline long PPT::TextFrame2::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1018)
inline IDispatchPtr PPT::TextFrame2::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1019)
inline float PPT::TextFrame2::GetMarginBottom ( ) {
    float _result = 0;
    HRESULT _hr = get_MarginBottom(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1020)
inline void PPT::TextFrame2::PutMarginBottom ( float MarginBottom ) {
    HRESULT _hr = put_MarginBottom(MarginBottom);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1021)
inline float PPT::TextFrame2::GetMarginLeft ( ) {
    float _result = 0;
    HRESULT _hr = get_MarginLeft(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1022)
inline void PPT::TextFrame2::PutMarginLeft ( float MarginLeft ) {
    HRESULT _hr = put_MarginLeft(MarginLeft);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1023)
inline float PPT::TextFrame2::GetMarginRight ( ) {
    float _result = 0;
    HRESULT _hr = get_MarginRight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1024)
inline void PPT::TextFrame2::PutMarginRight ( float MarginRight ) {
    HRESULT _hr = put_MarginRight(MarginRight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1025)
inline float PPT::TextFrame2::GetMarginTop ( ) {
    float _result = 0;
    HRESULT _hr = get_MarginTop(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1026)
inline void PPT::TextFrame2::PutMarginTop ( float MarginTop ) {
    HRESULT _hr = put_MarginTop(MarginTop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1027)
inline enum Office::MsoTextOrientation PPT::TextFrame2::GetOrientation ( ) {
    enum Office::MsoTextOrientation _result;
    HRESULT _hr = get_Orientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1028)
inline void PPT::TextFrame2::PutOrientation ( enum Office::MsoTextOrientation Orientation ) {
    HRESULT _hr = put_Orientation(Orientation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1029)
inline enum Office::MsoHorizontalAnchor PPT::TextFrame2::GetHorizontalAnchor ( ) {
    enum Office::MsoHorizontalAnchor _result;
    HRESULT _hr = get_HorizontalAnchor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1030)
inline void PPT::TextFrame2::PutHorizontalAnchor ( enum Office::MsoHorizontalAnchor HorizontalAnchor ) {
    HRESULT _hr = put_HorizontalAnchor(HorizontalAnchor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1031)
inline enum Office::MsoVerticalAnchor PPT::TextFrame2::GetVerticalAnchor ( ) {
    enum Office::MsoVerticalAnchor _result;
    HRESULT _hr = get_VerticalAnchor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1032)
inline void PPT::TextFrame2::PutVerticalAnchor ( enum Office::MsoVerticalAnchor VerticalAnchor ) {
    HRESULT _hr = put_VerticalAnchor(VerticalAnchor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1033)
inline enum Office::MsoPathFormat PPT::TextFrame2::GetPathFormat ( ) {
    enum Office::MsoPathFormat _result;
    HRESULT _hr = get_PathFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1034)
inline void PPT::TextFrame2::PutPathFormat ( enum Office::MsoPathFormat PathFormat ) {
    HRESULT _hr = put_PathFormat(PathFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1035)
inline enum Office::MsoWarpFormat PPT::TextFrame2::GetWarpFormat ( ) {
    enum Office::MsoWarpFormat _result;
    HRESULT _hr = get_WarpFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1036)
inline void PPT::TextFrame2::PutWarpFormat ( enum Office::MsoWarpFormat WarpFormat ) {
    HRESULT _hr = put_WarpFormat(WarpFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1037)
inline enum Office::MsoPresetTextEffect PPT::TextFrame2::GetWordArtFormat ( ) {
    enum Office::MsoPresetTextEffect _result;
    HRESULT _hr = get_WordArtFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1038)
inline void PPT::TextFrame2::PutWordArtFormat ( enum Office::MsoPresetTextEffect WordArtFormat ) {
    HRESULT _hr = put_WordArtFormat(WordArtFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1039)
inline enum Office::MsoTriState PPT::TextFrame2::GetWordWrap ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_WordWrap(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1040)
inline void PPT::TextFrame2::PutWordWrap ( enum Office::MsoTriState WordWrap ) {
    HRESULT _hr = put_WordWrap(WordWrap);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1041)
inline enum Office::MsoAutoSize PPT::TextFrame2::GetAutoSize ( ) {
    enum Office::MsoAutoSize _result;
    HRESULT _hr = get_AutoSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1042)
inline void PPT::TextFrame2::PutAutoSize ( enum Office::MsoAutoSize AutoSize ) {
    HRESULT _hr = put_AutoSize(AutoSize);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1043)
inline PPT::ThreeDFormatPtr PPT::TextFrame2::GetThreeD ( ) {
    struct ThreeDFormat * _result = 0;
    HRESULT _hr = get_ThreeD(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ThreeDFormatPtr(_result, false);
}

#pragma implementation_key(1044)
inline enum Office::MsoTriState PPT::TextFrame2::GetHasText ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_HasText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1045)
inline Office::TextRange2Ptr PPT::TextFrame2::GetPPT_TextRange ( ) {
    struct Office::TextRange2 * _result = 0;
    HRESULT _hr = get_PPT_TextRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::TextRange2Ptr(_result, false);
}

#pragma implementation_key(1046)
inline Office::TextColumn2Ptr PPT::TextFrame2::GetColumn ( ) {
    struct Office::TextColumn2 * _result = 0;
    HRESULT _hr = get_Column(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::TextColumn2Ptr(_result, false);
}

#pragma implementation_key(1047)
inline Office::Ruler2Ptr PPT::TextFrame2::GetRuler ( ) {
    struct Office::Ruler2 * _result = 0;
    HRESULT _hr = get_Ruler(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::Ruler2Ptr(_result, false);
}

#pragma implementation_key(1048)
inline HRESULT PPT::TextFrame2::DeleteText ( ) {
    HRESULT _hr = raw_DeleteText();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1049)
inline enum Office::MsoTriState PPT::TextFrame2::GetNoTextRotation ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_NoTextRotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1050)
inline void PPT::TextFrame2::PutNoTextRotation ( enum Office::MsoTriState NoTextRotation ) {
    HRESULT _hr = put_NoTextRotation(NoTextRotation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ChartBorder wrapper method implementations
//

#pragma implementation_key(1051)
inline void PPT::ChartBorder::PutColor ( const _variant_t & RHS ) {
    HRESULT _hr = put_Color(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1052)
inline _variant_t PPT::ChartBorder::GetColor ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1053)
inline void PPT::ChartBorder::PutColorIndex ( const _variant_t & RHS ) {
    HRESULT _hr = put_ColorIndex(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1054)
inline _variant_t PPT::ChartBorder::GetColorIndex ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ColorIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1055)
inline void PPT::ChartBorder::PutLineStyle ( const _variant_t & RHS ) {
    HRESULT _hr = put_LineStyle(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1056)
inline _variant_t PPT::ChartBorder::GetLineStyle ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_LineStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1057)
inline void PPT::ChartBorder::PutWeight ( const _variant_t & RHS ) {
    HRESULT _hr = put_Weight(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1058)
inline _variant_t PPT::ChartBorder::GetWeight ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Weight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1059)
inline long PPT::ChartBorder::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1060)
inline IDispatchPtr PPT::ChartBorder::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1061)
inline PPT::_ApplicationPtr PPT::ChartBorder::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

//
// interface ChartColorFormat wrapper method implementations
//

#pragma implementation_key(1062)
inline IDispatchPtr PPT::ChartColorFormat::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1063)
inline long PPT::ChartColorFormat::GetSchemeColor ( ) {
    long _result = 0;
    HRESULT _hr = get_SchemeColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1064)
inline void PPT::ChartColorFormat::PutSchemeColor ( long RHS ) {
    HRESULT _hr = put_SchemeColor(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1065)
inline long PPT::ChartColorFormat::Get_Default ( ) {
    long _result = 0;
    HRESULT _hr = get__Default(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1066)
inline long PPT::ChartColorFormat::GetType ( ) {
    long _result = 0;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1067)
inline long PPT::ChartColorFormat::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1068)
inline PPT::_ApplicationPtr PPT::ChartColorFormat::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1069)
inline long PPT::ChartColorFormat::GetPPT_RGB ( ) {
    long _result = 0;
    HRESULT _hr = get_PPT_RGB(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ChartData wrapper method implementations
//

#pragma implementation_key(1070)
inline IDispatchPtr PPT::ChartData::GetWorkbook ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Workbook(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1071)
inline HRESULT PPT::ChartData::Activate ( ) {
    HRESULT _hr = raw_Activate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1072)
inline VARIANT_BOOL PPT::ChartData::GetIsLinked ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsLinked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1073)
inline HRESULT PPT::ChartData::BreakLink ( ) {
    HRESULT _hr = raw_BreakLink();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1074)
inline HRESULT PPT::ChartData::ActivateChartDataWindow ( ) {
    HRESULT _hr = raw_ActivateChartDataWindow();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface ChartFillFormat wrapper method implementations
//

#pragma implementation_key(1075)
inline HRESULT PPT::ChartFillFormat::Solid ( ) {
    HRESULT _hr = raw_Solid();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1076)
inline HRESULT PPT::ChartFillFormat::UserTextured ( _bstr_t TextureFile ) {
    HRESULT _hr = raw_UserTextured(TextureFile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1077)
inline PPT::ChartColorFormatPtr PPT::ChartFillFormat::GetBackColor ( ) {
    struct ChartColorFormat * _result = 0;
    HRESULT _hr = get_BackColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartColorFormatPtr(_result, false);
}

#pragma implementation_key(1078)
inline PPT::ChartColorFormatPtr PPT::ChartFillFormat::GetForeColor ( ) {
    struct ChartColorFormat * _result = 0;
    HRESULT _hr = get_ForeColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartColorFormatPtr(_result, false);
}

#pragma implementation_key(1079)
inline float PPT::ChartFillFormat::GetGradientDegree ( ) {
    float _result = 0;
    HRESULT _hr = get_GradientDegree(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1080)
inline _bstr_t PPT::ChartFillFormat::GetTextureName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TextureName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1081)
inline long PPT::ChartFillFormat::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1082)
inline IDispatchPtr PPT::ChartFillFormat::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1083)
inline PPT::_ApplicationPtr PPT::ChartFillFormat::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1084)
inline HRESULT PPT::ChartFillFormat::OneColorGradient ( enum Office::MsoGradientStyle Style, long Variant, float Degree ) {
    HRESULT _hr = raw_OneColorGradient(Style, Variant, Degree);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1085)
inline enum Office::MsoGradientColorType PPT::ChartFillFormat::GetGradientColorType ( ) {
    enum Office::MsoGradientColorType _result;
    HRESULT _hr = get_GradientColorType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1086)
inline enum Office::MsoGradientStyle PPT::ChartFillFormat::GetGradientStyle ( ) {
    enum Office::MsoGradientStyle _result;
    HRESULT _hr = get_GradientStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1087)
inline long PPT::ChartFillFormat::GetGradientVariant ( ) {
    long _result = 0;
    HRESULT _hr = get_GradientVariant(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1088)
inline enum Office::MsoPatternType PPT::ChartFillFormat::GetPattern ( ) {
    enum Office::MsoPatternType _result;
    HRESULT _hr = get_Pattern(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1089)
inline HRESULT PPT::ChartFillFormat::Patterned ( enum Office::MsoPatternType Pattern ) {
    HRESULT _hr = raw_Patterned(Pattern);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1090)
inline HRESULT PPT::ChartFillFormat::PresetGradient ( enum Office::MsoGradientStyle Style, long Variant, enum Office::MsoPresetGradientType PresetGradientType ) {
    HRESULT _hr = raw_PresetGradient(Style, Variant, PresetGradientType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1091)
inline enum Office::MsoPresetGradientType PPT::ChartFillFormat::GetPresetGradientType ( ) {
    enum Office::MsoPresetGradientType _result;
    HRESULT _hr = get_PresetGradientType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1092)
inline enum Office::MsoPresetTexture PPT::ChartFillFormat::GetPresetTexture ( ) {
    enum Office::MsoPresetTexture _result;
    HRESULT _hr = get_PresetTexture(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1093)
inline HRESULT PPT::ChartFillFormat::PresetTextured ( enum Office::MsoPresetTexture PresetTexture ) {
    HRESULT _hr = raw_PresetTextured(PresetTexture);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1094)
inline enum Office::MsoTextureType PPT::ChartFillFormat::GetTextureType ( ) {
    enum Office::MsoTextureType _result;
    HRESULT _hr = get_TextureType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1095)
inline HRESULT PPT::ChartFillFormat::TwoColorGradient ( enum Office::MsoGradientStyle Style, long Variant ) {
    HRESULT _hr = raw_TwoColorGradient(Style, Variant);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1096)
inline enum Office::MsoFillType PPT::ChartFillFormat::GetType ( ) {
    enum Office::MsoFillType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1097)
inline HRESULT PPT::ChartFillFormat::UserPicture ( const _variant_t & PictureFile, const _variant_t & PictureFormat, const _variant_t & PictureStackUnit, const _variant_t & PicturePlacement ) {
    HRESULT _hr = raw_UserPicture(PictureFile, PictureFormat, PictureStackUnit, PicturePlacement);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1098)
inline enum Office::MsoTriState PPT::ChartFillFormat::GetVisible ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1099)
inline void PPT::ChartFillFormat::PutVisible ( enum Office::MsoTriState RHS ) {
    HRESULT _hr = put_Visible(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ChartFormat wrapper method implementations
//

#pragma implementation_key(1100)
inline PPT::FillFormatPtr PPT::ChartFormat::GetFill ( ) {
    struct FillFormat * _result = 0;
    HRESULT _hr = get_Fill(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FillFormatPtr(_result, false);
}

#pragma implementation_key(1101)
inline Office::GlowFormatPtr PPT::ChartFormat::GetGlow ( ) {
    struct Office::GlowFormat * _result = 0;
    HRESULT _hr = get_Glow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::GlowFormatPtr(_result, false);
}

#pragma implementation_key(1102)
inline PPT::LineFormatPtr PPT::ChartFormat::GetLine ( ) {
    struct LineFormat * _result = 0;
    HRESULT _hr = get_Line(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return LineFormatPtr(_result, false);
}

#pragma implementation_key(1103)
inline IDispatchPtr PPT::ChartFormat::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1104)
inline PPT::PictureFormatPtr PPT::ChartFormat::GetPictureFormat ( ) {
    struct PictureFormat * _result = 0;
    HRESULT _hr = get_PictureFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PictureFormatPtr(_result, false);
}

#pragma implementation_key(1105)
inline PPT::ShadowFormatPtr PPT::ChartFormat::GetShadow ( ) {
    struct ShadowFormat * _result = 0;
    HRESULT _hr = get_Shadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShadowFormatPtr(_result, false);
}

#pragma implementation_key(1106)
inline Office::SoftEdgeFormatPtr PPT::ChartFormat::GetSoftEdge ( ) {
    struct Office::SoftEdgeFormat * _result = 0;
    HRESULT _hr = get_SoftEdge(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::SoftEdgeFormatPtr(_result, false);
}

#pragma implementation_key(1107)
inline PPT::TextFrame2Ptr PPT::ChartFormat::GetTextFrame2 ( ) {
    struct TextFrame2 * _result = 0;
    HRESULT _hr = get_TextFrame2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextFrame2Ptr(_result, false);
}

#pragma implementation_key(1108)
inline PPT::ThreeDFormatPtr PPT::ChartFormat::GetThreeD ( ) {
    struct ThreeDFormat * _result = 0;
    HRESULT _hr = get_ThreeD(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ThreeDFormatPtr(_result, false);
}

#pragma implementation_key(1109)
inline long PPT::ChartFormat::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1110)
inline PPT::_ApplicationPtr PPT::ChartFormat::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1111)
inline PPT::AdjustmentsPtr PPT::ChartFormat::GetAdjustments ( ) {
    struct Adjustments * _result = 0;
    HRESULT _hr = get_Adjustments(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AdjustmentsPtr(_result, false);
}

#pragma implementation_key(1112)
inline enum Office::MsoAutoShapeType PPT::ChartFormat::GetAutoShapeType ( ) {
    enum Office::MsoAutoShapeType _result;
    HRESULT _hr = get_AutoShapeType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1113)
inline void PPT::ChartFormat::PutAutoShapeType ( enum Office::MsoAutoShapeType AutoShapeType ) {
    HRESULT _hr = put_AutoShapeType(AutoShapeType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface Corners wrapper method implementations
//

#pragma implementation_key(1114)
inline IDispatchPtr PPT::Corners::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1115)
inline _bstr_t PPT::Corners::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1116)
inline _variant_t PPT::Corners::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1117)
inline long PPT::Corners::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1118)
inline PPT::_ApplicationPtr PPT::Corners::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

//
// interface DropLines wrapper method implementations
//

#pragma implementation_key(1119)
inline _bstr_t PPT::DropLines::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1120)
inline IDispatchPtr PPT::DropLines::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1121)
inline PPT::ChartBorderPtr PPT::DropLines::GetBorder ( ) {
    struct ChartBorder * _result = 0;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartBorderPtr(_result, false);
}

#pragma implementation_key(1122)
inline PPT::ChartFormatPtr PPT::DropLines::GetFormat ( ) {
    struct ChartFormat * _result = 0;
    HRESULT _hr = get_Format(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFormatPtr(_result, false);
}

#pragma implementation_key(1123)
inline long PPT::DropLines::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1124)
inline PPT::_ApplicationPtr PPT::DropLines::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1125)
inline _variant_t PPT::DropLines::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1126)
inline _variant_t PPT::DropLines::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

//
// interface ErrorBars wrapper method implementations
//

#pragma implementation_key(1127)
inline IDispatchPtr PPT::ErrorBars::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1128)
inline _bstr_t PPT::ErrorBars::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1129)
inline _variant_t PPT::ErrorBars::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1130)
inline PPT::ChartBorderPtr PPT::ErrorBars::GetBorder ( ) {
    struct ChartBorder * _result = 0;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartBorderPtr(_result, false);
}

#pragma implementation_key(1131)
inline _variant_t PPT::ErrorBars::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1132)
inline _variant_t PPT::ErrorBars::ClearFormats ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_ClearFormats(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1133)
inline enum PPT::XlEndStyleCap PPT::ErrorBars::GetEndStyle ( ) {
    enum XlEndStyleCap _result;
    HRESULT _hr = get_EndStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1134)
inline void PPT::ErrorBars::PutEndStyle ( enum XlEndStyleCap RHS ) {
    HRESULT _hr = put_EndStyle(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1135)
inline PPT::ChartFormatPtr PPT::ErrorBars::GetFormat ( ) {
    struct ChartFormat * _result = 0;
    HRESULT _hr = get_Format(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFormatPtr(_result, false);
}

#pragma implementation_key(1136)
inline long PPT::ErrorBars::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1137)
inline PPT::_ApplicationPtr PPT::ErrorBars::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1138)
inline _variant_t PPT::ErrorBars::GetProperty ( _bstr_t Id ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetProperty(Id, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1139)
inline HRESULT PPT::ErrorBars::SetProperty ( _bstr_t Id, const _variant_t & Value ) {
    HRESULT _hr = raw_SetProperty(Id, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface ChartFont wrapper method implementations
//

#pragma implementation_key(1140)
inline void PPT::ChartFont::PutBackground ( const _variant_t & RHS ) {
    HRESULT _hr = put_Background(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1141)
inline _variant_t PPT::ChartFont::GetBackground ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Background(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1142)
inline void PPT::ChartFont::PutBold ( const _variant_t & RHS ) {
    HRESULT _hr = put_Bold(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1143)
inline _variant_t PPT::ChartFont::GetBold ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Bold(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1144)
inline void PPT::ChartFont::PutColor ( const _variant_t & RHS ) {
    HRESULT _hr = put_Color(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1145)
inline _variant_t PPT::ChartFont::GetColor ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1146)
inline void PPT::ChartFont::PutColorIndex ( const _variant_t & RHS ) {
    HRESULT _hr = put_ColorIndex(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1147)
inline _variant_t PPT::ChartFont::GetColorIndex ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ColorIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1148)
inline void PPT::ChartFont::PutFontStyle ( const _variant_t & RHS ) {
    HRESULT _hr = put_FontStyle(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1149)
inline _variant_t PPT::ChartFont::GetFontStyle ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_FontStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1150)
inline void PPT::ChartFont::PutItalic ( const _variant_t & RHS ) {
    HRESULT _hr = put_Italic(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1151)
inline _variant_t PPT::ChartFont::GetItalic ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Italic(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1152)
inline void PPT::ChartFont::PutName ( const _variant_t & RHS ) {
    HRESULT _hr = put_Name(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1153)
inline _variant_t PPT::ChartFont::GetName ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1154)
inline void PPT::ChartFont::PutOutlineFont ( const _variant_t & RHS ) {
    HRESULT _hr = put_OutlineFont(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1155)
inline _variant_t PPT::ChartFont::GetOutlineFont ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_OutlineFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1156)
inline void PPT::ChartFont::PutShadow ( const _variant_t & RHS ) {
    HRESULT _hr = put_Shadow(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1157)
inline _variant_t PPT::ChartFont::GetShadow ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Shadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1158)
inline void PPT::ChartFont::PutSize ( const _variant_t & RHS ) {
    HRESULT _hr = put_Size(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1159)
inline _variant_t PPT::ChartFont::GetSize ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Size(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1160)
inline void PPT::ChartFont::PutStrikethrough ( const _variant_t & RHS ) {
    HRESULT _hr = put_Strikethrough(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1161)
inline _variant_t PPT::ChartFont::GetStrikethrough ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Strikethrough(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1162)
inline void PPT::ChartFont::PutSubscript ( const _variant_t & RHS ) {
    HRESULT _hr = put_Subscript(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1163)
inline _variant_t PPT::ChartFont::GetSubscript ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Subscript(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1164)
inline void PPT::ChartFont::PutSuperscript ( const _variant_t & RHS ) {
    HRESULT _hr = put_Superscript(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1165)
inline _variant_t PPT::ChartFont::GetSuperscript ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Superscript(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1166)
inline void PPT::ChartFont::PutUnderline ( const _variant_t & RHS ) {
    HRESULT _hr = put_Underline(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1167)
inline _variant_t PPT::ChartFont::GetUnderline ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Underline(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1168)
inline long PPT::ChartFont::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1169)
inline IDispatchPtr PPT::ChartFont::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1170)
inline PPT::_ApplicationPtr PPT::ChartFont::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

//
// interface ChartCharacters wrapper method implementations
//

#pragma implementation_key(1171)
inline IDispatchPtr PPT::ChartCharacters::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1172)
inline _bstr_t PPT::ChartCharacters::GetCaption ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1173)
inline void PPT::ChartCharacters::PutCaption ( _bstr_t RHS ) {
    HRESULT _hr = put_Caption(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1174)
inline long PPT::ChartCharacters::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1175)
inline _variant_t PPT::ChartCharacters::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1176)
inline PPT::ChartFontPtr PPT::ChartCharacters::GetFont ( ) {
    struct ChartFont * _result = 0;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFontPtr(_result, false);
}

#pragma implementation_key(1177)
inline _variant_t PPT::ChartCharacters::Insert ( _bstr_t String ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Insert(String, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1178)
inline _bstr_t PPT::ChartCharacters::GetText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1179)
inline void PPT::ChartCharacters::PutText ( _bstr_t RHS ) {
    HRESULT _hr = put_Text(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1180)
inline _bstr_t PPT::ChartCharacters::GetPhoneticCharacters ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PhoneticCharacters(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1181)
inline void PPT::ChartCharacters::PutPhoneticCharacters ( _bstr_t RHS ) {
    HRESULT _hr = put_PhoneticCharacters(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1182)
inline long PPT::ChartCharacters::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1183)
inline PPT::_ApplicationPtr PPT::ChartCharacters::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

//
// interface DataTable wrapper method implementations
//

#pragma implementation_key(1184)
inline void PPT::DataTable::PutShowLegendKey ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ShowLegendKey(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1185)
inline VARIANT_BOOL PPT::DataTable::GetShowLegendKey ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowLegendKey(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1186)
inline void PPT::DataTable::PutHasBorderHorizontal ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_HasBorderHorizontal(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1187)
inline VARIANT_BOOL PPT::DataTable::GetHasBorderHorizontal ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasBorderHorizontal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1188)
inline void PPT::DataTable::PutHasBorderVertical ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_HasBorderVertical(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1189)
inline VARIANT_BOOL PPT::DataTable::GetHasBorderVertical ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasBorderVertical(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1190)
inline void PPT::DataTable::PutHasBorderOutline ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_HasBorderOutline(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1191)
inline VARIANT_BOOL PPT::DataTable::GetHasBorderOutline ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasBorderOutline(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1192)
inline PPT::ChartBorderPtr PPT::DataTable::GetBorder ( ) {
    struct ChartBorder * _result = 0;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartBorderPtr(_result, false);
}

#pragma implementation_key(1193)
inline PPT::ChartFontPtr PPT::DataTable::GetFont ( ) {
    struct ChartFont * _result = 0;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFontPtr(_result, false);
}

#pragma implementation_key(1194)
inline HRESULT PPT::DataTable::Select ( ) {
    HRESULT _hr = raw_Select();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1195)
inline HRESULT PPT::DataTable::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1196)
inline IDispatchPtr PPT::DataTable::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1197)
inline _variant_t PPT::DataTable::GetAutoScaleFont ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_AutoScaleFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1198)
inline void PPT::DataTable::PutAutoScaleFont ( const _variant_t & RHS ) {
    HRESULT _hr = put_AutoScaleFont(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1199)
inline PPT::ChartFormatPtr PPT::DataTable::GetFormat ( ) {
    struct ChartFormat * _result = 0;
    HRESULT _hr = get_Format(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFormatPtr(_result, false);
}

#pragma implementation_key(1200)
inline long PPT::DataTable::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1201)
inline PPT::_ApplicationPtr PPT::DataTable::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

//
// interface Gridlines wrapper method implementations
//

#pragma implementation_key(1202)
inline _bstr_t PPT::Gridlines::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1203)
inline _variant_t PPT::Gridlines::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1204)
inline IDispatchPtr PPT::Gridlines::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1205)
inline PPT::ChartBorderPtr PPT::Gridlines::GetBorder ( ) {
    struct ChartBorder * _result = 0;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartBorderPtr(_result, false);
}

#pragma implementation_key(1206)
inline _variant_t PPT::Gridlines::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1207)
inline PPT::ChartFormatPtr PPT::Gridlines::GetFormat ( ) {
    struct ChartFormat * _result = 0;
    HRESULT _hr = get_Format(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFormatPtr(_result, false);
}

#pragma implementation_key(1208)
inline long PPT::Gridlines::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1209)
inline PPT::_ApplicationPtr PPT::Gridlines::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1210)
inline _variant_t PPT::Gridlines::GetProperty ( _bstr_t Id ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetProperty(Id, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1211)
inline HRESULT PPT::Gridlines::SetProperty ( _bstr_t Id, const _variant_t & Value ) {
    HRESULT _hr = raw_SetProperty(Id, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface HiLoLines wrapper method implementations
//

#pragma implementation_key(1212)
inline IDispatchPtr PPT::HiLoLines::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1213)
inline _bstr_t PPT::HiLoLines::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1214)
inline PPT::ChartBorderPtr PPT::HiLoLines::GetBorder ( ) {
    struct ChartBorder * _result = 0;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartBorderPtr(_result, false);
}

#pragma implementation_key(1215)
inline PPT::ChartFormatPtr PPT::HiLoLines::GetFormat ( ) {
    struct ChartFormat * _result = 0;
    HRESULT _hr = get_Format(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFormatPtr(_result, false);
}

#pragma implementation_key(1216)
inline long PPT::HiLoLines::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1217)
inline PPT::_ApplicationPtr PPT::HiLoLines::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1218)
inline _variant_t PPT::HiLoLines::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1219)
inline _variant_t PPT::HiLoLines::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

//
// interface Interior wrapper method implementations
//

#pragma implementation_key(1220)
inline void PPT::Interior::PutColor ( const _variant_t & RHS ) {
    HRESULT _hr = put_Color(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1221)
inline _variant_t PPT::Interior::GetColor ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1222)
inline void PPT::Interior::PutColorIndex ( const _variant_t & RHS ) {
    HRESULT _hr = put_ColorIndex(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1223)
inline _variant_t PPT::Interior::GetColorIndex ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ColorIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1224)
inline void PPT::Interior::PutInvertIfNegative ( const _variant_t & RHS ) {
    HRESULT _hr = put_InvertIfNegative(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1225)
inline _variant_t PPT::Interior::GetInvertIfNegative ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_InvertIfNegative(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1226)
inline void PPT::Interior::PutPattern ( const _variant_t & RHS ) {
    HRESULT _hr = put_Pattern(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1227)
inline _variant_t PPT::Interior::GetPattern ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Pattern(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1228)
inline void PPT::Interior::PutPatternColor ( const _variant_t & RHS ) {
    HRESULT _hr = put_PatternColor(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1229)
inline _variant_t PPT::Interior::GetPatternColor ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_PatternColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1230)
inline void PPT::Interior::PutPatternColorIndex ( const _variant_t & RHS ) {
    HRESULT _hr = put_PatternColorIndex(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1231)
inline _variant_t PPT::Interior::GetPatternColorIndex ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_PatternColorIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1232)
inline long PPT::Interior::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1233)
inline IDispatchPtr PPT::Interior::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1234)
inline PPT::_ApplicationPtr PPT::Interior::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

//
// interface AxisTitle wrapper method implementations
//

#pragma implementation_key(1235)
inline void PPT::AxisTitle::PutCaption ( _bstr_t RHS ) {
    HRESULT _hr = put_Caption(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1236)
inline _bstr_t PPT::AxisTitle::GetCaption ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1237)
inline PPT::ChartCharactersPtr PPT::AxisTitle::GetCharacters ( const _variant_t & Start, const _variant_t & Length ) {
    struct ChartCharacters * _result = 0;
    HRESULT _hr = get_Characters(Start, Length, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartCharactersPtr(_result, false);
}

#pragma implementation_key(1238)
inline PPT::ChartFontPtr PPT::AxisTitle::GetFont ( ) {
    struct ChartFont * _result = 0;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFontPtr(_result, false);
}

#pragma implementation_key(1239)
inline void PPT::AxisTitle::PutHorizontalAlignment ( const _variant_t & RHS ) {
    HRESULT _hr = put_HorizontalAlignment(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1240)
inline _variant_t PPT::AxisTitle::GetHorizontalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_HorizontalAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1241)
inline double PPT::AxisTitle::GetLeft ( ) {
    double _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1242)
inline void PPT::AxisTitle::PutLeft ( double RHS ) {
    HRESULT _hr = put_Left(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1243)
inline void PPT::AxisTitle::PutOrientation ( const _variant_t & RHS ) {
    HRESULT _hr = put_Orientation(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1244)
inline _variant_t PPT::AxisTitle::GetOrientation ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Orientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1245)
inline VARIANT_BOOL PPT::AxisTitle::GetShadow ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Shadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1246)
inline void PPT::AxisTitle::PutShadow ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Shadow(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1247)
inline void PPT::AxisTitle::PutText ( _bstr_t RHS ) {
    HRESULT _hr = put_Text(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1248)
inline _bstr_t PPT::AxisTitle::GetText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1249)
inline double PPT::AxisTitle::GetTop ( ) {
    double _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1250)
inline void PPT::AxisTitle::PutTop ( double RHS ) {
    HRESULT _hr = put_Top(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1251)
inline void PPT::AxisTitle::PutVerticalAlignment ( const _variant_t & RHS ) {
    HRESULT _hr = put_VerticalAlignment(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1252)
inline _variant_t PPT::AxisTitle::GetVerticalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_VerticalAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1253)
inline void PPT::AxisTitle::PutAutoScaleFont ( const _variant_t & RHS ) {
    HRESULT _hr = put_AutoScaleFont(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1254)
inline _variant_t PPT::AxisTitle::GetAutoScaleFont ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_AutoScaleFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1255)
inline PPT::InteriorPtr PPT::AxisTitle::GetInterior ( ) {
    struct Interior * _result = 0;
    HRESULT _hr = get_Interior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return InteriorPtr(_result, false);
}

#pragma implementation_key(1256)
inline PPT::ChartFillFormatPtr PPT::AxisTitle::GetFill ( ) {
    struct ChartFillFormat * _result = 0;
    HRESULT _hr = get_Fill(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFillFormatPtr(_result, false);
}

#pragma implementation_key(1257)
inline _variant_t PPT::AxisTitle::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1258)
inline PPT::ChartBorderPtr PPT::AxisTitle::GetBorder ( ) {
    struct ChartBorder * _result = 0;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartBorderPtr(_result, false);
}

#pragma implementation_key(1259)
inline _bstr_t PPT::AxisTitle::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1260)
inline IDispatchPtr PPT::AxisTitle::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1261)
inline _variant_t PPT::AxisTitle::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1262)
inline VARIANT_BOOL PPT::AxisTitle::GetIncludeInLayout ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IncludeInLayout(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1263)
inline void PPT::AxisTitle::PutIncludeInLayout ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_IncludeInLayout(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1264)
inline enum PPT::XlChartElementPosition PPT::AxisTitle::GetPosition ( ) {
    enum XlChartElementPosition _result;
    HRESULT _hr = get_Position(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1265)
inline void PPT::AxisTitle::PutPosition ( enum XlChartElementPosition RHS ) {
    HRESULT _hr = put_Position(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1266)
inline PPT::ChartFormatPtr PPT::AxisTitle::GetFormat ( ) {
    struct ChartFormat * _result = 0;
    HRESULT _hr = get_Format(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFormatPtr(_result, false);
}

#pragma implementation_key(1267)
inline long PPT::AxisTitle::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1268)
inline PPT::_ApplicationPtr PPT::AxisTitle::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1269)
inline long PPT::AxisTitle::GetReadingOrder ( ) {
    long _result = 0;
    HRESULT _hr = get_ReadingOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1270)
inline void PPT::AxisTitle::PutReadingOrder ( long RHS ) {
    HRESULT _hr = put_ReadingOrder(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1271)
inline double PPT::AxisTitle::GetHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1272)
inline double PPT::AxisTitle::GetWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1273)
inline void PPT::AxisTitle::PutFormula ( _bstr_t pbstr ) {
    HRESULT _hr = put_Formula(pbstr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1274)
inline _bstr_t PPT::AxisTitle::GetFormula ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Formula(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1275)
inline void PPT::AxisTitle::PutFormulaR1C1 ( _bstr_t pbstr ) {
    HRESULT _hr = put_FormulaR1C1(pbstr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1276)
inline _bstr_t PPT::AxisTitle::GetFormulaR1C1 ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FormulaR1C1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1277)
inline void PPT::AxisTitle::PutFormulaLocal ( _bstr_t pbstr ) {
    HRESULT _hr = put_FormulaLocal(pbstr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1278)
inline _bstr_t PPT::AxisTitle::GetFormulaLocal ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FormulaLocal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1279)
inline void PPT::AxisTitle::PutFormulaR1C1Local ( _bstr_t pbstr ) {
    HRESULT _hr = put_FormulaR1C1Local(pbstr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1280)
inline _bstr_t PPT::AxisTitle::GetFormulaR1C1Local ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FormulaR1C1Local(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1281)
inline _variant_t PPT::AxisTitle::GetProperty ( _bstr_t Id ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetProperty(Id, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1282)
inline HRESULT PPT::AxisTitle::SetProperty ( _bstr_t Id, const _variant_t & Value ) {
    HRESULT _hr = raw_SetProperty(Id, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface ChartArea wrapper method implementations
//

#pragma implementation_key(1283)
inline _bstr_t PPT::ChartArea::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1284)
inline _variant_t PPT::ChartArea::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1285)
inline IDispatchPtr PPT::ChartArea::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1286)
inline PPT::ChartBorderPtr PPT::ChartArea::GetBorder ( ) {
    struct ChartBorder * _result = 0;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartBorderPtr(_result, false);
}

#pragma implementation_key(1287)
inline _variant_t PPT::ChartArea::Clear ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Clear(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1288)
inline _variant_t PPT::ChartArea::ClearContents ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_ClearContents(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1289)
inline _variant_t PPT::ChartArea::Copy ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Copy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1290)
inline PPT::ChartFontPtr PPT::ChartArea::GetFont ( ) {
    struct ChartFont * _result = 0;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFontPtr(_result, false);
}

#pragma implementation_key(1291)
inline VARIANT_BOOL PPT::ChartArea::GetShadow ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Shadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1292)
inline void PPT::ChartArea::PutShadow ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Shadow(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1293)
inline _variant_t PPT::ChartArea::ClearFormats ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_ClearFormats(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1294)
inline double PPT::ChartArea::GetHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1295)
inline void PPT::ChartArea::PutHeight ( double RHS ) {
    HRESULT _hr = put_Height(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1296)
inline PPT::InteriorPtr PPT::ChartArea::GetInterior ( ) {
    struct Interior * _result = 0;
    HRESULT _hr = get_Interior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return InteriorPtr(_result, false);
}

#pragma implementation_key(1297)
inline PPT::ChartFillFormatPtr PPT::ChartArea::GetFill ( ) {
    struct ChartFillFormat * _result = 0;
    HRESULT _hr = get_Fill(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFillFormatPtr(_result, false);
}

#pragma implementation_key(1298)
inline double PPT::ChartArea::GetLeft ( ) {
    double _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1299)
inline void PPT::ChartArea::PutLeft ( double RHS ) {
    HRESULT _hr = put_Left(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1300)
inline double PPT::ChartArea::GetTop ( ) {
    double _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1301)
inline void PPT::ChartArea::PutTop ( double RHS ) {
    HRESULT _hr = put_Top(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1302)
inline double PPT::ChartArea::GetWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1303)
inline void PPT::ChartArea::PutWidth ( double RHS ) {
    HRESULT _hr = put_Width(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1304)
inline _variant_t PPT::ChartArea::GetAutoScaleFont ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_AutoScaleFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1305)
inline void PPT::ChartArea::PutAutoScaleFont ( const _variant_t & pvar ) {
    HRESULT _hr = put_AutoScaleFont(pvar);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1306)
inline PPT::ChartFormatPtr PPT::ChartArea::GetFormat ( ) {
    struct ChartFormat * _result = 0;
    HRESULT _hr = get_Format(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFormatPtr(_result, false);
}

#pragma implementation_key(1307)
inline long PPT::ChartArea::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1308)
inline PPT::_ApplicationPtr PPT::ChartArea::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

//
// interface ChartTitle wrapper method implementations
//

#pragma implementation_key(1309)
inline void PPT::ChartTitle::PutCaption ( _bstr_t RHS ) {
    HRESULT _hr = put_Caption(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1310)
inline _bstr_t PPT::ChartTitle::GetCaption ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1311)
inline PPT::ChartCharactersPtr PPT::ChartTitle::GetCharacters ( const _variant_t & Start, const _variant_t & Length ) {
    struct ChartCharacters * _result = 0;
    HRESULT _hr = get_Characters(Start, Length, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartCharactersPtr(_result, false);
}

#pragma implementation_key(1312)
inline PPT::ChartFontPtr PPT::ChartTitle::GetFont ( ) {
    struct ChartFont * _result = 0;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFontPtr(_result, false);
}

#pragma implementation_key(1313)
inline void PPT::ChartTitle::PutHorizontalAlignment ( const _variant_t & RHS ) {
    HRESULT _hr = put_HorizontalAlignment(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1314)
inline _variant_t PPT::ChartTitle::GetHorizontalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_HorizontalAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1315)
inline double PPT::ChartTitle::GetLeft ( ) {
    double _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1316)
inline void PPT::ChartTitle::PutLeft ( double RHS ) {
    HRESULT _hr = put_Left(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1317)
inline void PPT::ChartTitle::PutOrientation ( const _variant_t & RHS ) {
    HRESULT _hr = put_Orientation(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1318)
inline _variant_t PPT::ChartTitle::GetOrientation ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Orientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1319)
inline VARIANT_BOOL PPT::ChartTitle::GetShadow ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Shadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1320)
inline void PPT::ChartTitle::PutShadow ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Shadow(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1321)
inline void PPT::ChartTitle::PutText ( _bstr_t RHS ) {
    HRESULT _hr = put_Text(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1322)
inline _bstr_t PPT::ChartTitle::GetText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1323)
inline double PPT::ChartTitle::GetTop ( ) {
    double _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1324)
inline void PPT::ChartTitle::PutTop ( double RHS ) {
    HRESULT _hr = put_Top(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1325)
inline void PPT::ChartTitle::PutVerticalAlignment ( const _variant_t & RHS ) {
    HRESULT _hr = put_VerticalAlignment(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1326)
inline _variant_t PPT::ChartTitle::GetVerticalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_VerticalAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1327)
inline void PPT::ChartTitle::PutAutoScaleFont ( const _variant_t & RHS ) {
    HRESULT _hr = put_AutoScaleFont(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1328)
inline _variant_t PPT::ChartTitle::GetAutoScaleFont ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_AutoScaleFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1329)
inline PPT::InteriorPtr PPT::ChartTitle::GetInterior ( ) {
    struct Interior * _result = 0;
    HRESULT _hr = get_Interior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return InteriorPtr(_result, false);
}

#pragma implementation_key(1330)
inline PPT::ChartFillFormatPtr PPT::ChartTitle::GetFill ( ) {
    struct ChartFillFormat * _result = 0;
    HRESULT _hr = get_Fill(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFillFormatPtr(_result, false);
}

#pragma implementation_key(1331)
inline _variant_t PPT::ChartTitle::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1332)
inline PPT::ChartBorderPtr PPT::ChartTitle::GetBorder ( ) {
    struct ChartBorder * _result = 0;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartBorderPtr(_result, false);
}

#pragma implementation_key(1333)
inline _bstr_t PPT::ChartTitle::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1334)
inline IDispatchPtr PPT::ChartTitle::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1335)
inline _variant_t PPT::ChartTitle::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1336)
inline VARIANT_BOOL PPT::ChartTitle::GetIncludeInLayout ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IncludeInLayout(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1337)
inline void PPT::ChartTitle::PutIncludeInLayout ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_IncludeInLayout(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1338)
inline enum PPT::XlChartElementPosition PPT::ChartTitle::GetPosition ( ) {
    enum XlChartElementPosition _result;
    HRESULT _hr = get_Position(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1339)
inline void PPT::ChartTitle::PutPosition ( enum XlChartElementPosition RHS ) {
    HRESULT _hr = put_Position(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1340)
inline PPT::ChartFormatPtr PPT::ChartTitle::GetFormat ( ) {
    struct ChartFormat * _result = 0;
    HRESULT _hr = get_Format(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFormatPtr(_result, false);
}

#pragma implementation_key(1341)
inline long PPT::ChartTitle::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1342)
inline PPT::_ApplicationPtr PPT::ChartTitle::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1343)
inline long PPT::ChartTitle::GetReadingOrder ( ) {
    long _result = 0;
    HRESULT _hr = get_ReadingOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1344)
inline void PPT::ChartTitle::PutReadingOrder ( long RHS ) {
    HRESULT _hr = put_ReadingOrder(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1345)
inline double PPT::ChartTitle::GetHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1346)
inline double PPT::ChartTitle::GetWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1347)
inline void PPT::ChartTitle::PutFormula ( _bstr_t pbstr ) {
    HRESULT _hr = put_Formula(pbstr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1348)
inline _bstr_t PPT::ChartTitle::GetFormula ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Formula(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1349)
inline void PPT::ChartTitle::PutFormulaR1C1 ( _bstr_t pbstr ) {
    HRESULT _hr = put_FormulaR1C1(pbstr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1350)
inline _bstr_t PPT::ChartTitle::GetFormulaR1C1 ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FormulaR1C1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1351)
inline void PPT::ChartTitle::PutFormulaLocal ( _bstr_t pbstr ) {
    HRESULT _hr = put_FormulaLocal(pbstr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1352)
inline _bstr_t PPT::ChartTitle::GetFormulaLocal ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FormulaLocal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1353)
inline void PPT::ChartTitle::PutFormulaR1C1Local ( _bstr_t pbstr ) {
    HRESULT _hr = put_FormulaR1C1Local(pbstr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1354)
inline _bstr_t PPT::ChartTitle::GetFormulaR1C1Local ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FormulaR1C1Local(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1355)
inline _variant_t PPT::ChartTitle::GetProperty ( _bstr_t Id ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetProperty(Id, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1356)
inline HRESULT PPT::ChartTitle::SetProperty ( _bstr_t Id, const _variant_t & Value ) {
    HRESULT _hr = raw_SetProperty(Id, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface DataLabel wrapper method implementations
//

#pragma implementation_key(1357)
inline IDispatchPtr PPT::DataLabel::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1358)
inline _bstr_t PPT::DataLabel::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1359)
inline _variant_t PPT::DataLabel::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1360)
inline PPT::ChartBorderPtr PPT::DataLabel::GetBorder ( ) {
    struct ChartBorder * _result = 0;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartBorderPtr(_result, false);
}

#pragma implementation_key(1361)
inline _variant_t PPT::DataLabel::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1362)
inline PPT::InteriorPtr PPT::DataLabel::GetInterior ( ) {
    struct Interior * _result = 0;
    HRESULT _hr = get_Interior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return InteriorPtr(_result, false);
}

#pragma implementation_key(1363)
inline PPT::ChartFillFormatPtr PPT::DataLabel::GetFill ( ) {
    struct ChartFillFormat * _result = 0;
    HRESULT _hr = get_Fill(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFillFormatPtr(_result, false);
}

#pragma implementation_key(1364)
inline _bstr_t PPT::DataLabel::GetCaption ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1365)
inline void PPT::DataLabel::PutCaption ( _bstr_t RHS ) {
    HRESULT _hr = put_Caption(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1366)
inline PPT::ChartCharactersPtr PPT::DataLabel::GetCharacters ( const _variant_t & Start, const _variant_t & Length ) {
    struct ChartCharacters * _result = 0;
    HRESULT _hr = get_Characters(Start, Length, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartCharactersPtr(_result, false);
}

#pragma implementation_key(1367)
inline PPT::ChartFontPtr PPT::DataLabel::GetFont ( ) {
    struct ChartFont * _result = 0;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFontPtr(_result, false);
}

#pragma implementation_key(1368)
inline _variant_t PPT::DataLabel::GetHorizontalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_HorizontalAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1369)
inline void PPT::DataLabel::PutHorizontalAlignment ( const _variant_t & RHS ) {
    HRESULT _hr = put_HorizontalAlignment(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1370)
inline double PPT::DataLabel::GetLeft ( ) {
    double _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1371)
inline void PPT::DataLabel::PutLeft ( double RHS ) {
    HRESULT _hr = put_Left(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1372)
inline _variant_t PPT::DataLabel::GetOrientation ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Orientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1373)
inline void PPT::DataLabel::PutOrientation ( const _variant_t & RHS ) {
    HRESULT _hr = put_Orientation(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1374)
inline VARIANT_BOOL PPT::DataLabel::GetShadow ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Shadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1375)
inline void PPT::DataLabel::PutShadow ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Shadow(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1376)
inline _bstr_t PPT::DataLabel::GetText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1377)
inline void PPT::DataLabel::PutText ( _bstr_t RHS ) {
    HRESULT _hr = put_Text(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1378)
inline double PPT::DataLabel::GetTop ( ) {
    double _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1379)
inline void PPT::DataLabel::PutTop ( double RHS ) {
    HRESULT _hr = put_Top(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1380)
inline _variant_t PPT::DataLabel::GetVerticalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_VerticalAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1381)
inline void PPT::DataLabel::PutVerticalAlignment ( const _variant_t & RHS ) {
    HRESULT _hr = put_VerticalAlignment(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1382)
inline long PPT::DataLabel::GetReadingOrder ( ) {
    long _result = 0;
    HRESULT _hr = get_ReadingOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1383)
inline void PPT::DataLabel::PutReadingOrder ( long RHS ) {
    HRESULT _hr = put_ReadingOrder(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1384)
inline _variant_t PPT::DataLabel::GetAutoScaleFont ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_AutoScaleFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1385)
inline void PPT::DataLabel::PutAutoScaleFont ( const _variant_t & RHS ) {
    HRESULT _hr = put_AutoScaleFont(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1386)
inline VARIANT_BOOL PPT::DataLabel::GetAutoText ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1387)
inline void PPT::DataLabel::PutAutoText ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_AutoText(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1388)
inline _bstr_t PPT::DataLabel::GetNumberFormat ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_NumberFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1389)
inline void PPT::DataLabel::PutNumberFormat ( _bstr_t RHS ) {
    HRESULT _hr = put_NumberFormat(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1390)
inline VARIANT_BOOL PPT::DataLabel::GetNumberFormatLinked ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_NumberFormatLinked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1391)
inline void PPT::DataLabel::PutNumberFormatLinked ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_NumberFormatLinked(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1392)
inline _variant_t PPT::DataLabel::GetNumberFormatLocal ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_NumberFormatLocal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1393)
inline void PPT::DataLabel::PutNumberFormatLocal ( const _variant_t & RHS ) {
    HRESULT _hr = put_NumberFormatLocal(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1394)
inline VARIANT_BOOL PPT::DataLabel::GetShowLegendKey ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowLegendKey(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1395)
inline void PPT::DataLabel::PutShowLegendKey ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ShowLegendKey(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1396)
inline _variant_t PPT::DataLabel::GetType ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1397)
inline void PPT::DataLabel::PutType ( const _variant_t & RHS ) {
    HRESULT _hr = put_Type(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1398)
inline enum PPT::XlDataLabelPosition PPT::DataLabel::GetPosition ( ) {
    enum XlDataLabelPosition _result;
    HRESULT _hr = get_Position(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1399)
inline void PPT::DataLabel::PutPosition ( enum XlDataLabelPosition RHS ) {
    HRESULT _hr = put_Position(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1400)
inline VARIANT_BOOL PPT::DataLabel::GetShowSeriesName ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowSeriesName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1401)
inline void PPT::DataLabel::PutShowSeriesName ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ShowSeriesName(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1402)
inline VARIANT_BOOL PPT::DataLabel::GetShowCategoryName ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowCategoryName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1403)
inline void PPT::DataLabel::PutShowCategoryName ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ShowCategoryName(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1404)
inline VARIANT_BOOL PPT::DataLabel::GetShowValue ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1405)
inline void PPT::DataLabel::PutShowValue ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ShowValue(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1406)
inline VARIANT_BOOL PPT::DataLabel::GetShowPercentage ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowPercentage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1407)
inline void PPT::DataLabel::PutShowPercentage ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ShowPercentage(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1408)
inline VARIANT_BOOL PPT::DataLabel::GetShowBubbleSize ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowBubbleSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1409)
inline void PPT::DataLabel::PutShowBubbleSize ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ShowBubbleSize(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1410)
inline _variant_t PPT::DataLabel::GetSeparator ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Separator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1411)
inline void PPT::DataLabel::PutSeparator ( const _variant_t & RHS ) {
    HRESULT _hr = put_Separator(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1412)
inline PPT::ChartFormatPtr PPT::DataLabel::GetFormat ( ) {
    struct ChartFormat * _result = 0;
    HRESULT _hr = get_Format(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFormatPtr(_result, false);
}

#pragma implementation_key(1413)
inline long PPT::DataLabel::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1414)
inline PPT::_ApplicationPtr PPT::DataLabel::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1415)
inline double PPT::DataLabel::Get_Height ( ) {
    double _result = 0;
    HRESULT _hr = get__Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1416)
inline double PPT::DataLabel::Get_Width ( ) {
    double _result = 0;
    HRESULT _hr = get__Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1417)
inline void PPT::DataLabel::PutFormula ( _bstr_t pbstr ) {
    HRESULT _hr = put_Formula(pbstr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1418)
inline _bstr_t PPT::DataLabel::GetFormula ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Formula(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1419)
inline void PPT::DataLabel::PutFormulaR1C1 ( _bstr_t pbstr ) {
    HRESULT _hr = put_FormulaR1C1(pbstr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1420)
inline _bstr_t PPT::DataLabel::GetFormulaR1C1 ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FormulaR1C1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1421)
inline void PPT::DataLabel::PutFormulaLocal ( _bstr_t pbstr ) {
    HRESULT _hr = put_FormulaLocal(pbstr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1422)
inline _bstr_t PPT::DataLabel::GetFormulaLocal ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FormulaLocal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1423)
inline void PPT::DataLabel::PutFormulaR1C1Local ( _bstr_t pbstr ) {
    HRESULT _hr = put_FormulaR1C1Local(pbstr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1424)
inline _bstr_t PPT::DataLabel::GetFormulaR1C1Local ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FormulaR1C1Local(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1425)
inline VARIANT_BOOL PPT::DataLabel::GetShowRange ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1426)
inline void PPT::DataLabel::PutShowRange ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ShowRange(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1427)
inline double PPT::DataLabel::GetHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1428)
inline void PPT::DataLabel::PutHeight ( double Height ) {
    HRESULT _hr = put_Height(Height);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1429)
inline double PPT::DataLabel::GetWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1430)
inline void PPT::DataLabel::PutWidth ( double Width ) {
    HRESULT _hr = put_Width(Width);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1431)
inline _variant_t PPT::DataLabel::GetProperty ( _bstr_t Id ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetProperty(Id, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1432)
inline HRESULT PPT::DataLabel::SetProperty ( _bstr_t Id, const _variant_t & Value ) {
    HRESULT _hr = raw_SetProperty(Id, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface DataLabels wrapper method implementations
//

#pragma implementation_key(1433)
inline IDispatchPtr PPT::DataLabels::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1434)
inline _bstr_t PPT::DataLabels::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1435)
inline _variant_t PPT::DataLabels::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1436)
inline PPT::ChartBorderPtr PPT::DataLabels::GetBorder ( ) {
    struct ChartBorder * _result = 0;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartBorderPtr(_result, false);
}

#pragma implementation_key(1437)
inline _variant_t PPT::DataLabels::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1438)
inline PPT::InteriorPtr PPT::DataLabels::GetInterior ( ) {
    struct Interior * _result = 0;
    HRESULT _hr = get_Interior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return InteriorPtr(_result, false);
}

#pragma implementation_key(1439)
inline PPT::ChartFillFormatPtr PPT::DataLabels::GetFill ( ) {
    struct ChartFillFormat * _result = 0;
    HRESULT _hr = get_Fill(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFillFormatPtr(_result, false);
}

#pragma implementation_key(1440)
inline PPT::ChartFontPtr PPT::DataLabels::GetFont ( ) {
    struct ChartFont * _result = 0;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFontPtr(_result, false);
}

#pragma implementation_key(1441)
inline _variant_t PPT::DataLabels::GetHorizontalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_HorizontalAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1442)
inline void PPT::DataLabels::PutHorizontalAlignment ( const _variant_t & RHS ) {
    HRESULT _hr = put_HorizontalAlignment(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1443)
inline _variant_t PPT::DataLabels::GetOrientation ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Orientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1444)
inline void PPT::DataLabels::PutOrientation ( const _variant_t & RHS ) {
    HRESULT _hr = put_Orientation(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1445)
inline VARIANT_BOOL PPT::DataLabels::GetShadow ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Shadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1446)
inline void PPT::DataLabels::PutShadow ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Shadow(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1447)
inline _variant_t PPT::DataLabels::GetVerticalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_VerticalAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1448)
inline void PPT::DataLabels::PutVerticalAlignment ( const _variant_t & RHS ) {
    HRESULT _hr = put_VerticalAlignment(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1449)
inline long PPT::DataLabels::GetReadingOrder ( ) {
    long _result = 0;
    HRESULT _hr = get_ReadingOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1450)
inline void PPT::DataLabels::PutReadingOrder ( long RHS ) {
    HRESULT _hr = put_ReadingOrder(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1451)
inline _variant_t PPT::DataLabels::GetAutoScaleFont ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_AutoScaleFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1452)
inline void PPT::DataLabels::PutAutoScaleFont ( const _variant_t & RHS ) {
    HRESULT _hr = put_AutoScaleFont(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1453)
inline VARIANT_BOOL PPT::DataLabels::GetAutoText ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1454)
inline void PPT::DataLabels::PutAutoText ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_AutoText(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1455)
inline _bstr_t PPT::DataLabels::GetNumberFormat ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_NumberFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1456)
inline void PPT::DataLabels::PutNumberFormat ( _bstr_t RHS ) {
    HRESULT _hr = put_NumberFormat(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1457)
inline VARIANT_BOOL PPT::DataLabels::GetNumberFormatLinked ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_NumberFormatLinked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1458)
inline void PPT::DataLabels::PutNumberFormatLinked ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_NumberFormatLinked(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1459)
inline _variant_t PPT::DataLabels::GetNumberFormatLocal ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_NumberFormatLocal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1460)
inline void PPT::DataLabels::PutNumberFormatLocal ( const _variant_t & RHS ) {
    HRESULT _hr = put_NumberFormatLocal(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1461)
inline VARIANT_BOOL PPT::DataLabels::GetShowLegendKey ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowLegendKey(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1462)
inline void PPT::DataLabels::PutShowLegendKey ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ShowLegendKey(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1463)
inline _variant_t PPT::DataLabels::GetType ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1464)
inline void PPT::DataLabels::PutType ( const _variant_t & RHS ) {
    HRESULT _hr = put_Type(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1465)
inline enum PPT::XlDataLabelPosition PPT::DataLabels::GetPosition ( ) {
    enum XlDataLabelPosition _result;
    HRESULT _hr = get_Position(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1466)
inline void PPT::DataLabels::PutPosition ( enum XlDataLabelPosition RHS ) {
    HRESULT _hr = put_Position(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1467)
inline VARIANT_BOOL PPT::DataLabels::GetShowSeriesName ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowSeriesName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1468)
inline void PPT::DataLabels::PutShowSeriesName ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ShowSeriesName(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1469)
inline VARIANT_BOOL PPT::DataLabels::GetShowCategoryName ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowCategoryName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1470)
inline void PPT::DataLabels::PutShowCategoryName ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ShowCategoryName(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1471)
inline VARIANT_BOOL PPT::DataLabels::GetShowValue ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1472)
inline void PPT::DataLabels::PutShowValue ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ShowValue(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1473)
inline VARIANT_BOOL PPT::DataLabels::GetShowPercentage ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowPercentage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1474)
inline void PPT::DataLabels::PutShowPercentage ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ShowPercentage(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1475)
inline VARIANT_BOOL PPT::DataLabels::GetShowBubbleSize ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowBubbleSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1476)
inline void PPT::DataLabels::PutShowBubbleSize ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ShowBubbleSize(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1477)
inline _variant_t PPT::DataLabels::GetSeparator ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Separator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1478)
inline void PPT::DataLabels::PutSeparator ( const _variant_t & RHS ) {
    HRESULT _hr = put_Separator(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1479)
inline long PPT::DataLabels::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1480)
inline PPT::DataLabelPtr PPT::DataLabels::Item ( const _variant_t & Index ) {
    struct DataLabel * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DataLabelPtr(_result, false);
}

#pragma implementation_key(1481)
inline IUnknownPtr PPT::DataLabels::_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1482)
inline PPT::ChartFormatPtr PPT::DataLabels::GetFormat ( ) {
    struct ChartFormat * _result = 0;
    HRESULT _hr = get_Format(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFormatPtr(_result, false);
}

#pragma implementation_key(1483)
inline long PPT::DataLabels::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1484)
inline PPT::_ApplicationPtr PPT::DataLabels::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1485)
inline PPT::DataLabelPtr PPT::DataLabels::_Default ( const _variant_t & Index ) {
    struct DataLabel * _result = 0;
    HRESULT _hr = raw__Default(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DataLabelPtr(_result, false);
}

#pragma implementation_key(1486)
inline HRESULT PPT::DataLabels::Propagate ( const _variant_t & Index ) {
    HRESULT _hr = raw_Propagate(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1487)
inline VARIANT_BOOL PPT::DataLabels::GetShowRange ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1488)
inline void PPT::DataLabels::PutShowRange ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ShowRange(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1489)
inline _variant_t PPT::DataLabels::GetProperty ( _bstr_t Id ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetProperty(Id, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1490)
inline HRESULT PPT::DataLabels::SetProperty ( _bstr_t Id, const _variant_t & Value ) {
    HRESULT _hr = raw_SetProperty(Id, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface DisplayUnitLabel wrapper method implementations
//

#pragma implementation_key(1491)
inline void PPT::DisplayUnitLabel::PutCaption ( _bstr_t RHS ) {
    HRESULT _hr = put_Caption(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1492)
inline _bstr_t PPT::DisplayUnitLabel::GetCaption ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1493)
inline PPT::ChartCharactersPtr PPT::DisplayUnitLabel::GetCharacters ( const _variant_t & Start, const _variant_t & Length ) {
    struct ChartCharacters * _result = 0;
    HRESULT _hr = get_Characters(Start, Length, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartCharactersPtr(_result, false);
}

#pragma implementation_key(1494)
inline PPT::ChartFontPtr PPT::DisplayUnitLabel::GetFont ( ) {
    struct ChartFont * _result = 0;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFontPtr(_result, false);
}

#pragma implementation_key(1495)
inline void PPT::DisplayUnitLabel::PutHorizontalAlignment ( const _variant_t & RHS ) {
    HRESULT _hr = put_HorizontalAlignment(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1496)
inline _variant_t PPT::DisplayUnitLabel::GetHorizontalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_HorizontalAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1497)
inline double PPT::DisplayUnitLabel::GetLeft ( ) {
    double _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1498)
inline void PPT::DisplayUnitLabel::PutLeft ( double RHS ) {
    HRESULT _hr = put_Left(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1499)
inline void PPT::DisplayUnitLabel::PutOrientation ( const _variant_t & RHS ) {
    HRESULT _hr = put_Orientation(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1500)
inline _variant_t PPT::DisplayUnitLabel::GetOrientation ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Orientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1501)
inline VARIANT_BOOL PPT::DisplayUnitLabel::GetShadow ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Shadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1502)
inline void PPT::DisplayUnitLabel::PutShadow ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Shadow(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1503)
inline void PPT::DisplayUnitLabel::PutText ( _bstr_t RHS ) {
    HRESULT _hr = put_Text(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1504)
inline _bstr_t PPT::DisplayUnitLabel::GetText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1505)
inline double PPT::DisplayUnitLabel::GetTop ( ) {
    double _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1506)
inline void PPT::DisplayUnitLabel::PutTop ( double RHS ) {
    HRESULT _hr = put_Top(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1507)
inline void PPT::DisplayUnitLabel::PutVerticalAlignment ( const _variant_t & RHS ) {
    HRESULT _hr = put_VerticalAlignment(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1508)
inline _variant_t PPT::DisplayUnitLabel::GetVerticalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_VerticalAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1509)
inline void PPT::DisplayUnitLabel::PutAutoScaleFont ( const _variant_t & RHS ) {
    HRESULT _hr = put_AutoScaleFont(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1510)
inline _variant_t PPT::DisplayUnitLabel::GetAutoScaleFont ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_AutoScaleFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1511)
inline PPT::InteriorPtr PPT::DisplayUnitLabel::GetInterior ( ) {
    struct Interior * _result = 0;
    HRESULT _hr = get_Interior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return InteriorPtr(_result, false);
}

#pragma implementation_key(1512)
inline PPT::ChartFillFormatPtr PPT::DisplayUnitLabel::GetFill ( ) {
    struct ChartFillFormat * _result = 0;
    HRESULT _hr = get_Fill(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFillFormatPtr(_result, false);
}

#pragma implementation_key(1513)
inline _variant_t PPT::DisplayUnitLabel::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1514)
inline PPT::ChartBorderPtr PPT::DisplayUnitLabel::GetBorder ( ) {
    struct ChartBorder * _result = 0;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartBorderPtr(_result, false);
}

#pragma implementation_key(1515)
inline _bstr_t PPT::DisplayUnitLabel::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1516)
inline IDispatchPtr PPT::DisplayUnitLabel::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1517)
inline _variant_t PPT::DisplayUnitLabel::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1518)
inline enum PPT::XlChartElementPosition PPT::DisplayUnitLabel::GetPosition ( ) {
    enum XlChartElementPosition _result;
    HRESULT _hr = get_Position(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1519)
inline void PPT::DisplayUnitLabel::PutPosition ( enum XlChartElementPosition RHS ) {
    HRESULT _hr = put_Position(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1520)
inline PPT::ChartFormatPtr PPT::DisplayUnitLabel::GetFormat ( ) {
    struct ChartFormat * _result = 0;
    HRESULT _hr = get_Format(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFormatPtr(_result, false);
}

#pragma implementation_key(1521)
inline long PPT::DisplayUnitLabel::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1522)
inline PPT::_ApplicationPtr PPT::DisplayUnitLabel::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1523)
inline long PPT::DisplayUnitLabel::GetReadingOrder ( ) {
    long _result = 0;
    HRESULT _hr = get_ReadingOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1524)
inline void PPT::DisplayUnitLabel::PutReadingOrder ( long RHS ) {
    HRESULT _hr = put_ReadingOrder(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1525)
inline double PPT::DisplayUnitLabel::GetHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1526)
inline double PPT::DisplayUnitLabel::GetWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1527)
inline void PPT::DisplayUnitLabel::PutFormula ( _bstr_t pbstr ) {
    HRESULT _hr = put_Formula(pbstr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1528)
inline _bstr_t PPT::DisplayUnitLabel::GetFormula ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Formula(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1529)
inline void PPT::DisplayUnitLabel::PutFormulaR1C1 ( _bstr_t pbstr ) {
    HRESULT _hr = put_FormulaR1C1(pbstr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1530)
inline _bstr_t PPT::DisplayUnitLabel::GetFormulaR1C1 ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FormulaR1C1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1531)
inline void PPT::DisplayUnitLabel::PutFormulaLocal ( _bstr_t pbstr ) {
    HRESULT _hr = put_FormulaLocal(pbstr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1532)
inline _bstr_t PPT::DisplayUnitLabel::GetFormulaLocal ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FormulaLocal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1533)
inline void PPT::DisplayUnitLabel::PutFormulaR1C1Local ( _bstr_t pbstr ) {
    HRESULT _hr = put_FormulaR1C1Local(pbstr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1534)
inline _bstr_t PPT::DisplayUnitLabel::GetFormulaR1C1Local ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FormulaR1C1Local(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1535)
inline _variant_t PPT::DisplayUnitLabel::GetProperty ( _bstr_t Id ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetProperty(Id, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1536)
inline HRESULT PPT::DisplayUnitLabel::SetProperty ( _bstr_t Id, const _variant_t & Value ) {
    HRESULT _hr = raw_SetProperty(Id, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface DownBars wrapper method implementations
//

#pragma implementation_key(1537)
inline _bstr_t PPT::DownBars::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1538)
inline _variant_t PPT::DownBars::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1539)
inline IDispatchPtr PPT::DownBars::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1540)
inline PPT::ChartBorderPtr PPT::DownBars::GetBorder ( ) {
    struct ChartBorder * _result = 0;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartBorderPtr(_result, false);
}

#pragma implementation_key(1541)
inline _variant_t PPT::DownBars::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1542)
inline PPT::InteriorPtr PPT::DownBars::GetInterior ( ) {
    struct Interior * _result = 0;
    HRESULT _hr = get_Interior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return InteriorPtr(_result, false);
}

#pragma implementation_key(1543)
inline PPT::ChartFillFormatPtr PPT::DownBars::GetFill ( ) {
    struct ChartFillFormat * _result = 0;
    HRESULT _hr = get_Fill(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFillFormatPtr(_result, false);
}

#pragma implementation_key(1544)
inline PPT::ChartFormatPtr PPT::DownBars::GetFormat ( ) {
    struct ChartFormat * _result = 0;
    HRESULT _hr = get_Format(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFormatPtr(_result, false);
}

#pragma implementation_key(1545)
inline long PPT::DownBars::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1546)
inline PPT::_ApplicationPtr PPT::DownBars::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1547)
inline _variant_t PPT::DownBars::GetProperty ( _bstr_t Id ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetProperty(Id, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1548)
inline HRESULT PPT::DownBars::SetProperty ( _bstr_t Id, const _variant_t & Value ) {
    HRESULT _hr = raw_SetProperty(Id, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface Floor wrapper method implementations
//

#pragma implementation_key(1549)
inline _bstr_t PPT::Floor::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1550)
inline _variant_t PPT::Floor::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1551)
inline IDispatchPtr PPT::Floor::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1552)
inline PPT::ChartBorderPtr PPT::Floor::GetBorder ( ) {
    struct ChartBorder * _result = 0;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartBorderPtr(_result, false);
}

#pragma implementation_key(1553)
inline _variant_t PPT::Floor::ClearFormats ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_ClearFormats(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1554)
inline PPT::InteriorPtr PPT::Floor::GetInterior ( ) {
    struct Interior * _result = 0;
    HRESULT _hr = get_Interior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return InteriorPtr(_result, false);
}

#pragma implementation_key(1555)
inline PPT::ChartFillFormatPtr PPT::Floor::GetFill ( ) {
    struct ChartFillFormat * _result = 0;
    HRESULT _hr = get_Fill(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFillFormatPtr(_result, false);
}

#pragma implementation_key(1556)
inline _variant_t PPT::Floor::GetPictureType ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_PictureType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1557)
inline void PPT::Floor::PutPictureType ( const _variant_t & RHS ) {
    HRESULT _hr = put_PictureType(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1558)
inline HRESULT PPT::Floor::Paste ( ) {
    HRESULT _hr = raw_Paste();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1559)
inline long PPT::Floor::GetThickness ( ) {
    long _result = 0;
    HRESULT _hr = get_Thickness(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1560)
inline void PPT::Floor::PutThickness ( long RHS ) {
    HRESULT _hr = put_Thickness(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1561)
inline PPT::ChartFormatPtr PPT::Floor::GetFormat ( ) {
    struct ChartFormat * _result = 0;
    HRESULT _hr = get_Format(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFormatPtr(_result, false);
}

#pragma implementation_key(1562)
inline long PPT::Floor::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1563)
inline PPT::_ApplicationPtr PPT::Floor::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

//
// interface LeaderLines wrapper method implementations
//

#pragma implementation_key(1564)
inline HRESULT PPT::LeaderLines::Select ( ) {
    HRESULT _hr = raw_Select();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1565)
inline PPT::ChartBorderPtr PPT::LeaderLines::GetBorder ( ) {
    struct ChartBorder * _result = 0;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartBorderPtr(_result, false);
}

#pragma implementation_key(1566)
inline HRESULT PPT::LeaderLines::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1567)
inline PPT::ChartFormatPtr PPT::LeaderLines::GetFormat ( ) {
    struct ChartFormat * _result = 0;
    HRESULT _hr = get_Format(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFormatPtr(_result, false);
}

#pragma implementation_key(1568)
inline long PPT::LeaderLines::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1569)
inline IDispatchPtr PPT::LeaderLines::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1570)
inline PPT::_ApplicationPtr PPT::LeaderLines::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

//
// interface Legend wrapper method implementations
//

#pragma implementation_key(1571)
inline IDispatchPtr PPT::Legend::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1572)
inline _bstr_t PPT::Legend::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1573)
inline _variant_t PPT::Legend::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1574)
inline PPT::ChartBorderPtr PPT::Legend::GetBorder ( ) {
    struct ChartBorder * _result = 0;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartBorderPtr(_result, false);
}

#pragma implementation_key(1575)
inline _variant_t PPT::Legend::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1576)
inline PPT::ChartFontPtr PPT::Legend::GetFont ( ) {
    struct ChartFont * _result = 0;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFontPtr(_result, false);
}

#pragma implementation_key(1577)
inline IDispatchPtr PPT::Legend::LegendEntries ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_LegendEntries(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1578)
inline enum PPT::XlLegendPosition PPT::Legend::GetPosition ( ) {
    enum XlLegendPosition _result;
    HRESULT _hr = get_Position(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1579)
inline void PPT::Legend::PutPosition ( enum XlLegendPosition RHS ) {
    HRESULT _hr = put_Position(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1580)
inline VARIANT_BOOL PPT::Legend::GetShadow ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Shadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1581)
inline void PPT::Legend::PutShadow ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Shadow(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1582)
inline _variant_t PPT::Legend::Clear ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Clear(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1583)
inline double PPT::Legend::GetHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1584)
inline void PPT::Legend::PutHeight ( double RHS ) {
    HRESULT _hr = put_Height(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1585)
inline PPT::InteriorPtr PPT::Legend::GetInterior ( ) {
    struct Interior * _result = 0;
    HRESULT _hr = get_Interior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return InteriorPtr(_result, false);
}

#pragma implementation_key(1586)
inline PPT::ChartFillFormatPtr PPT::Legend::GetFill ( ) {
    struct ChartFillFormat * _result = 0;
    HRESULT _hr = get_Fill(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFillFormatPtr(_result, false);
}

#pragma implementation_key(1587)
inline double PPT::Legend::GetLeft ( ) {
    double _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1588)
inline void PPT::Legend::PutLeft ( double RHS ) {
    HRESULT _hr = put_Left(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1589)
inline double PPT::Legend::GetTop ( ) {
    double _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1590)
inline void PPT::Legend::PutTop ( double RHS ) {
    HRESULT _hr = put_Top(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1591)
inline double PPT::Legend::GetWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1592)
inline void PPT::Legend::PutWidth ( double RHS ) {
    HRESULT _hr = put_Width(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1593)
inline _variant_t PPT::Legend::GetAutoScaleFont ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_AutoScaleFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1594)
inline void PPT::Legend::PutAutoScaleFont ( const _variant_t & RHS ) {
    HRESULT _hr = put_AutoScaleFont(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1595)
inline VARIANT_BOOL PPT::Legend::GetIncludeInLayout ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IncludeInLayout(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1596)
inline void PPT::Legend::PutIncludeInLayout ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_IncludeInLayout(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1597)
inline PPT::ChartFormatPtr PPT::Legend::GetFormat ( ) {
    struct ChartFormat * _result = 0;
    HRESULT _hr = get_Format(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFormatPtr(_result, false);
}

#pragma implementation_key(1598)
inline long PPT::Legend::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1599)
inline PPT::_ApplicationPtr PPT::Legend::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1600)
inline _variant_t PPT::Legend::GetProperty ( _bstr_t Id ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetProperty(Id, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1601)
inline HRESULT PPT::Legend::SetProperty ( _bstr_t Id, const _variant_t & Value ) {
    HRESULT _hr = raw_SetProperty(Id, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface LegendKey wrapper method implementations
//

#pragma implementation_key(1602)
inline IDispatchPtr PPT::LegendKey::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1603)
inline PPT::ChartBorderPtr PPT::LegendKey::GetBorder ( ) {
    struct ChartBorder * _result = 0;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartBorderPtr(_result, false);
}

#pragma implementation_key(1604)
inline _variant_t PPT::LegendKey::ClearFormats ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_ClearFormats(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1605)
inline _variant_t PPT::LegendKey::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1606)
inline PPT::InteriorPtr PPT::LegendKey::GetInterior ( ) {
    struct Interior * _result = 0;
    HRESULT _hr = get_Interior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return InteriorPtr(_result, false);
}

#pragma implementation_key(1607)
inline PPT::ChartFillFormatPtr PPT::LegendKey::GetFill ( ) {
    struct ChartFillFormat * _result = 0;
    HRESULT _hr = get_Fill(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFillFormatPtr(_result, false);
}

#pragma implementation_key(1608)
inline VARIANT_BOOL PPT::LegendKey::GetInvertIfNegative ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_InvertIfNegative(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1609)
inline void PPT::LegendKey::PutInvertIfNegative ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_InvertIfNegative(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1610)
inline long PPT::LegendKey::GetMarkerBackgroundColor ( ) {
    long _result = 0;
    HRESULT _hr = get_MarkerBackgroundColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1611)
inline void PPT::LegendKey::PutMarkerBackgroundColor ( long RHS ) {
    HRESULT _hr = put_MarkerBackgroundColor(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1612)
inline enum PPT::XlColorIndex PPT::LegendKey::GetMarkerBackgroundColorIndex ( ) {
    enum XlColorIndex _result;
    HRESULT _hr = get_MarkerBackgroundColorIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1613)
inline void PPT::LegendKey::PutMarkerBackgroundColorIndex ( enum XlColorIndex RHS ) {
    HRESULT _hr = put_MarkerBackgroundColorIndex(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1614)
inline long PPT::LegendKey::GetMarkerForegroundColor ( ) {
    long _result = 0;
    HRESULT _hr = get_MarkerForegroundColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1615)
inline void PPT::LegendKey::PutMarkerForegroundColor ( long RHS ) {
    HRESULT _hr = put_MarkerForegroundColor(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1616)
inline enum PPT::XlColorIndex PPT::LegendKey::GetMarkerForegroundColorIndex ( ) {
    enum XlColorIndex _result;
    HRESULT _hr = get_MarkerForegroundColorIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1617)
inline void PPT::LegendKey::PutMarkerForegroundColorIndex ( enum XlColorIndex RHS ) {
    HRESULT _hr = put_MarkerForegroundColorIndex(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1618)
inline long PPT::LegendKey::GetMarkerSize ( ) {
    long _result = 0;
    HRESULT _hr = get_MarkerSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1619)
inline void PPT::LegendKey::PutMarkerSize ( long RHS ) {
    HRESULT _hr = put_MarkerSize(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1620)
inline enum PPT::XlMarkerStyle PPT::LegendKey::GetMarkerStyle ( ) {
    enum XlMarkerStyle _result;
    HRESULT _hr = get_MarkerStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1621)
inline void PPT::LegendKey::PutMarkerStyle ( enum XlMarkerStyle RHS ) {
    HRESULT _hr = put_MarkerStyle(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1622)
inline long PPT::LegendKey::GetPictureType ( ) {
    long _result = 0;
    HRESULT _hr = get_PictureType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1623)
inline void PPT::LegendKey::PutPictureType ( long RHS ) {
    HRESULT _hr = put_PictureType(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1624)
inline _variant_t PPT::LegendKey::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1625)
inline VARIANT_BOOL PPT::LegendKey::GetSmooth ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Smooth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1626)
inline void PPT::LegendKey::PutSmooth ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Smooth(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1627)
inline double PPT::LegendKey::GetLeft ( ) {
    double _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1628)
inline double PPT::LegendKey::GetTop ( ) {
    double _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1629)
inline double PPT::LegendKey::GetWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1630)
inline double PPT::LegendKey::GetHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1631)
inline VARIANT_BOOL PPT::LegendKey::GetShadow ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Shadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1632)
inline void PPT::LegendKey::PutShadow ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Shadow(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1633)
inline PPT::ChartFormatPtr PPT::LegendKey::GetFormat ( ) {
    struct ChartFormat * _result = 0;
    HRESULT _hr = get_Format(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFormatPtr(_result, false);
}

#pragma implementation_key(1634)
inline long PPT::LegendKey::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1635)
inline double PPT::LegendKey::GetPictureUnit2 ( ) {
    double _result = 0;
    HRESULT _hr = get_PictureUnit2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1636)
inline void PPT::LegendKey::PutPictureUnit2 ( double RHS ) {
    HRESULT _hr = put_PictureUnit2(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1637)
inline PPT::_ApplicationPtr PPT::LegendKey::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1638)
inline long PPT::LegendKey::GetPictureUnit ( ) {
    long _result = 0;
    HRESULT _hr = get_PictureUnit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1639)
inline void PPT::LegendKey::PutPictureUnit ( long RHS ) {
    HRESULT _hr = put_PictureUnit(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface LegendEntry wrapper method implementations
//

#pragma implementation_key(1640)
inline IDispatchPtr PPT::LegendEntry::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1641)
inline _variant_t PPT::LegendEntry::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1642)
inline PPT::ChartFontPtr PPT::LegendEntry::GetFont ( ) {
    struct ChartFont * _result = 0;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFontPtr(_result, false);
}

#pragma implementation_key(1643)
inline long PPT::LegendEntry::GetIndex ( ) {
    long _result = 0;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1644)
inline PPT::LegendKeyPtr PPT::LegendEntry::GetLegendKey ( ) {
    struct LegendKey * _result = 0;
    HRESULT _hr = get_LegendKey(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return LegendKeyPtr(_result, false);
}

#pragma implementation_key(1645)
inline _variant_t PPT::LegendEntry::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1646)
inline _variant_t PPT::LegendEntry::GetAutoScaleFont ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_AutoScaleFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1647)
inline void PPT::LegendEntry::PutAutoScaleFont ( const _variant_t & RHS ) {
    HRESULT _hr = put_AutoScaleFont(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1648)
inline double PPT::LegendEntry::GetLeft ( ) {
    double _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1649)
inline double PPT::LegendEntry::GetTop ( ) {
    double _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1650)
inline double PPT::LegendEntry::GetWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1651)
inline double PPT::LegendEntry::GetHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1652)
inline PPT::ChartFormatPtr PPT::LegendEntry::GetFormat ( ) {
    struct ChartFormat * _result = 0;
    HRESULT _hr = get_Format(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFormatPtr(_result, false);
}

#pragma implementation_key(1653)
inline long PPT::LegendEntry::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1654)
inline PPT::_ApplicationPtr PPT::LegendEntry::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

//
// interface LegendEntries wrapper method implementations
//

#pragma implementation_key(1655)
inline IDispatchPtr PPT::LegendEntries::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1656)
inline long PPT::LegendEntries::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1657)
inline PPT::LegendEntryPtr PPT::LegendEntries::Item ( const _variant_t & Index ) {
    struct LegendEntry * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return LegendEntryPtr(_result, false);
}

#pragma implementation_key(1658)
inline IUnknownPtr PPT::LegendEntries::_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1659)
inline long PPT::LegendEntries::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1660)
inline PPT::_ApplicationPtr PPT::LegendEntries::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1661)
inline PPT::LegendEntryPtr PPT::LegendEntries::_Default ( const _variant_t & Index ) {
    struct LegendEntry * _result = 0;
    HRESULT _hr = raw__Default(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return LegendEntryPtr(_result, false);
}

//
// interface PlotArea wrapper method implementations
//

#pragma implementation_key(1662)
inline _bstr_t PPT::PlotArea::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1663)
inline _variant_t PPT::PlotArea::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1664)
inline IDispatchPtr PPT::PlotArea::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1665)
inline PPT::ChartBorderPtr PPT::PlotArea::GetBorder ( ) {
    struct ChartBorder * _result = 0;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartBorderPtr(_result, false);
}

#pragma implementation_key(1666)
inline _variant_t PPT::PlotArea::ClearFormats ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_ClearFormats(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1667)
inline double PPT::PlotArea::GetHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1668)
inline void PPT::PlotArea::PutHeight ( double RHS ) {
    HRESULT _hr = put_Height(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1669)
inline PPT::InteriorPtr PPT::PlotArea::GetInterior ( ) {
    struct Interior * _result = 0;
    HRESULT _hr = get_Interior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return InteriorPtr(_result, false);
}

#pragma implementation_key(1670)
inline PPT::ChartFillFormatPtr PPT::PlotArea::GetFill ( ) {
    struct ChartFillFormat * _result = 0;
    HRESULT _hr = get_Fill(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFillFormatPtr(_result, false);
}

#pragma implementation_key(1671)
inline double PPT::PlotArea::GetLeft ( ) {
    double _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1672)
inline void PPT::PlotArea::PutLeft ( double RHS ) {
    HRESULT _hr = put_Left(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1673)
inline double PPT::PlotArea::GetTop ( ) {
    double _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1674)
inline void PPT::PlotArea::PutTop ( double RHS ) {
    HRESULT _hr = put_Top(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1675)
inline double PPT::PlotArea::GetWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1676)
inline void PPT::PlotArea::PutWidth ( double RHS ) {
    HRESULT _hr = put_Width(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1677)
inline double PPT::PlotArea::GetInsideLeft ( ) {
    double _result = 0;
    HRESULT _hr = get_InsideLeft(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1678)
inline void PPT::PlotArea::PutInsideLeft ( double RHS ) {
    HRESULT _hr = put_InsideLeft(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1679)
inline double PPT::PlotArea::GetInsideTop ( ) {
    double _result = 0;
    HRESULT _hr = get_InsideTop(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1680)
inline void PPT::PlotArea::PutInsideTop ( double RHS ) {
    HRESULT _hr = put_InsideTop(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1681)
inline double PPT::PlotArea::GetInsideWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_InsideWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1682)
inline void PPT::PlotArea::PutInsideWidth ( double RHS ) {
    HRESULT _hr = put_InsideWidth(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1683)
inline double PPT::PlotArea::GetInsideHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_InsideHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1684)
inline void PPT::PlotArea::PutInsideHeight ( double RHS ) {
    HRESULT _hr = put_InsideHeight(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1685)
inline enum PPT::XlChartElementPosition PPT::PlotArea::GetPosition ( ) {
    enum XlChartElementPosition _result;
    HRESULT _hr = get_Position(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1686)
inline void PPT::PlotArea::PutPosition ( enum XlChartElementPosition RHS ) {
    HRESULT _hr = put_Position(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1687)
inline PPT::ChartFormatPtr PPT::PlotArea::GetFormat ( ) {
    struct ChartFormat * _result = 0;
    HRESULT _hr = get_Format(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFormatPtr(_result, false);
}

#pragma implementation_key(1688)
inline long PPT::PlotArea::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1689)
inline PPT::_ApplicationPtr PPT::PlotArea::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1690)
inline _variant_t PPT::PlotArea::GetProperty ( _bstr_t Id ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetProperty(Id, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1691)
inline HRESULT PPT::PlotArea::SetProperty ( _bstr_t Id, const _variant_t & Value ) {
    HRESULT _hr = raw_SetProperty(Id, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface SeriesLines wrapper method implementations
//

#pragma implementation_key(1692)
inline _bstr_t PPT::SeriesLines::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1693)
inline _variant_t PPT::SeriesLines::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1694)
inline IDispatchPtr PPT::SeriesLines::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1695)
inline PPT::ChartBorderPtr PPT::SeriesLines::GetBorder ( ) {
    struct ChartBorder * _result = 0;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartBorderPtr(_result, false);
}

#pragma implementation_key(1696)
inline _variant_t PPT::SeriesLines::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1697)
inline PPT::ChartFormatPtr PPT::SeriesLines::GetFormat ( ) {
    struct ChartFormat * _result = 0;
    HRESULT _hr = get_Format(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFormatPtr(_result, false);
}

#pragma implementation_key(1698)
inline long PPT::SeriesLines::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1699)
inline PPT::_ApplicationPtr PPT::SeriesLines::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1700)
inline _variant_t PPT::SeriesLines::GetProperty ( _bstr_t Id ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetProperty(Id, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1701)
inline HRESULT PPT::SeriesLines::SetProperty ( _bstr_t Id, const _variant_t & Value ) {
    HRESULT _hr = raw_SetProperty(Id, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface TickLabels wrapper method implementations
//

#pragma implementation_key(1702)
inline IDispatchPtr PPT::TickLabels::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1703)
inline _variant_t PPT::TickLabels::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1704)
inline PPT::ChartFontPtr PPT::TickLabels::GetFont ( ) {
    struct ChartFont * _result = 0;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFontPtr(_result, false);
}

#pragma implementation_key(1705)
inline _bstr_t PPT::TickLabels::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1706)
inline _bstr_t PPT::TickLabels::GetNumberFormat ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_NumberFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1707)
inline void PPT::TickLabels::PutNumberFormat ( _bstr_t RHS ) {
    HRESULT _hr = put_NumberFormat(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1708)
inline VARIANT_BOOL PPT::TickLabels::GetNumberFormatLinked ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_NumberFormatLinked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1709)
inline void PPT::TickLabels::PutNumberFormatLinked ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_NumberFormatLinked(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1710)
inline _variant_t PPT::TickLabels::GetNumberFormatLocal ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_NumberFormatLocal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1711)
inline void PPT::TickLabels::PutNumberFormatLocal ( const _variant_t & RHS ) {
    HRESULT _hr = put_NumberFormatLocal(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1712)
inline enum PPT::XlTickLabelOrientation PPT::TickLabels::GetOrientation ( ) {
    enum XlTickLabelOrientation _result;
    HRESULT _hr = get_Orientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1713)
inline void PPT::TickLabels::PutOrientation ( enum XlTickLabelOrientation RHS ) {
    HRESULT _hr = put_Orientation(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1714)
inline _variant_t PPT::TickLabels::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1715)
inline _variant_t PPT::TickLabels::GetAutoScaleFont ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_AutoScaleFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1716)
inline void PPT::TickLabels::PutAutoScaleFont ( const _variant_t & RHS ) {
    HRESULT _hr = put_AutoScaleFont(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1717)
inline int PPT::TickLabels::GetDepth ( ) {
    int _result = 0;
    HRESULT _hr = get_Depth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1718)
inline int PPT::TickLabels::GetOffset ( ) {
    int _result = 0;
    HRESULT _hr = get_Offset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1719)
inline void PPT::TickLabels::PutOffset ( int RHS ) {
    HRESULT _hr = put_Offset(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1720)
inline VARIANT_BOOL PPT::TickLabels::GetMultiLevel ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_MultiLevel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1721)
inline void PPT::TickLabels::PutMultiLevel ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_MultiLevel(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1722)
inline PPT::ChartFormatPtr PPT::TickLabels::GetFormat ( ) {
    struct ChartFormat * _result = 0;
    HRESULT _hr = get_Format(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFormatPtr(_result, false);
}

#pragma implementation_key(1723)
inline long PPT::TickLabels::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1724)
inline PPT::_ApplicationPtr PPT::TickLabels::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1725)
inline long PPT::TickLabels::GetAlignment ( ) {
    long _result = 0;
    HRESULT _hr = get_Alignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1726)
inline void PPT::TickLabels::PutAlignment ( long RHS ) {
    HRESULT _hr = put_Alignment(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1727)
inline long PPT::TickLabels::GetReadingOrder ( ) {
    long _result = 0;
    HRESULT _hr = get_ReadingOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1728)
inline void PPT::TickLabels::PutReadingOrder ( long RHS ) {
    HRESULT _hr = put_ReadingOrder(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface Trendline wrapper method implementations
//

#pragma implementation_key(1729)
inline IDispatchPtr PPT::Trendline::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1730)
inline PPT::ChartBorderPtr PPT::Trendline::GetBorder ( ) {
    struct ChartBorder * _result = 0;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartBorderPtr(_result, false);
}

#pragma implementation_key(1731)
inline _variant_t PPT::Trendline::ClearFormats ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_ClearFormats(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1732)
inline PPT::DataLabelPtr PPT::Trendline::GetDataLabel ( ) {
    struct DataLabel * _result = 0;
    HRESULT _hr = get_DataLabel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DataLabelPtr(_result, false);
}

#pragma implementation_key(1733)
inline _variant_t PPT::Trendline::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1734)
inline VARIANT_BOOL PPT::Trendline::GetDisplayEquation ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DisplayEquation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1735)
inline void PPT::Trendline::PutDisplayEquation ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_DisplayEquation(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1736)
inline VARIANT_BOOL PPT::Trendline::GetDisplayRSquared ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DisplayRSquared(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1737)
inline void PPT::Trendline::PutDisplayRSquared ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_DisplayRSquared(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1738)
inline long PPT::Trendline::GetIndex ( ) {
    long _result = 0;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1739)
inline double PPT::Trendline::GetIntercept ( ) {
    double _result = 0;
    HRESULT _hr = get_Intercept(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1740)
inline void PPT::Trendline::PutIntercept ( double RHS ) {
    HRESULT _hr = put_Intercept(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1741)
inline VARIANT_BOOL PPT::Trendline::GetInterceptIsAuto ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_InterceptIsAuto(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1742)
inline void PPT::Trendline::PutInterceptIsAuto ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_InterceptIsAuto(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1743)
inline _bstr_t PPT::Trendline::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1744)
inline void PPT::Trendline::PutName ( _bstr_t RHS ) {
    HRESULT _hr = put_Name(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1745)
inline VARIANT_BOOL PPT::Trendline::GetNameIsAuto ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_NameIsAuto(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1746)
inline void PPT::Trendline::PutNameIsAuto ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_NameIsAuto(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1747)
inline long PPT::Trendline::GetOrder ( ) {
    long _result = 0;
    HRESULT _hr = get_Order(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1748)
inline void PPT::Trendline::PutOrder ( long RHS ) {
    HRESULT _hr = put_Order(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1749)
inline long PPT::Trendline::GetPeriod ( ) {
    long _result = 0;
    HRESULT _hr = get_Period(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1750)
inline void PPT::Trendline::PutPeriod ( long RHS ) {
    HRESULT _hr = put_Period(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1751)
inline _variant_t PPT::Trendline::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1752)
inline enum PPT::XlTrendlineType PPT::Trendline::GetType ( ) {
    enum XlTrendlineType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1753)
inline void PPT::Trendline::PutType ( enum XlTrendlineType RHS ) {
    HRESULT _hr = put_Type(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1754)
inline PPT::ChartFormatPtr PPT::Trendline::GetFormat ( ) {
    struct ChartFormat * _result = 0;
    HRESULT _hr = get_Format(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFormatPtr(_result, false);
}

#pragma implementation_key(1755)
inline long PPT::Trendline::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1756)
inline double PPT::Trendline::GetBackward2 ( ) {
    double _result = 0;
    HRESULT _hr = get_Backward2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1757)
inline void PPT::Trendline::PutBackward2 ( double RHS ) {
    HRESULT _hr = put_Backward2(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1758)
inline double PPT::Trendline::GetForward2 ( ) {
    double _result = 0;
    HRESULT _hr = get_Forward2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1759)
inline void PPT::Trendline::PutForward2 ( double RHS ) {
    HRESULT _hr = put_Forward2(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1760)
inline PPT::_ApplicationPtr PPT::Trendline::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1761)
inline long PPT::Trendline::GetBackward ( ) {
    long _result = 0;
    HRESULT _hr = get_Backward(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1762)
inline void PPT::Trendline::PutBackward ( long RHS ) {
    HRESULT _hr = put_Backward(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1763)
inline long PPT::Trendline::GetForward ( ) {
    long _result = 0;
    HRESULT _hr = get_Forward(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1764)
inline void PPT::Trendline::PutForward ( long RHS ) {
    HRESULT _hr = put_Forward(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1765)
inline _variant_t PPT::Trendline::GetProperty ( _bstr_t Id ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetProperty(Id, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1766)
inline HRESULT PPT::Trendline::SetProperty ( _bstr_t Id, const _variant_t & Value ) {
    HRESULT _hr = raw_SetProperty(Id, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface Trendlines wrapper method implementations
//

#pragma implementation_key(1767)
inline IDispatchPtr PPT::Trendlines::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1768)
inline PPT::TrendlinePtr PPT::Trendlines::Add ( enum XlTrendlineType Type, const _variant_t & Order, const _variant_t & Period, const _variant_t & Forward, const _variant_t & Backward, const _variant_t & Intercept, const _variant_t & DisplayEquation, const _variant_t & DisplayRSquared, const _variant_t & Name ) {
    struct Trendline * _result = 0;
    HRESULT _hr = raw_Add(Type, Order, Period, Forward, Backward, Intercept, DisplayEquation, DisplayRSquared, Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TrendlinePtr(_result, false);
}

#pragma implementation_key(1769)
inline long PPT::Trendlines::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1770)
inline PPT::TrendlinePtr PPT::Trendlines::Item ( const _variant_t & Index ) {
    struct Trendline * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TrendlinePtr(_result, false);
}

#pragma implementation_key(1771)
inline IUnknownPtr PPT::Trendlines::_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1772)
inline long PPT::Trendlines::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1773)
inline PPT::_ApplicationPtr PPT::Trendlines::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1774)
inline PPT::TrendlinePtr PPT::Trendlines::_Default ( const _variant_t & Index ) {
    struct Trendline * _result = 0;
    HRESULT _hr = raw__Default(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TrendlinePtr(_result, false);
}

//
// interface UpBars wrapper method implementations
//

#pragma implementation_key(1775)
inline _bstr_t PPT::UpBars::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1776)
inline _variant_t PPT::UpBars::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1777)
inline IDispatchPtr PPT::UpBars::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1778)
inline PPT::ChartBorderPtr PPT::UpBars::GetBorder ( ) {
    struct ChartBorder * _result = 0;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartBorderPtr(_result, false);
}

#pragma implementation_key(1779)
inline _variant_t PPT::UpBars::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1780)
inline PPT::InteriorPtr PPT::UpBars::GetInterior ( ) {
    struct Interior * _result = 0;
    HRESULT _hr = get_Interior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return InteriorPtr(_result, false);
}

#pragma implementation_key(1781)
inline PPT::ChartFillFormatPtr PPT::UpBars::GetFill ( ) {
    struct ChartFillFormat * _result = 0;
    HRESULT _hr = get_Fill(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFillFormatPtr(_result, false);
}

#pragma implementation_key(1782)
inline PPT::ChartFormatPtr PPT::UpBars::GetFormat ( ) {
    struct ChartFormat * _result = 0;
    HRESULT _hr = get_Format(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFormatPtr(_result, false);
}

#pragma implementation_key(1783)
inline long PPT::UpBars::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1784)
inline PPT::_ApplicationPtr PPT::UpBars::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1785)
inline _variant_t PPT::UpBars::GetProperty ( _bstr_t Id ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetProperty(Id, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1786)
inline HRESULT PPT::UpBars::SetProperty ( _bstr_t Id, const _variant_t & Value ) {
    HRESULT _hr = raw_SetProperty(Id, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface Walls wrapper method implementations
//

#pragma implementation_key(1787)
inline _bstr_t PPT::Walls::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1788)
inline _variant_t PPT::Walls::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1789)
inline IDispatchPtr PPT::Walls::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1790)
inline PPT::ChartBorderPtr PPT::Walls::GetBorder ( ) {
    struct ChartBorder * _result = 0;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartBorderPtr(_result, false);
}

#pragma implementation_key(1791)
inline _variant_t PPT::Walls::ClearFormats ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_ClearFormats(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1792)
inline PPT::InteriorPtr PPT::Walls::GetInterior ( ) {
    struct Interior * _result = 0;
    HRESULT _hr = get_Interior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return InteriorPtr(_result, false);
}

#pragma implementation_key(1793)
inline PPT::ChartFillFormatPtr PPT::Walls::GetFill ( ) {
    struct ChartFillFormat * _result = 0;
    HRESULT _hr = get_Fill(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFillFormatPtr(_result, false);
}

#pragma implementation_key(1794)
inline _variant_t PPT::Walls::GetPictureType ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_PictureType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1795)
inline void PPT::Walls::PutPictureType ( const _variant_t & pvar ) {
    HRESULT _hr = put_PictureType(pvar);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1796)
inline HRESULT PPT::Walls::Paste ( ) {
    HRESULT _hr = raw_Paste();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1797)
inline _variant_t PPT::Walls::GetPictureUnit ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_PictureUnit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1798)
inline void PPT::Walls::PutPictureUnit ( const _variant_t & pvar ) {
    HRESULT _hr = put_PictureUnit(pvar);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1799)
inline long PPT::Walls::GetThickness ( ) {
    long _result = 0;
    HRESULT _hr = get_Thickness(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1800)
inline void PPT::Walls::PutThickness ( long RHS ) {
    HRESULT _hr = put_Thickness(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1801)
inline PPT::ChartFormatPtr PPT::Walls::GetFormat ( ) {
    struct ChartFormat * _result = 0;
    HRESULT _hr = get_Format(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFormatPtr(_result, false);
}

#pragma implementation_key(1802)
inline long PPT::Walls::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1803)
inline PPT::_ApplicationPtr PPT::Walls::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

//
// interface SectionProperties wrapper method implementations
//

#pragma implementation_key(1804)
inline PPT::_ApplicationPtr PPT::SectionProperties::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1805)
inline IDispatchPtr PPT::SectionProperties::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1806)
inline long PPT::SectionProperties::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1807)
inline _bstr_t PPT::SectionProperties::Name ( int sectionIndex ) {
    BSTR _result = 0;
    HRESULT _hr = raw_Name(sectionIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1808)
inline HRESULT PPT::SectionProperties::Rename ( int sectionIndex, _bstr_t sectionName ) {
    HRESULT _hr = raw_Rename(sectionIndex, sectionName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1809)
inline long PPT::SectionProperties::SlidesCount ( int sectionIndex ) {
    long _result = 0;
    HRESULT _hr = raw_SlidesCount(sectionIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1810)
inline int PPT::SectionProperties::FirstSlide ( int sectionIndex ) {
    int _result = 0;
    HRESULT _hr = raw_FirstSlide(sectionIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1811)
inline int PPT::SectionProperties::AddBeforeSlide ( int SlideIndex, _bstr_t sectionName ) {
    int _result = 0;
    HRESULT _hr = raw_AddBeforeSlide(SlideIndex, sectionName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1812)
inline int PPT::SectionProperties::AddSection ( int sectionIndex, const _variant_t & sectionName ) {
    int _result = 0;
    HRESULT _hr = raw_AddSection(sectionIndex, sectionName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1813)
inline HRESULT PPT::SectionProperties::Move ( int sectionIndex, int toPos ) {
    HRESULT _hr = raw_Move(sectionIndex, toPos);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1814)
inline HRESULT PPT::SectionProperties::Delete ( int sectionIndex, VARIANT_BOOL deleteSlides ) {
    HRESULT _hr = raw_Delete(sectionIndex, deleteSlides);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1815)
inline _bstr_t PPT::SectionProperties::SectionID ( int sectionIndex ) {
    BSTR _result = 0;
    HRESULT _hr = raw_SectionID(sectionIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface Player wrapper method implementations
//

#pragma implementation_key(1816)
inline PPT::_ApplicationPtr PPT::Player::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1817)
inline IDispatchPtr PPT::Player::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1818)
inline HRESULT PPT::Player::Play ( ) {
    HRESULT _hr = raw_Play();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1819)
inline HRESULT PPT::Player::Pause ( ) {
    HRESULT _hr = raw_Pause();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1820)
inline HRESULT PPT::Player::Stop ( ) {
    HRESULT _hr = raw_Stop();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1821)
inline HRESULT PPT::Player::GoToNextBookmark ( ) {
    HRESULT _hr = raw_GoToNextBookmark();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1822)
inline HRESULT PPT::Player::GoToPreviousBookmark ( ) {
    HRESULT _hr = raw_GoToPreviousBookmark();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1823)
inline long PPT::Player::GetCurrentPosition ( ) {
    long _result = 0;
    HRESULT _hr = get_CurrentPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1824)
inline void PPT::Player::PutCurrentPosition ( long CurrentPosition ) {
    HRESULT _hr = put_CurrentPosition(CurrentPosition);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1825)
inline enum PPT::PpPlayerState PPT::Player::GetState ( ) {
    enum PpPlayerState _result;
    HRESULT _hr = get_State(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface View wrapper method implementations
//

#pragma implementation_key(1826)
inline PPT::_ApplicationPtr PPT::View::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1827)
inline IDispatchPtr PPT::View::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1828)
inline enum PPT::PpViewType PPT::View::GetType ( ) {
    enum PpViewType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1829)
inline int PPT::View::GetZoom ( ) {
    int _result = 0;
    HRESULT _hr = get_Zoom(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1830)
inline void PPT::View::PutZoom ( int Zoom ) {
    HRESULT _hr = put_Zoom(Zoom);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1831)
inline HRESULT PPT::View::Paste ( ) {
    HRESULT _hr = raw_Paste();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1832)
inline IDispatchPtr PPT::View::GetSlide ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Slide(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1833)
inline void PPT::View::PutSlide ( IDispatch * Slide ) {
    HRESULT _hr = put_Slide(Slide);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1834)
inline HRESULT PPT::View::GotoSlide ( int Index ) {
    HRESULT _hr = raw_GotoSlide(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1835)
inline enum Office::MsoTriState PPT::View::GetDisplaySlideMiniature ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_DisplaySlideMiniature(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1836)
inline void PPT::View::PutDisplaySlideMiniature ( enum Office::MsoTriState DisplaySlideMiniature ) {
    HRESULT _hr = put_DisplaySlideMiniature(DisplaySlideMiniature);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1837)
inline enum Office::MsoTriState PPT::View::GetZoomToFit ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_ZoomToFit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1838)
inline void PPT::View::PutZoomToFit ( enum Office::MsoTriState ZoomToFit ) {
    HRESULT _hr = put_ZoomToFit(ZoomToFit);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1839)
inline HRESULT PPT::View::PasteSpecial ( enum PpPasteDataType DataType, enum Office::MsoTriState DisplayAsIcon, _bstr_t IconFileName, int IconIndex, _bstr_t IconLabel, enum Office::MsoTriState Link ) {
    HRESULT _hr = raw_PasteSpecial(DataType, DisplayAsIcon, IconFileName, IconIndex, IconLabel, Link);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1840)
inline PPT::PrintOptionsPtr PPT::View::GetPrintOptions ( ) {
    struct PrintOptions * _result = 0;
    HRESULT _hr = get_PrintOptions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PrintOptionsPtr(_result, false);
}

#pragma implementation_key(1841)
inline HRESULT PPT::View::PrintOut ( int From, int To, _bstr_t PrintToFile, int Copies, enum Office::MsoTriState Collate ) {
    HRESULT _hr = raw_PrintOut(From, To, PrintToFile, Copies, Collate);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1842)
inline PPT::PlayerPtr PPT::View::Player ( const _variant_t & ShapeId ) {
    struct Player * _result = 0;
    HRESULT _hr = raw_Player(ShapeId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PlayerPtr(_result, false);
}

#pragma implementation_key(1843)
inline enum Office::MsoTriState PPT::View::GetMediaControlsVisible ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_MediaControlsVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1844)
inline float PPT::View::GetMediaControlsLeft ( ) {
    float _result = 0;
    HRESULT _hr = get_MediaControlsLeft(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1845)
inline float PPT::View::GetMediaControlsTop ( ) {
    float _result = 0;
    HRESULT _hr = get_MediaControlsTop(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1846)
inline float PPT::View::GetMediaControlsWidth ( ) {
    float _result = 0;
    HRESULT _hr = get_MediaControlsWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1847)
inline float PPT::View::GetMediaControlsHeight ( ) {
    float _result = 0;
    HRESULT _hr = get_MediaControlsHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface SlideShowView wrapper method implementations
//

#pragma implementation_key(1848)
inline PPT::_ApplicationPtr PPT::SlideShowView::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1849)
inline IDispatchPtr PPT::SlideShowView::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1850)
inline int PPT::SlideShowView::GetZoom ( ) {
    int _result = 0;
    HRESULT _hr = get_Zoom(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1851)
inline PPT::_SlidePtr PPT::SlideShowView::GetSlide ( ) {
    struct _Slide * _result = 0;
    HRESULT _hr = get_Slide(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _SlidePtr(_result, false);
}

#pragma implementation_key(1852)
inline enum PPT::PpSlideShowPointerType PPT::SlideShowView::GetPointerType ( ) {
    enum PpSlideShowPointerType _result;
    HRESULT _hr = get_PointerType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1853)
inline void PPT::SlideShowView::PutPointerType ( enum PpSlideShowPointerType PointerType ) {
    HRESULT _hr = put_PointerType(PointerType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1854)
inline enum PPT::PpSlideShowState PPT::SlideShowView::GetState ( ) {
    enum PpSlideShowState _result;
    HRESULT _hr = get_State(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1855)
inline void PPT::SlideShowView::PutState ( enum PpSlideShowState State ) {
    HRESULT _hr = put_State(State);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1856)
inline enum Office::MsoTriState PPT::SlideShowView::GetAcceleratorsEnabled ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_AcceleratorsEnabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1857)
inline void PPT::SlideShowView::PutAcceleratorsEnabled ( enum Office::MsoTriState AcceleratorsEnabled ) {
    HRESULT _hr = put_AcceleratorsEnabled(AcceleratorsEnabled);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1858)
inline float PPT::SlideShowView::GetPresentationElapsedTime ( ) {
    float _result = 0;
    HRESULT _hr = get_PresentationElapsedTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1859)
inline float PPT::SlideShowView::GetSlideElapsedTime ( ) {
    float _result = 0;
    HRESULT _hr = get_SlideElapsedTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1860)
inline void PPT::SlideShowView::PutSlideElapsedTime ( float SlideElapsedTime ) {
    HRESULT _hr = put_SlideElapsedTime(SlideElapsedTime);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1861)
inline PPT::_SlidePtr PPT::SlideShowView::GetLastSlideViewed ( ) {
    struct _Slide * _result = 0;
    HRESULT _hr = get_LastSlideViewed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _SlidePtr(_result, false);
}

#pragma implementation_key(1862)
inline enum PPT::PpSlideShowAdvanceMode PPT::SlideShowView::GetAdvanceMode ( ) {
    enum PpSlideShowAdvanceMode _result;
    HRESULT _hr = get_AdvanceMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1863)
inline PPT::ColorFormatPtr PPT::SlideShowView::GetPointerColor ( ) {
    struct ColorFormat * _result = 0;
    HRESULT _hr = get_PointerColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColorFormatPtr(_result, false);
}

#pragma implementation_key(1864)
inline enum Office::MsoTriState PPT::SlideShowView::GetIsNamedShow ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_IsNamedShow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1865)
inline _bstr_t PPT::SlideShowView::GetSlideShowName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SlideShowName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1866)
inline HRESULT PPT::SlideShowView::DrawLine ( float BeginX, float BeginY, float EndX, float EndY ) {
    HRESULT _hr = raw_DrawLine(BeginX, BeginY, EndX, EndY);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1867)
inline HRESULT PPT::SlideShowView::EraseDrawing ( ) {
    HRESULT _hr = raw_EraseDrawing();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1868)
inline HRESULT PPT::SlideShowView::First ( ) {
    HRESULT _hr = raw_First();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1869)
inline HRESULT PPT::SlideShowView::Last ( ) {
    HRESULT _hr = raw_Last();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1870)
inline HRESULT PPT::SlideShowView::Next ( ) {
    HRESULT _hr = raw_Next();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1871)
inline HRESULT PPT::SlideShowView::Previous ( ) {
    HRESULT _hr = raw_Previous();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1872)
inline HRESULT PPT::SlideShowView::GotoSlide ( int Index, enum Office::MsoTriState ResetSlide ) {
    HRESULT _hr = raw_GotoSlide(Index, ResetSlide);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1873)
inline HRESULT PPT::SlideShowView::GotoNamedShow ( _bstr_t SlideShowName ) {
    HRESULT _hr = raw_GotoNamedShow(SlideShowName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1874)
inline HRESULT PPT::SlideShowView::EndNamedShow ( ) {
    HRESULT _hr = raw_EndNamedShow();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1875)
inline HRESULT PPT::SlideShowView::ResetSlideTime ( ) {
    HRESULT _hr = raw_ResetSlideTime();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1876)
inline HRESULT PPT::SlideShowView::Exit ( ) {
    HRESULT _hr = raw_Exit();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1877)
inline HRESULT PPT::SlideShowView::InstallTracker ( struct MouseTracker * pTracker, enum Office::MsoTriState Presenter ) {
    HRESULT _hr = raw_InstallTracker(pTracker, Presenter);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1878)
inline int PPT::SlideShowView::GetCurrentShowPosition ( ) {
    int _result = 0;
    HRESULT _hr = get_CurrentShowPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1879)
inline HRESULT PPT::SlideShowView::GotoClick ( int Index ) {
    HRESULT _hr = raw_GotoClick(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1880)
inline int PPT::SlideShowView::GetClickIndex ( ) {
    int _result = 0;
    HRESULT _hr = raw_GetClickIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1881)
inline int PPT::SlideShowView::GetClickCount ( ) {
    int _result = 0;
    HRESULT _hr = raw_GetClickCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1882)
inline VARIANT_BOOL PPT::SlideShowView::FirstAnimationIsAutomatic ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_FirstAnimationIsAutomatic(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1883)
inline PPT::PlayerPtr PPT::SlideShowView::Player ( const _variant_t & ShapeId ) {
    struct Player * _result = 0;
    HRESULT _hr = raw_Player(ShapeId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PlayerPtr(_result, false);
}

#pragma implementation_key(1884)
inline enum Office::MsoTriState PPT::SlideShowView::GetMediaControlsVisible ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_MediaControlsVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1885)
inline float PPT::SlideShowView::GetMediaControlsLeft ( ) {
    float _result = 0;
    HRESULT _hr = get_MediaControlsLeft(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1886)
inline float PPT::SlideShowView::GetMediaControlsTop ( ) {
    float _result = 0;
    HRESULT _hr = get_MediaControlsTop(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1887)
inline float PPT::SlideShowView::GetMediaControlsWidth ( ) {
    float _result = 0;
    HRESULT _hr = get_MediaControlsWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1888)
inline float PPT::SlideShowView::GetMediaControlsHeight ( ) {
    float _result = 0;
    HRESULT _hr = get_MediaControlsHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1889)
inline VARIANT_BOOL PPT::SlideShowView::GetLaserPointerEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LaserPointerEnabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1890)
inline void PPT::SlideShowView::PutLaserPointerEnabled ( VARIANT_BOOL LaserPointerEnabled ) {
    HRESULT _hr = put_LaserPointerEnabled(LaserPointerEnabled);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface MediaBookmark wrapper method implementations
//

#pragma implementation_key(1891)
inline int PPT::MediaBookmark::GetIndex ( ) {
    int _result = 0;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1892)
inline _bstr_t PPT::MediaBookmark::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1893)
inline long PPT::MediaBookmark::GetPosition ( ) {
    long _result = 0;
    HRESULT _hr = get_Position(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1894)
inline HRESULT PPT::MediaBookmark::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface MediaBookmarks wrapper method implementations
//

#pragma implementation_key(1895)
inline PPT::MediaBookmarkPtr PPT::MediaBookmarks::Item ( int Index ) {
    struct MediaBookmark * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return MediaBookmarkPtr(_result, false);
}

#pragma implementation_key(1896)
inline PPT::MediaBookmarkPtr PPT::MediaBookmarks::Add ( long Position, _bstr_t Name ) {
    struct MediaBookmark * _result = 0;
    HRESULT _hr = raw_Add(Position, Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return MediaBookmarkPtr(_result, false);
}

//
// interface MediaFormat wrapper method implementations
//

#pragma implementation_key(1897)
inline PPT::_ApplicationPtr PPT::MediaFormat::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1898)
inline IDispatchPtr PPT::MediaFormat::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1899)
inline float PPT::MediaFormat::GetVolume ( ) {
    float _result = 0;
    HRESULT _hr = get_Volume(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1900)
inline void PPT::MediaFormat::PutVolume ( float Volume ) {
    HRESULT _hr = put_Volume(Volume);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1901)
inline VARIANT_BOOL PPT::MediaFormat::GetMuted ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Muted(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1902)
inline void PPT::MediaFormat::PutMuted ( VARIANT_BOOL Muted ) {
    HRESULT _hr = put_Muted(Muted);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1903)
inline long PPT::MediaFormat::GetLength ( ) {
    long _result = 0;
    HRESULT _hr = get_Length(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1904)
inline long PPT::MediaFormat::GetStartPoint ( ) {
    long _result = 0;
    HRESULT _hr = get_StartPoint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1905)
inline void PPT::MediaFormat::PutStartPoint ( long StartPoint ) {
    HRESULT _hr = put_StartPoint(StartPoint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1906)
inline long PPT::MediaFormat::GetEndPoint ( ) {
    long _result = 0;
    HRESULT _hr = get_EndPoint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1907)
inline void PPT::MediaFormat::PutEndPoint ( long EndPoint ) {
    HRESULT _hr = put_EndPoint(EndPoint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1908)
inline long PPT::MediaFormat::GetFadeInDuration ( ) {
    long _result = 0;
    HRESULT _hr = get_FadeInDuration(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1909)
inline void PPT::MediaFormat::PutFadeInDuration ( long FadeInDuration ) {
    HRESULT _hr = put_FadeInDuration(FadeInDuration);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1910)
inline long PPT::MediaFormat::GetFadeOutDuration ( ) {
    long _result = 0;
    HRESULT _hr = get_FadeOutDuration(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1911)
inline void PPT::MediaFormat::PutFadeOutDuration ( long FadeOutDuration ) {
    HRESULT _hr = put_FadeOutDuration(FadeOutDuration);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1912)
inline PPT::MediaBookmarksPtr PPT::MediaFormat::GetMediaBookmarks ( ) {
    struct MediaBookmarks * _result = 0;
    HRESULT _hr = get_MediaBookmarks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return MediaBookmarksPtr(_result, false);
}

#pragma implementation_key(1913)
inline HRESULT PPT::MediaFormat::SetDisplayPicture ( long Position ) {
    HRESULT _hr = raw_SetDisplayPicture(Position);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1914)
inline HRESULT PPT::MediaFormat::SetDisplayPictureFromFile ( _bstr_t FilePath ) {
    HRESULT _hr = raw_SetDisplayPictureFromFile(FilePath);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1915)
inline HRESULT PPT::MediaFormat::Resample ( VARIANT_BOOL Trim, int SampleHeight, int SampleWidth, long VideoFrameRate, long AudioSamplingRate, long VideoBitRate ) {
    HRESULT _hr = raw_Resample(Trim, SampleHeight, SampleWidth, VideoFrameRate, AudioSamplingRate, VideoBitRate);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1916)
inline HRESULT PPT::MediaFormat::ResampleFromProfile ( enum PpResampleMediaProfile profile ) {
    HRESULT _hr = raw_ResampleFromProfile(profile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1917)
inline enum PPT::PpMediaTaskStatus PPT::MediaFormat::GetResamplingStatus ( ) {
    enum PpMediaTaskStatus _result;
    HRESULT _hr = get_ResamplingStatus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1918)
inline VARIANT_BOOL PPT::MediaFormat::GetIsLinked ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsLinked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1919)
inline VARIANT_BOOL PPT::MediaFormat::GetIsEmbedded ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsEmbedded(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1920)
inline long PPT::MediaFormat::GetAudioSamplingRate ( ) {
    long _result = 0;
    HRESULT _hr = get_AudioSamplingRate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1921)
inline long PPT::MediaFormat::GetVideoFrameRate ( ) {
    long _result = 0;
    HRESULT _hr = get_VideoFrameRate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1922)
inline long PPT::MediaFormat::GetSampleHeight ( ) {
    long _result = 0;
    HRESULT _hr = get_SampleHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1923)
inline long PPT::MediaFormat::GetSampleWidth ( ) {
    long _result = 0;
    HRESULT _hr = get_SampleWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1924)
inline _bstr_t PPT::MediaFormat::GetVideoCompressionType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_VideoCompressionType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1925)
inline _bstr_t PPT::MediaFormat::GetAudioCompressionType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AudioCompressionType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface Coauthoring wrapper method implementations
//

#pragma implementation_key(1926)
inline PPT::_ApplicationPtr PPT::Coauthoring::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1927)
inline IDispatchPtr PPT::Coauthoring::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1928)
inline VARIANT_BOOL PPT::Coauthoring::GetMergeMode ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_MergeMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1929)
inline VARIANT_BOOL PPT::Coauthoring::GetFavorServerEditsDuringMerge ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_FavorServerEditsDuringMerge(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1930)
inline void PPT::Coauthoring::PutFavorServerEditsDuringMerge ( VARIANT_BOOL FavorServerEditsDuringMerge ) {
    HRESULT _hr = put_FavorServerEditsDuringMerge(FavorServerEditsDuringMerge);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1931)
inline HRESULT PPT::Coauthoring::EndReview ( ) {
    HRESULT _hr = raw_EndReview();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1932)
inline VARIANT_BOOL PPT::Coauthoring::GetPendingUpdates ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PendingUpdates(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1933)
inline long PPT::Coauthoring::GetCoauthorCount ( ) {
    long _result = 0;
    HRESULT _hr = get_CoauthorCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface Broadcast wrapper method implementations
//

#pragma implementation_key(1934)
inline PPT::_ApplicationPtr PPT::Broadcast::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1935)
inline IDispatchPtr PPT::Broadcast::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1936)
inline HRESULT PPT::Broadcast::Start ( _bstr_t serverUrl ) {
    HRESULT _hr = raw_Start(serverUrl);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1937)
inline HRESULT PPT::Broadcast::End ( ) {
    HRESULT _hr = raw_End();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1938)
inline _bstr_t PPT::Broadcast::GetAttendeeUrl ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AttendeeUrl(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1939)
inline VARIANT_BOOL PPT::Broadcast::GetIsBroadcasting ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsBroadcasting(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1940)
inline HRESULT PPT::Broadcast::Pause ( ) {
    HRESULT _hr = raw_Pause();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1941)
inline HRESULT PPT::Broadcast::Resume ( ) {
    HRESULT _hr = raw_Resume();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1942)
inline HRESULT PPT::Broadcast::AddMeetingNotes ( _bstr_t notesUrl, _bstr_t notesWacUrl ) {
    HRESULT _hr = raw_AddMeetingNotes(notesUrl, notesWacUrl);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1943)
inline enum Office::MsoBroadcastState PPT::Broadcast::GetState ( ) {
    enum Office::MsoBroadcastState _result;
    HRESULT _hr = get_State(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1944)
inline long PPT::Broadcast::GetCapabilities ( ) {
    long _result = 0;
    HRESULT _hr = get_Capabilities(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1945)
inline _bstr_t PPT::Broadcast::GetSessionID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SessionID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1946)
inline _bstr_t PPT::Broadcast::GetPresenterServiceUrl ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PresenterServiceUrl(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface Point wrapper method implementations
//

#pragma implementation_key(1947)
inline IDispatchPtr PPT::Point::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1948)
inline PPT::ChartBorderPtr PPT::Point::GetBorder ( ) {
    struct ChartBorder * _result = 0;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartBorderPtr(_result, false);
}

#pragma implementation_key(1949)
inline _variant_t PPT::Point::ClearFormats ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_ClearFormats(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1950)
inline _variant_t PPT::Point::Copy ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Copy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1951)
inline PPT::DataLabelPtr PPT::Point::GetDataLabel ( ) {
    struct DataLabel * _result = 0;
    HRESULT _hr = get_DataLabel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DataLabelPtr(_result, false);
}

#pragma implementation_key(1952)
inline _variant_t PPT::Point::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1953)
inline long PPT::Point::GetExplosion ( ) {
    long _result = 0;
    HRESULT _hr = get_Explosion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1954)
inline void PPT::Point::PutExplosion ( long RHS ) {
    HRESULT _hr = put_Explosion(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1955)
inline VARIANT_BOOL PPT::Point::GetHasDataLabel ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasDataLabel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1956)
inline void PPT::Point::PutHasDataLabel ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_HasDataLabel(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1957)
inline PPT::InteriorPtr PPT::Point::GetInterior ( ) {
    struct Interior * _result = 0;
    HRESULT _hr = get_Interior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return InteriorPtr(_result, false);
}

#pragma implementation_key(1958)
inline VARIANT_BOOL PPT::Point::GetInvertIfNegative ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_InvertIfNegative(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1959)
inline void PPT::Point::PutInvertIfNegative ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_InvertIfNegative(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1960)
inline long PPT::Point::GetMarkerBackgroundColor ( ) {
    long _result = 0;
    HRESULT _hr = get_MarkerBackgroundColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1961)
inline void PPT::Point::PutMarkerBackgroundColor ( long RHS ) {
    HRESULT _hr = put_MarkerBackgroundColor(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1962)
inline enum PPT::XlColorIndex PPT::Point::GetMarkerBackgroundColorIndex ( ) {
    enum XlColorIndex _result;
    HRESULT _hr = get_MarkerBackgroundColorIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1963)
inline void PPT::Point::PutMarkerBackgroundColorIndex ( enum XlColorIndex RHS ) {
    HRESULT _hr = put_MarkerBackgroundColorIndex(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1964)
inline long PPT::Point::GetMarkerForegroundColor ( ) {
    long _result = 0;
    HRESULT _hr = get_MarkerForegroundColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1965)
inline void PPT::Point::PutMarkerForegroundColor ( long RHS ) {
    HRESULT _hr = put_MarkerForegroundColor(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1966)
inline enum PPT::XlColorIndex PPT::Point::GetMarkerForegroundColorIndex ( ) {
    enum XlColorIndex _result;
    HRESULT _hr = get_MarkerForegroundColorIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1967)
inline void PPT::Point::PutMarkerForegroundColorIndex ( enum XlColorIndex RHS ) {
    HRESULT _hr = put_MarkerForegroundColorIndex(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1968)
inline long PPT::Point::GetMarkerSize ( ) {
    long _result = 0;
    HRESULT _hr = get_MarkerSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1969)
inline void PPT::Point::PutMarkerSize ( long RHS ) {
    HRESULT _hr = put_MarkerSize(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1970)
inline enum PPT::XlMarkerStyle PPT::Point::GetMarkerStyle ( ) {
    enum XlMarkerStyle _result;
    HRESULT _hr = get_MarkerStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1971)
inline void PPT::Point::PutMarkerStyle ( enum XlMarkerStyle RHS ) {
    HRESULT _hr = put_MarkerStyle(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1972)
inline _variant_t PPT::Point::Paste ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Paste(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1973)
inline enum PPT::XlChartPictureType PPT::Point::GetPictureType ( ) {
    enum XlChartPictureType _result;
    HRESULT _hr = get_PictureType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1974)
inline void PPT::Point::PutPictureType ( enum XlChartPictureType RHS ) {
    HRESULT _hr = put_PictureType(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1975)
inline _variant_t PPT::Point::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1976)
inline VARIANT_BOOL PPT::Point::GetApplyPictToSides ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ApplyPictToSides(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1977)
inline void PPT::Point::PutApplyPictToSides ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ApplyPictToSides(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1978)
inline VARIANT_BOOL PPT::Point::GetApplyPictToFront ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ApplyPictToFront(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1979)
inline void PPT::Point::PutApplyPictToFront ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ApplyPictToFront(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1980)
inline VARIANT_BOOL PPT::Point::GetApplyPictToEnd ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ApplyPictToEnd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1981)
inline void PPT::Point::PutApplyPictToEnd ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ApplyPictToEnd(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1982)
inline VARIANT_BOOL PPT::Point::GetShadow ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Shadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1983)
inline void PPT::Point::PutShadow ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Shadow(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1984)
inline VARIANT_BOOL PPT::Point::GetSecondaryPlot ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SecondaryPlot(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1985)
inline void PPT::Point::PutSecondaryPlot ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_SecondaryPlot(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1986)
inline PPT::ChartFillFormatPtr PPT::Point::GetFill ( ) {
    struct ChartFillFormat * _result = 0;
    HRESULT _hr = get_Fill(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFillFormatPtr(_result, false);
}

#pragma implementation_key(1987)
inline VARIANT_BOOL PPT::Point::GetHas3DEffect ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Has3DEffect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1988)
inline void PPT::Point::PutHas3DEffect ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Has3DEffect(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1989)
inline PPT::ChartFormatPtr PPT::Point::GetFormat ( ) {
    struct ChartFormat * _result = 0;
    HRESULT _hr = get_Format(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFormatPtr(_result, false);
}

#pragma implementation_key(1990)
inline long PPT::Point::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1991)
inline double PPT::Point::GetPictureUnit2 ( ) {
    double _result = 0;
    HRESULT _hr = get_PictureUnit2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1992)
inline void PPT::Point::PutPictureUnit2 ( double RHS ) {
    HRESULT _hr = put_PictureUnit2(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1993)
inline PPT::_ApplicationPtr PPT::Point::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1994)
inline _variant_t PPT::Point::_ApplyDataLabels ( enum XlDataLabelsType Type, const _variant_t & LegendKey, const _variant_t & AutoText, const _variant_t & HasLeaderLines ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw__ApplyDataLabels(Type, LegendKey, AutoText, HasLeaderLines, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1995)
inline _variant_t PPT::Point::ApplyDataLabels ( enum XlDataLabelsType Type, const _variant_t & LegendKey, const _variant_t & AutoText, const _variant_t & HasLeaderLines, const _variant_t & ShowSeriesName, const _variant_t & ShowCategoryName, const _variant_t & ShowValue, const _variant_t & ShowPercentage, const _variant_t & ShowBubbleSize, const _variant_t & Separator ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_ApplyDataLabels(Type, LegendKey, AutoText, HasLeaderLines, ShowSeriesName, ShowCategoryName, ShowValue, ShowPercentage, ShowBubbleSize, Separator, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1996)
inline long PPT::Point::GetPictureUnit ( ) {
    long _result = 0;
    HRESULT _hr = get_PictureUnit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1997)
inline void PPT::Point::PutPictureUnit ( long RHS ) {
    HRESULT _hr = put_PictureUnit(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1998)
inline _bstr_t PPT::Point::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1999)
inline double PPT::Point::GetHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2000)
inline double PPT::Point::GetWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2001)
inline double PPT::Point::GetLeft ( ) {
    double _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2002)
inline double PPT::Point::GetTop ( ) {
    double _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2003)
inline double PPT::Point::PieSliceLocation ( enum XlPieSliceLocation loc, enum XlPieSliceIndex Index ) {
    double _result = 0;
    HRESULT _hr = raw_PieSliceLocation(loc, Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2004)
inline VARIANT_BOOL PPT::Point::GetIsTotal ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsTotal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2005)
inline void PPT::Point::PutIsTotal ( VARIANT_BOOL pval ) {
    HRESULT _hr = put_IsTotal(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2006)
inline _variant_t PPT::Point::GetProperty ( _bstr_t Id ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetProperty(Id, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2007)
inline HRESULT PPT::Point::SetProperty ( _bstr_t Id, const _variant_t & Value ) {
    HRESULT _hr = raw_SetProperty(Id, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface Points wrapper method implementations
//

#pragma implementation_key(2008)
inline IDispatchPtr PPT::Points::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2009)
inline long PPT::Points::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2010)
inline PPT::PointPtr PPT::Points::Item ( long Index ) {
    struct Point * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PointPtr(_result, false);
}

#pragma implementation_key(2011)
inline IUnknownPtr PPT::Points::_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(2012)
inline long PPT::Points::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2013)
inline PPT::_ApplicationPtr PPT::Points::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2014)
inline PPT::PointPtr PPT::Points::_Default ( long Index ) {
    struct Point * _result = 0;
    HRESULT _hr = raw__Default(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PointPtr(_result, false);
}

//
// interface ProtectedViewWindow wrapper method implementations
//

#pragma implementation_key(2015)
inline PPT::_ApplicationPtr PPT::ProtectedViewWindow::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2016)
inline IDispatchPtr PPT::ProtectedViewWindow::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2017)
inline PPT::_PresentationPtr PPT::ProtectedViewWindow::GetPresentation ( ) {
    struct _Presentation * _result = 0;
    HRESULT _hr = get_Presentation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _PresentationPtr(_result, false);
}

#pragma implementation_key(2018)
inline enum Office::MsoTriState PPT::ProtectedViewWindow::GetActive ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Active(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2019)
inline enum PPT::PpWindowState PPT::ProtectedViewWindow::GetWindowState ( ) {
    enum PpWindowState _result;
    HRESULT _hr = get_WindowState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2020)
inline void PPT::ProtectedViewWindow::PutWindowState ( enum PpWindowState WindowState ) {
    HRESULT _hr = put_WindowState(WindowState);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2021)
inline _bstr_t PPT::ProtectedViewWindow::GetCaption ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2022)
inline _bstr_t PPT::ProtectedViewWindow::GetSourcePath ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SourcePath(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2023)
inline _bstr_t PPT::ProtectedViewWindow::GetSourceName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SourceName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2024)
inline float PPT::ProtectedViewWindow::GetLeft ( ) {
    float _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2025)
inline void PPT::ProtectedViewWindow::PutLeft ( float Left ) {
    HRESULT _hr = put_Left(Left);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2026)
inline float PPT::ProtectedViewWindow::GetTop ( ) {
    float _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2027)
inline void PPT::ProtectedViewWindow::PutTop ( float Top ) {
    HRESULT _hr = put_Top(Top);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2028)
inline float PPT::ProtectedViewWindow::GetWidth ( ) {
    float _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2029)
inline void PPT::ProtectedViewWindow::PutWidth ( float Width ) {
    HRESULT _hr = put_Width(Width);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2030)
inline float PPT::ProtectedViewWindow::GetHeight ( ) {
    float _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2031)
inline void PPT::ProtectedViewWindow::PutHeight ( float Height ) {
    HRESULT _hr = put_Height(Height);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2032)
inline HRESULT PPT::ProtectedViewWindow::Activate ( ) {
    HRESULT _hr = raw_Activate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2033)
inline HRESULT PPT::ProtectedViewWindow::Close ( ) {
    HRESULT _hr = raw_Close();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2034)
inline PPT::_PresentationPtr PPT::ProtectedViewWindow::Edit ( _bstr_t ModifyPassword ) {
    struct _Presentation * _result = 0;
    HRESULT _hr = raw_Edit(ModifyPassword, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _PresentationPtr(_result, false);
}

#pragma implementation_key(2035)
inline long PPT::ProtectedViewWindow::GetHWND ( ) {
    long _result = 0;
    HRESULT _hr = get_HWND(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ProtectedViewWindows wrapper method implementations
//

#pragma implementation_key(2036)
inline PPT::_ApplicationPtr PPT::ProtectedViewWindows::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2037)
inline IDispatchPtr PPT::ProtectedViewWindows::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2038)
inline PPT::ProtectedViewWindowPtr PPT::ProtectedViewWindows::Item ( int Index ) {
    struct ProtectedViewWindow * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ProtectedViewWindowPtr(_result, false);
}

#pragma implementation_key(2039)
inline PPT::ProtectedViewWindowPtr PPT::ProtectedViewWindows::Open ( _bstr_t FileName, _bstr_t ReadPassword, enum Office::MsoTriState OpenAndRepair ) {
    struct ProtectedViewWindow * _result = 0;
    HRESULT _hr = raw_Open(FileName, ReadPassword, OpenAndRepair, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ProtectedViewWindowPtr(_result, false);
}

//
// interface ChartCategory wrapper method implementations
//

#pragma implementation_key(2040)
inline IDispatchPtr PPT::ChartCategory::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2041)
inline _bstr_t PPT::ChartCategory::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2042)
inline VARIANT_BOOL PPT::ChartCategory::GetIsFiltered ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsFiltered(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2043)
inline void PPT::ChartCategory::PutIsFiltered ( VARIANT_BOOL pfIsFiltered ) {
    HRESULT _hr = put_IsFiltered(pfIsFiltered);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface CategoryCollection wrapper method implementations
//

#pragma implementation_key(2044)
inline IDispatchPtr PPT::CategoryCollection::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2045)
inline long PPT::CategoryCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2046)
inline PPT::ChartCategoryPtr PPT::CategoryCollection::Item ( const _variant_t & Index ) {
    struct ChartCategory * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartCategoryPtr(_result, false);
}

#pragma implementation_key(2047)
inline PPT::_ApplicationPtr PPT::CategoryCollection::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2048)
inline long PPT::CategoryCollection::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2049)
inline PPT::ChartCategoryPtr PPT::CategoryCollection::_Default ( const _variant_t & Index ) {
    struct ChartCategory * _result = 0;
    HRESULT _hr = raw__Default(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartCategoryPtr(_result, false);
}

//
// interface ThemeVariant wrapper method implementations
//

#pragma implementation_key(2050)
inline PPT::_ApplicationPtr PPT::ThemeVariant::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2051)
inline IDispatchPtr PPT::ThemeVariant::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2052)
inline _bstr_t PPT::ThemeVariant::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2053)
inline long PPT::ThemeVariant::GetWidth ( ) {
    long _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2054)
inline long PPT::ThemeVariant::GetHeight ( ) {
    long _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2055)
inline _bstr_t PPT::ThemeVariant::GetId ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Id(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface ThemeVariants wrapper method implementations
//

#pragma implementation_key(2056)
inline PPT::_ApplicationPtr PPT::ThemeVariants::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2057)
inline IDispatchPtr PPT::ThemeVariants::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2058)
inline PPT::ThemeVariantPtr PPT::ThemeVariants::Item ( int Index ) {
    struct ThemeVariant * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ThemeVariantPtr(_result, false);
}

//
// interface Theme wrapper method implementations
//

#pragma implementation_key(2059)
inline PPT::_ApplicationPtr PPT::Theme::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2060)
inline IDispatchPtr PPT::Theme::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2061)
inline PPT::ThemeVariantsPtr PPT::Theme::GetThemeVariants ( ) {
    struct ThemeVariants * _result = 0;
    HRESULT _hr = get_ThemeVariants(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ThemeVariantsPtr(_result, false);
}

//
// interface SlideNavigation wrapper method implementations
//

#pragma implementation_key(2062)
inline PPT::_ApplicationPtr PPT::SlideNavigation::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2063)
inline IDispatchPtr PPT::SlideNavigation::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2064)
inline VARIANT_BOOL PPT::SlideNavigation::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2065)
inline void PPT::SlideNavigation::PutVisible ( VARIANT_BOOL Visible ) {
    HRESULT _hr = put_Visible(Visible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface SlideShowWindow wrapper method implementations
//

#pragma implementation_key(2066)
inline PPT::_ApplicationPtr PPT::SlideShowWindow::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2067)
inline IDispatchPtr PPT::SlideShowWindow::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2068)
inline PPT::SlideShowViewPtr PPT::SlideShowWindow::GetView ( ) {
    struct SlideShowView * _result = 0;
    HRESULT _hr = get_View(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SlideShowViewPtr(_result, false);
}

#pragma implementation_key(2069)
inline PPT::_PresentationPtr PPT::SlideShowWindow::GetPresentation ( ) {
    struct _Presentation * _result = 0;
    HRESULT _hr = get_Presentation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _PresentationPtr(_result, false);
}

#pragma implementation_key(2070)
inline enum Office::MsoTriState PPT::SlideShowWindow::GetIsFullScreen ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_IsFullScreen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2071)
inline float PPT::SlideShowWindow::GetLeft ( ) {
    float _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2072)
inline void PPT::SlideShowWindow::PutLeft ( float Left ) {
    HRESULT _hr = put_Left(Left);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2073)
inline float PPT::SlideShowWindow::GetTop ( ) {
    float _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2074)
inline void PPT::SlideShowWindow::PutTop ( float Top ) {
    HRESULT _hr = put_Top(Top);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2075)
inline float PPT::SlideShowWindow::GetWidth ( ) {
    float _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2076)
inline void PPT::SlideShowWindow::PutWidth ( float Width ) {
    HRESULT _hr = put_Width(Width);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2077)
inline float PPT::SlideShowWindow::GetHeight ( ) {
    float _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2078)
inline void PPT::SlideShowWindow::PutHeight ( float Height ) {
    HRESULT _hr = put_Height(Height);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2079)
inline long PPT::SlideShowWindow::GetHWND ( ) {
    long _result = 0;
    HRESULT _hr = get_HWND(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2080)
inline enum Office::MsoTriState PPT::SlideShowWindow::GetActive ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Active(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2081)
inline HRESULT PPT::SlideShowWindow::Activate ( ) {
    HRESULT _hr = raw_Activate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2082)
inline PPT::SlideNavigationPtr PPT::SlideShowWindow::GetSlideNavigation ( ) {
    struct SlideNavigation * _result = 0;
    HRESULT _hr = get_SlideNavigation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SlideNavigationPtr(_result, false);
}

//
// interface SlideShowWindows wrapper method implementations
//

#pragma implementation_key(2083)
inline PPT::_ApplicationPtr PPT::SlideShowWindows::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2084)
inline IDispatchPtr PPT::SlideShowWindows::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2085)
inline PPT::SlideShowWindowPtr PPT::SlideShowWindows::Item ( int Index ) {
    struct SlideShowWindow * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SlideShowWindowPtr(_result, false);
}

//
// interface SlideShowSettings wrapper method implementations
//

#pragma implementation_key(2086)
inline PPT::_ApplicationPtr PPT::SlideShowSettings::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2087)
inline IDispatchPtr PPT::SlideShowSettings::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2088)
inline PPT::ColorFormatPtr PPT::SlideShowSettings::GetPointerColor ( ) {
    struct ColorFormat * _result = 0;
    HRESULT _hr = get_PointerColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColorFormatPtr(_result, false);
}

#pragma implementation_key(2089)
inline PPT::NamedSlideShowsPtr PPT::SlideShowSettings::GetNamedSlideShows ( ) {
    struct NamedSlideShows * _result = 0;
    HRESULT _hr = get_NamedSlideShows(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return NamedSlideShowsPtr(_result, false);
}

#pragma implementation_key(2090)
inline int PPT::SlideShowSettings::GetStartingSlide ( ) {
    int _result = 0;
    HRESULT _hr = get_StartingSlide(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2091)
inline void PPT::SlideShowSettings::PutStartingSlide ( int StartingSlide ) {
    HRESULT _hr = put_StartingSlide(StartingSlide);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2092)
inline int PPT::SlideShowSettings::GetEndingSlide ( ) {
    int _result = 0;
    HRESULT _hr = get_EndingSlide(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2093)
inline void PPT::SlideShowSettings::PutEndingSlide ( int EndingSlide ) {
    HRESULT _hr = put_EndingSlide(EndingSlide);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2094)
inline enum PPT::PpSlideShowAdvanceMode PPT::SlideShowSettings::GetAdvanceMode ( ) {
    enum PpSlideShowAdvanceMode _result;
    HRESULT _hr = get_AdvanceMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2095)
inline void PPT::SlideShowSettings::PutAdvanceMode ( enum PpSlideShowAdvanceMode AdvanceMode ) {
    HRESULT _hr = put_AdvanceMode(AdvanceMode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2096)
inline PPT::SlideShowWindowPtr PPT::SlideShowSettings::Run ( ) {
    struct SlideShowWindow * _result = 0;
    HRESULT _hr = raw_Run(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SlideShowWindowPtr(_result, false);
}

#pragma implementation_key(2097)
inline enum Office::MsoTriState PPT::SlideShowSettings::GetLoopUntilStopped ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_LoopUntilStopped(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2098)
inline void PPT::SlideShowSettings::PutLoopUntilStopped ( enum Office::MsoTriState LoopUntilStopped ) {
    HRESULT _hr = put_LoopUntilStopped(LoopUntilStopped);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2099)
inline enum PPT::PpSlideShowType PPT::SlideShowSettings::GetShowType ( ) {
    enum PpSlideShowType _result;
    HRESULT _hr = get_ShowType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2100)
inline void PPT::SlideShowSettings::PutShowType ( enum PpSlideShowType ShowType ) {
    HRESULT _hr = put_ShowType(ShowType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2101)
inline enum Office::MsoTriState PPT::SlideShowSettings::GetShowWithNarration ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_ShowWithNarration(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2102)
inline void PPT::SlideShowSettings::PutShowWithNarration ( enum Office::MsoTriState ShowWithNarration ) {
    HRESULT _hr = put_ShowWithNarration(ShowWithNarration);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2103)
inline enum Office::MsoTriState PPT::SlideShowSettings::GetShowWithAnimation ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_ShowWithAnimation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2104)
inline void PPT::SlideShowSettings::PutShowWithAnimation ( enum Office::MsoTriState ShowWithAnimation ) {
    HRESULT _hr = put_ShowWithAnimation(ShowWithAnimation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2105)
inline _bstr_t PPT::SlideShowSettings::GetSlideShowName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SlideShowName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2106)
inline void PPT::SlideShowSettings::PutSlideShowName ( _bstr_t SlideShowName ) {
    HRESULT _hr = put_SlideShowName(SlideShowName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2107)
inline enum PPT::PpSlideShowRangeType PPT::SlideShowSettings::GetRangeType ( ) {
    enum PpSlideShowRangeType _result;
    HRESULT _hr = get_RangeType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2108)
inline void PPT::SlideShowSettings::PutRangeType ( enum PpSlideShowRangeType RangeType ) {
    HRESULT _hr = put_RangeType(RangeType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2109)
inline enum Office::MsoTriState PPT::SlideShowSettings::GetShowScrollbar ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_ShowScrollbar(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2110)
inline void PPT::SlideShowSettings::PutShowScrollbar ( enum Office::MsoTriState ShowScrollbar ) {
    HRESULT _hr = put_ShowScrollbar(ShowScrollbar);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2111)
inline enum Office::MsoTriState PPT::SlideShowSettings::GetShowPresenterView ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_ShowPresenterView(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2112)
inline void PPT::SlideShowSettings::PutShowPresenterView ( enum Office::MsoTriState ShowPresenterView ) {
    HRESULT _hr = put_ShowPresenterView(ShowPresenterView);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2113)
inline enum Office::MsoTriState PPT::SlideShowSettings::GetShowMediaControls ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_ShowMediaControls(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2114)
inline void PPT::SlideShowSettings::PutShowMediaControls ( enum Office::MsoTriState ShowMediaControls ) {
    HRESULT _hr = put_ShowMediaControls(ShowMediaControls);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface Guide wrapper method implementations
//

#pragma implementation_key(2115)
inline PPT::_ApplicationPtr PPT::Guide::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2116)
inline IDispatchPtr PPT::Guide::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2117)
inline HRESULT PPT::Guide::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2118)
inline enum PPT::PpGuideOrientation PPT::Guide::GetOrientation ( ) {
    enum PpGuideOrientation _result;
    HRESULT _hr = get_Orientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2119)
inline float PPT::Guide::GetPosition ( ) {
    float _result = 0;
    HRESULT _hr = get_Position(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2120)
inline void PPT::Guide::PutPosition ( float Position ) {
    HRESULT _hr = put_Position(Position);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2121)
inline PPT::ColorFormatPtr PPT::Guide::GetColor ( ) {
    struct ColorFormat * _result = 0;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColorFormatPtr(_result, false);
}

//
// interface Guides wrapper method implementations
//

#pragma implementation_key(2122)
inline PPT::_ApplicationPtr PPT::Guides::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2123)
inline IDispatchPtr PPT::Guides::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2124)
inline PPT::GuidePtr PPT::Guides::Item ( int Index ) {
    struct Guide * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return GuidePtr(_result, false);
}

#pragma implementation_key(2125)
inline PPT::GuidePtr PPT::Guides::Add ( enum PpGuideOrientation Orientation, float Position ) {
    struct Guide * _result = 0;
    HRESULT _hr = raw_Add(Orientation, Position, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return GuidePtr(_result, false);
}

//
// interface Model3DFormat wrapper method implementations
//

#pragma implementation_key(2126)
inline IDispatchPtr PPT::Model3DFormat::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2127)
inline long PPT::Model3DFormat::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2128)
inline IDispatchPtr PPT::Model3DFormat::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2129)
inline enum Office::MsoTriState PPT::Model3DFormat::GetAutoFit ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_AutoFit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2130)
inline void PPT::Model3DFormat::PutAutoFit ( enum Office::MsoTriState AutoFit ) {
    HRESULT _hr = put_AutoFit(AutoFit);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2131)
inline float PPT::Model3DFormat::GetRotationX ( ) {
    float _result = 0;
    HRESULT _hr = get_RotationX(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2132)
inline void PPT::Model3DFormat::PutRotationX ( float RotationX ) {
    HRESULT _hr = put_RotationX(RotationX);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2133)
inline float PPT::Model3DFormat::GetRotationY ( ) {
    float _result = 0;
    HRESULT _hr = get_RotationY(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2134)
inline void PPT::Model3DFormat::PutRotationY ( float RotationY ) {
    HRESULT _hr = put_RotationY(RotationY);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2135)
inline float PPT::Model3DFormat::GetRotationZ ( ) {
    float _result = 0;
    HRESULT _hr = get_RotationZ(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2136)
inline void PPT::Model3DFormat::PutRotationZ ( float RotationZ ) {
    HRESULT _hr = put_RotationZ(RotationZ);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2137)
inline float PPT::Model3DFormat::GetFieldOfView ( ) {
    float _result = 0;
    HRESULT _hr = get_FieldOfView(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2138)
inline void PPT::Model3DFormat::PutFieldOfView ( float FOV ) {
    HRESULT _hr = put_FieldOfView(FOV);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2139)
inline float PPT::Model3DFormat::GetCameraPositionX ( ) {
    float _result = 0;
    HRESULT _hr = get_CameraPositionX(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2140)
inline void PPT::Model3DFormat::PutCameraPositionX ( float CameraPositionX ) {
    HRESULT _hr = put_CameraPositionX(CameraPositionX);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2141)
inline float PPT::Model3DFormat::GetCameraPositionY ( ) {
    float _result = 0;
    HRESULT _hr = get_CameraPositionY(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2142)
inline void PPT::Model3DFormat::PutCameraPositionY ( float CameraPositionY ) {
    HRESULT _hr = put_CameraPositionY(CameraPositionY);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2143)
inline float PPT::Model3DFormat::GetCameraPositionZ ( ) {
    float _result = 0;
    HRESULT _hr = get_CameraPositionZ(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2144)
inline void PPT::Model3DFormat::PutCameraPositionZ ( float CameraPositionZ ) {
    HRESULT _hr = put_CameraPositionZ(CameraPositionZ);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2145)
inline float PPT::Model3DFormat::GetLookAtPointX ( ) {
    float _result = 0;
    HRESULT _hr = get_LookAtPointX(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2146)
inline void PPT::Model3DFormat::PutLookAtPointX ( float LookAtPointX ) {
    HRESULT _hr = put_LookAtPointX(LookAtPointX);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2147)
inline float PPT::Model3DFormat::GetLookAtPointY ( ) {
    float _result = 0;
    HRESULT _hr = get_LookAtPointY(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2148)
inline void PPT::Model3DFormat::PutLookAtPointY ( float LookAtPointY ) {
    HRESULT _hr = put_LookAtPointY(LookAtPointY);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2149)
inline float PPT::Model3DFormat::GetLookAtPointZ ( ) {
    float _result = 0;
    HRESULT _hr = get_LookAtPointZ(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2150)
inline void PPT::Model3DFormat::PutLookAtPointZ ( float LookAtPointZ ) {
    HRESULT _hr = put_LookAtPointZ(LookAtPointZ);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2151)
inline HRESULT PPT::Model3DFormat::ResetModel ( VARIANT_BOOL ResetSize ) {
    HRESULT _hr = raw_ResetModel(ResetSize);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2152)
inline HRESULT PPT::Model3DFormat::IncrementRotationX ( float Increment ) {
    HRESULT _hr = raw_IncrementRotationX(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2153)
inline HRESULT PPT::Model3DFormat::IncrementRotationY ( float Increment ) {
    HRESULT _hr = raw_IncrementRotationY(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2154)
inline HRESULT PPT::Model3DFormat::IncrementRotationZ ( float Increment ) {
    HRESULT _hr = raw_IncrementRotationZ(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface ChartGroup wrapper method implementations
//

#pragma implementation_key(2155)
inline PPT::DownBarsPtr PPT::ChartGroup::GetDownBars ( ) {
    struct DownBars * _result = 0;
    HRESULT _hr = get_DownBars(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DownBarsPtr(_result, false);
}

#pragma implementation_key(2156)
inline PPT::DropLinesPtr PPT::ChartGroup::GetDropLines ( ) {
    struct DropLines * _result = 0;
    HRESULT _hr = get_DropLines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DropLinesPtr(_result, false);
}

#pragma implementation_key(2157)
inline void PPT::ChartGroup::PutHasDropLines ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_HasDropLines(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2158)
inline VARIANT_BOOL PPT::ChartGroup::GetHasDropLines ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasDropLines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2159)
inline void PPT::ChartGroup::PutHasHiLoLines ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_HasHiLoLines(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2160)
inline VARIANT_BOOL PPT::ChartGroup::GetHasHiLoLines ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasHiLoLines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2161)
inline void PPT::ChartGroup::PutHasRadarAxisLabels ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_HasRadarAxisLabels(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2162)
inline VARIANT_BOOL PPT::ChartGroup::GetHasRadarAxisLabels ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasRadarAxisLabels(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2163)
inline void PPT::ChartGroup::PutHasSeriesLines ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_HasSeriesLines(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2164)
inline VARIANT_BOOL PPT::ChartGroup::GetHasSeriesLines ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasSeriesLines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2165)
inline void PPT::ChartGroup::PutHasUpDownBars ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_HasUpDownBars(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2166)
inline VARIANT_BOOL PPT::ChartGroup::GetHasUpDownBars ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasUpDownBars(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2167)
inline PPT::HiLoLinesPtr PPT::ChartGroup::GetHiLoLines ( ) {
    struct HiLoLines * _result = 0;
    HRESULT _hr = get_HiLoLines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return HiLoLinesPtr(_result, false);
}

#pragma implementation_key(2168)
inline IDispatchPtr PPT::ChartGroup::SeriesCollection ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_SeriesCollection(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2169)
inline PPT::SeriesLinesPtr PPT::ChartGroup::GetSeriesLines ( ) {
    struct SeriesLines * _result = 0;
    HRESULT _hr = get_SeriesLines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SeriesLinesPtr(_result, false);
}

#pragma implementation_key(2170)
inline PPT::UpBarsPtr PPT::ChartGroup::GetUpBars ( ) {
    struct UpBars * _result = 0;
    HRESULT _hr = get_UpBars(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return UpBarsPtr(_result, false);
}

#pragma implementation_key(2171)
inline void PPT::ChartGroup::PutVaryByCategories ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_VaryByCategories(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2172)
inline VARIANT_BOOL PPT::ChartGroup::GetVaryByCategories ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_VaryByCategories(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2173)
inline enum PPT::XlSizeRepresents PPT::ChartGroup::GetSizeRepresents ( ) {
    enum XlSizeRepresents _result;
    HRESULT _hr = get_SizeRepresents(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2174)
inline void PPT::ChartGroup::PutSizeRepresents ( enum XlSizeRepresents RHS ) {
    HRESULT _hr = put_SizeRepresents(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2175)
inline void PPT::ChartGroup::PutShowNegativeBubbles ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ShowNegativeBubbles(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2176)
inline VARIANT_BOOL PPT::ChartGroup::GetShowNegativeBubbles ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowNegativeBubbles(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2177)
inline void PPT::ChartGroup::PutSplitType ( enum XlChartSplitType RHS ) {
    HRESULT _hr = put_SplitType(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2178)
inline enum PPT::XlChartSplitType PPT::ChartGroup::GetSplitType ( ) {
    enum XlChartSplitType _result;
    HRESULT _hr = get_SplitType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2179)
inline _variant_t PPT::ChartGroup::GetSplitValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_SplitValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2180)
inline void PPT::ChartGroup::PutSplitValue ( const _variant_t & RHS ) {
    HRESULT _hr = put_SplitValue(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2181)
inline VARIANT_BOOL PPT::ChartGroup::GetHas3DShading ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Has3DShading(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2182)
inline void PPT::ChartGroup::PutHas3DShading ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Has3DShading(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2183)
inline long PPT::ChartGroup::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2184)
inline IDispatchPtr PPT::ChartGroup::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2185)
inline PPT::_ApplicationPtr PPT::ChartGroup::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2186)
inline enum PPT::XlAxisGroup PPT::ChartGroup::GetAxisGroup ( ) {
    enum XlAxisGroup _result;
    HRESULT _hr = get_AxisGroup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2187)
inline void PPT::ChartGroup::PutAxisGroup ( enum XlAxisGroup RHS ) {
    HRESULT _hr = put_AxisGroup(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2188)
inline long PPT::ChartGroup::GetBubbleScale ( ) {
    long _result = 0;
    HRESULT _hr = get_BubbleScale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2189)
inline void PPT::ChartGroup::PutBubbleScale ( long RHS ) {
    HRESULT _hr = put_BubbleScale(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2190)
inline long PPT::ChartGroup::GetDoughnutHoleSize ( ) {
    long _result = 0;
    HRESULT _hr = get_DoughnutHoleSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2191)
inline void PPT::ChartGroup::PutDoughnutHoleSize ( long RHS ) {
    HRESULT _hr = put_DoughnutHoleSize(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2192)
inline long PPT::ChartGroup::GetFirstSliceAngle ( ) {
    long _result = 0;
    HRESULT _hr = get_FirstSliceAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2193)
inline void PPT::ChartGroup::PutFirstSliceAngle ( long RHS ) {
    HRESULT _hr = put_FirstSliceAngle(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2194)
inline long PPT::ChartGroup::GetGapWidth ( ) {
    long _result = 0;
    HRESULT _hr = get_GapWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2195)
inline void PPT::ChartGroup::PutGapWidth ( long RHS ) {
    HRESULT _hr = put_GapWidth(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2196)
inline long PPT::ChartGroup::GetIndex ( ) {
    long _result = 0;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2197)
inline long PPT::ChartGroup::GetOverlap ( ) {
    long _result = 0;
    HRESULT _hr = get_Overlap(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2198)
inline void PPT::ChartGroup::PutOverlap ( long RHS ) {
    HRESULT _hr = put_Overlap(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2199)
inline PPT::TickLabelsPtr PPT::ChartGroup::GetRadarAxisLabels ( ) {
    struct TickLabels * _result = 0;
    HRESULT _hr = get_RadarAxisLabels(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TickLabelsPtr(_result, false);
}

#pragma implementation_key(2200)
inline long PPT::ChartGroup::GetSubtype ( ) {
    long _result = 0;
    HRESULT _hr = get_Subtype(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2201)
inline void PPT::ChartGroup::PutSubtype ( long RHS ) {
    HRESULT _hr = put_Subtype(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2202)
inline long PPT::ChartGroup::GetType ( ) {
    long _result = 0;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2203)
inline void PPT::ChartGroup::PutType ( long RHS ) {
    HRESULT _hr = put_Type(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2204)
inline long PPT::ChartGroup::GetSecondPlotSize ( ) {
    long _result = 0;
    HRESULT _hr = get_SecondPlotSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2205)
inline void PPT::ChartGroup::PutSecondPlotSize ( long RHS ) {
    HRESULT _hr = put_SecondPlotSize(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2206)
inline IDispatchPtr PPT::ChartGroup::CategoryCollection ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_CategoryCollection(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2207)
inline IDispatchPtr PPT::ChartGroup::FullCategoryCollection ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_FullCategoryCollection(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2208)
inline enum PPT::XlBinsType PPT::ChartGroup::GetBinsType ( ) {
    enum XlBinsType _result;
    HRESULT _hr = get_BinsType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2209)
inline void PPT::ChartGroup::PutBinsType ( enum XlBinsType RHS ) {
    HRESULT _hr = put_BinsType(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2210)
inline double PPT::ChartGroup::GetBinWidthValue ( ) {
    double _result = 0;
    HRESULT _hr = get_BinWidthValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2211)
inline void PPT::ChartGroup::PutBinWidthValue ( double pval ) {
    HRESULT _hr = put_BinWidthValue(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2212)
inline int PPT::ChartGroup::GetBinsCountValue ( ) {
    int _result = 0;
    HRESULT _hr = get_BinsCountValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2213)
inline void PPT::ChartGroup::PutBinsCountValue ( int pval ) {
    HRESULT _hr = put_BinsCountValue(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2214)
inline VARIANT_BOOL PPT::ChartGroup::GetBinsOverflowEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_BinsOverflowEnabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2215)
inline void PPT::ChartGroup::PutBinsOverflowEnabled ( VARIANT_BOOL pval ) {
    HRESULT _hr = put_BinsOverflowEnabled(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2216)
inline double PPT::ChartGroup::GetBinsOverflowValue ( ) {
    double _result = 0;
    HRESULT _hr = get_BinsOverflowValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2217)
inline void PPT::ChartGroup::PutBinsOverflowValue ( double pval ) {
    HRESULT _hr = put_BinsOverflowValue(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2218)
inline VARIANT_BOOL PPT::ChartGroup::GetBinsUnderflowEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_BinsUnderflowEnabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2219)
inline void PPT::ChartGroup::PutBinsUnderflowEnabled ( VARIANT_BOOL pval ) {
    HRESULT _hr = put_BinsUnderflowEnabled(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2220)
inline double PPT::ChartGroup::GetBinsUnderflowValue ( ) {
    double _result = 0;
    HRESULT _hr = get_BinsUnderflowValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2221)
inline void PPT::ChartGroup::PutBinsUnderflowValue ( double pval ) {
    HRESULT _hr = put_BinsUnderflowValue(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ChartGroups wrapper method implementations
//

#pragma implementation_key(2222)
inline IDispatchPtr PPT::ChartGroups::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2223)
inline long PPT::ChartGroups::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2224)
inline PPT::ChartGroupPtr PPT::ChartGroups::Item ( const _variant_t & Index ) {
    struct ChartGroup * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartGroupPtr(_result, false);
}

#pragma implementation_key(2225)
inline IUnknownPtr PPT::ChartGroups::_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(2226)
inline long PPT::ChartGroups::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2227)
inline PPT::_ApplicationPtr PPT::ChartGroups::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

//
// interface Axis wrapper method implementations
//

#pragma implementation_key(2228)
inline VARIANT_BOOL PPT::Axis::GetAxisBetweenCategories ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AxisBetweenCategories(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2229)
inline void PPT::Axis::PutAxisBetweenCategories ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_AxisBetweenCategories(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2230)
inline enum PPT::XlAxisGroup PPT::Axis::GetAxisGroup ( ) {
    enum XlAxisGroup _result;
    HRESULT _hr = get_AxisGroup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2231)
inline PPT::AxisTitlePtr PPT::Axis::GetAxisTitle ( ) {
    struct AxisTitle * _result = 0;
    HRESULT _hr = get_AxisTitle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AxisTitlePtr(_result, false);
}

#pragma implementation_key(2232)
inline _variant_t PPT::Axis::GetCategoryNames ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_CategoryNames(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2233)
inline void PPT::Axis::PutCategoryNames ( const _variant_t & RHS ) {
    HRESULT _hr = put_CategoryNames(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2234)
inline enum PPT::XlAxisCrosses PPT::Axis::GetCrosses ( ) {
    enum XlAxisCrosses _result;
    HRESULT _hr = get_Crosses(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2235)
inline void PPT::Axis::PutCrosses ( enum XlAxisCrosses RHS ) {
    HRESULT _hr = put_Crosses(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2236)
inline double PPT::Axis::GetCrossesAt ( ) {
    double _result = 0;
    HRESULT _hr = get_CrossesAt(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2237)
inline void PPT::Axis::PutCrossesAt ( double RHS ) {
    HRESULT _hr = put_CrossesAt(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2238)
inline _variant_t PPT::Axis::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2239)
inline VARIANT_BOOL PPT::Axis::GetHasMajorGridlines ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasMajorGridlines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2240)
inline void PPT::Axis::PutHasMajorGridlines ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_HasMajorGridlines(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2241)
inline VARIANT_BOOL PPT::Axis::GetHasMinorGridlines ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasMinorGridlines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2242)
inline void PPT::Axis::PutHasMinorGridlines ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_HasMinorGridlines(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2243)
inline VARIANT_BOOL PPT::Axis::GetHasTitle ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasTitle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2244)
inline void PPT::Axis::PutHasTitle ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_HasTitle(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2245)
inline PPT::GridlinesPtr PPT::Axis::GetMajorGridlines ( ) {
    struct Gridlines * _result = 0;
    HRESULT _hr = get_MajorGridlines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return GridlinesPtr(_result, false);
}

#pragma implementation_key(2246)
inline enum PPT::XlTickMark PPT::Axis::GetMajorTickMark ( ) {
    enum XlTickMark _result;
    HRESULT _hr = get_MajorTickMark(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2247)
inline void PPT::Axis::PutMajorTickMark ( enum XlTickMark RHS ) {
    HRESULT _hr = put_MajorTickMark(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2248)
inline double PPT::Axis::GetMajorUnit ( ) {
    double _result = 0;
    HRESULT _hr = get_MajorUnit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2249)
inline void PPT::Axis::PutMajorUnit ( double RHS ) {
    HRESULT _hr = put_MajorUnit(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2250)
inline double PPT::Axis::GetLogBase ( ) {
    double _result = 0;
    HRESULT _hr = get_LogBase(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2251)
inline void PPT::Axis::PutLogBase ( double RHS ) {
    HRESULT _hr = put_LogBase(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2252)
inline VARIANT_BOOL PPT::Axis::GetTickLabelSpacingIsAuto ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_TickLabelSpacingIsAuto(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2253)
inline void PPT::Axis::PutTickLabelSpacingIsAuto ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_TickLabelSpacingIsAuto(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2254)
inline VARIANT_BOOL PPT::Axis::GetMajorUnitIsAuto ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_MajorUnitIsAuto(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2255)
inline void PPT::Axis::PutMajorUnitIsAuto ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_MajorUnitIsAuto(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2256)
inline double PPT::Axis::GetMaximumScale ( ) {
    double _result = 0;
    HRESULT _hr = get_MaximumScale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2257)
inline void PPT::Axis::PutMaximumScale ( double RHS ) {
    HRESULT _hr = put_MaximumScale(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2258)
inline VARIANT_BOOL PPT::Axis::GetMaximumScaleIsAuto ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_MaximumScaleIsAuto(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2259)
inline void PPT::Axis::PutMaximumScaleIsAuto ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_MaximumScaleIsAuto(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2260)
inline double PPT::Axis::GetMinimumScale ( ) {
    double _result = 0;
    HRESULT _hr = get_MinimumScale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2261)
inline void PPT::Axis::PutMinimumScale ( double RHS ) {
    HRESULT _hr = put_MinimumScale(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2262)
inline VARIANT_BOOL PPT::Axis::GetMinimumScaleIsAuto ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_MinimumScaleIsAuto(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2263)
inline void PPT::Axis::PutMinimumScaleIsAuto ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_MinimumScaleIsAuto(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2264)
inline PPT::GridlinesPtr PPT::Axis::GetMinorGridlines ( ) {
    struct Gridlines * _result = 0;
    HRESULT _hr = get_MinorGridlines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return GridlinesPtr(_result, false);
}

#pragma implementation_key(2265)
inline enum PPT::XlTickMark PPT::Axis::GetMinorTickMark ( ) {
    enum XlTickMark _result;
    HRESULT _hr = get_MinorTickMark(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2266)
inline void PPT::Axis::PutMinorTickMark ( enum XlTickMark RHS ) {
    HRESULT _hr = put_MinorTickMark(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2267)
inline double PPT::Axis::GetMinorUnit ( ) {
    double _result = 0;
    HRESULT _hr = get_MinorUnit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2268)
inline void PPT::Axis::PutMinorUnit ( double RHS ) {
    HRESULT _hr = put_MinorUnit(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2269)
inline VARIANT_BOOL PPT::Axis::GetMinorUnitIsAuto ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_MinorUnitIsAuto(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2270)
inline void PPT::Axis::PutMinorUnitIsAuto ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_MinorUnitIsAuto(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2271)
inline VARIANT_BOOL PPT::Axis::GetReversePlotOrder ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ReversePlotOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2272)
inline void PPT::Axis::PutReversePlotOrder ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ReversePlotOrder(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2273)
inline enum PPT::XlScaleType PPT::Axis::GetScaleType ( ) {
    enum XlScaleType _result;
    HRESULT _hr = get_ScaleType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2274)
inline void PPT::Axis::PutScaleType ( enum XlScaleType RHS ) {
    HRESULT _hr = put_ScaleType(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2275)
inline _variant_t PPT::Axis::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2276)
inline enum PPT::XlTickLabelPosition PPT::Axis::GetTickLabelPosition ( ) {
    enum XlTickLabelPosition _result;
    HRESULT _hr = get_TickLabelPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2277)
inline void PPT::Axis::PutTickLabelPosition ( enum XlTickLabelPosition RHS ) {
    HRESULT _hr = put_TickLabelPosition(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2278)
inline PPT::TickLabelsPtr PPT::Axis::GetTickLabels ( ) {
    struct TickLabels * _result = 0;
    HRESULT _hr = get_TickLabels(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TickLabelsPtr(_result, false);
}

#pragma implementation_key(2279)
inline long PPT::Axis::GetTickLabelSpacing ( ) {
    long _result = 0;
    HRESULT _hr = get_TickLabelSpacing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2280)
inline void PPT::Axis::PutTickLabelSpacing ( long RHS ) {
    HRESULT _hr = put_TickLabelSpacing(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2281)
inline long PPT::Axis::GetTickMarkSpacing ( ) {
    long _result = 0;
    HRESULT _hr = get_TickMarkSpacing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2282)
inline void PPT::Axis::PutTickMarkSpacing ( long RHS ) {
    HRESULT _hr = put_TickMarkSpacing(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2283)
inline enum PPT::XlAxisType PPT::Axis::GetType ( ) {
    enum XlAxisType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2284)
inline void PPT::Axis::PutType ( enum XlAxisType RHS ) {
    HRESULT _hr = put_Type(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2285)
inline enum PPT::XlTimeUnit PPT::Axis::GetBaseUnit ( ) {
    enum XlTimeUnit _result;
    HRESULT _hr = get_BaseUnit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2286)
inline void PPT::Axis::PutBaseUnit ( enum XlTimeUnit RHS ) {
    HRESULT _hr = put_BaseUnit(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2287)
inline VARIANT_BOOL PPT::Axis::GetBaseUnitIsAuto ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_BaseUnitIsAuto(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2288)
inline void PPT::Axis::PutBaseUnitIsAuto ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_BaseUnitIsAuto(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2289)
inline enum PPT::XlTimeUnit PPT::Axis::GetMajorUnitScale ( ) {
    enum XlTimeUnit _result;
    HRESULT _hr = get_MajorUnitScale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2290)
inline void PPT::Axis::PutMajorUnitScale ( enum XlTimeUnit RHS ) {
    HRESULT _hr = put_MajorUnitScale(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2291)
inline enum PPT::XlTimeUnit PPT::Axis::GetMinorUnitScale ( ) {
    enum XlTimeUnit _result;
    HRESULT _hr = get_MinorUnitScale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2292)
inline void PPT::Axis::PutMinorUnitScale ( enum XlTimeUnit RHS ) {
    HRESULT _hr = put_MinorUnitScale(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2293)
inline enum PPT::XlCategoryType PPT::Axis::GetCategoryType ( ) {
    enum XlCategoryType _result;
    HRESULT _hr = get_CategoryType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2294)
inline void PPT::Axis::PutCategoryType ( enum XlCategoryType RHS ) {
    HRESULT _hr = put_CategoryType(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2295)
inline double PPT::Axis::GetLeft ( ) {
    double _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2296)
inline double PPT::Axis::GetTop ( ) {
    double _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2297)
inline double PPT::Axis::GetWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2298)
inline double PPT::Axis::GetHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2299)
inline enum PPT::XlDisplayUnit PPT::Axis::GetDisplayUnit ( ) {
    enum XlDisplayUnit _result;
    HRESULT _hr = get_DisplayUnit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2300)
inline void PPT::Axis::PutDisplayUnit ( enum XlDisplayUnit RHS ) {
    HRESULT _hr = put_DisplayUnit(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2301)
inline double PPT::Axis::GetDisplayUnitCustom ( ) {
    double _result = 0;
    HRESULT _hr = get_DisplayUnitCustom(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2302)
inline void PPT::Axis::PutDisplayUnitCustom ( double RHS ) {
    HRESULT _hr = put_DisplayUnitCustom(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2303)
inline VARIANT_BOOL PPT::Axis::GetHasDisplayUnitLabel ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasDisplayUnitLabel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2304)
inline void PPT::Axis::PutHasDisplayUnitLabel ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_HasDisplayUnitLabel(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2305)
inline PPT::DisplayUnitLabelPtr PPT::Axis::GetDisplayUnitLabel ( ) {
    struct DisplayUnitLabel * _result = 0;
    HRESULT _hr = get_DisplayUnitLabel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DisplayUnitLabelPtr(_result, false);
}

#pragma implementation_key(2306)
inline PPT::ChartBorderPtr PPT::Axis::GetBorder ( ) {
    struct ChartBorder * _result = 0;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartBorderPtr(_result, false);
}

#pragma implementation_key(2307)
inline PPT::ChartFormatPtr PPT::Axis::GetFormat ( ) {
    struct ChartFormat * _result = 0;
    HRESULT _hr = get_Format(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFormatPtr(_result, false);
}

#pragma implementation_key(2308)
inline long PPT::Axis::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2309)
inline IDispatchPtr PPT::Axis::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2310)
inline PPT::_ApplicationPtr PPT::Axis::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2311)
inline enum PPT::XlCategorySortOrder PPT::Axis::GetCategorySortOrder ( ) {
    enum XlCategorySortOrder _result;
    HRESULT _hr = get_CategorySortOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2312)
inline void PPT::Axis::PutCategorySortOrder ( enum XlCategorySortOrder RHS ) {
    HRESULT _hr = put_CategorySortOrder(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2313)
inline _variant_t PPT::Axis::GetProperty ( _bstr_t Id ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetProperty(Id, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2314)
inline HRESULT PPT::Axis::SetProperty ( _bstr_t Id, const _variant_t & Value ) {
    HRESULT _hr = raw_SetProperty(Id, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface Axes wrapper method implementations
//

#pragma implementation_key(2315)
inline long PPT::Axes::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2316)
inline long PPT::Axes::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2317)
inline IDispatchPtr PPT::Axes::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2318)
inline PPT::_ApplicationPtr PPT::Axes::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2319)
inline PPT::AxisPtr PPT::Axes::Item ( enum XlAxisType Type, enum XlAxisGroup AxisGroup ) {
    struct Axis * _result = 0;
    HRESULT _hr = raw_Item(Type, AxisGroup, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AxisPtr(_result, false);
}

#pragma implementation_key(2320)
inline IUnknownPtr PPT::Axes::_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(2321)
inline PPT::AxisPtr PPT::Axes::_Default ( enum XlAxisType Type, enum XlAxisGroup AxisGroup ) {
    struct Axis * _result = 0;
    HRESULT _hr = raw__Default(Type, AxisGroup, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AxisPtr(_result, false);
}

//
// interface Series wrapper method implementations
//

#pragma implementation_key(2322)
inline IDispatchPtr PPT::Series::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2323)
inline enum PPT::XlAxisGroup PPT::Series::GetAxisGroup ( ) {
    enum XlAxisGroup _result;
    HRESULT _hr = get_AxisGroup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2324)
inline void PPT::Series::PutAxisGroup ( enum XlAxisGroup RHS ) {
    HRESULT _hr = put_AxisGroup(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2325)
inline PPT::ChartBorderPtr PPT::Series::GetBorder ( ) {
    struct ChartBorder * _result = 0;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartBorderPtr(_result, false);
}

#pragma implementation_key(2326)
inline _variant_t PPT::Series::ClearFormats ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_ClearFormats(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2327)
inline _variant_t PPT::Series::Copy ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Copy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2328)
inline IDispatchPtr PPT::Series::DataLabels ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_DataLabels(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2329)
inline _variant_t PPT::Series::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2330)
inline _variant_t PPT::Series::ErrorBar ( enum XlErrorBarDirection Direction, enum XlErrorBarInclude Include, enum XlErrorBarType Type, const _variant_t & Amount, const _variant_t & MinusValues ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_ErrorBar(Direction, Include, Type, Amount, MinusValues, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2331)
inline PPT::ErrorBarsPtr PPT::Series::GetErrorBars ( ) {
    struct ErrorBars * _result = 0;
    HRESULT _hr = get_ErrorBars(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ErrorBarsPtr(_result, false);
}

#pragma implementation_key(2332)
inline long PPT::Series::GetExplosion ( ) {
    long _result = 0;
    HRESULT _hr = get_Explosion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2333)
inline void PPT::Series::PutExplosion ( long RHS ) {
    HRESULT _hr = put_Explosion(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2334)
inline _bstr_t PPT::Series::GetFormula ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Formula(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2335)
inline void PPT::Series::PutFormula ( _bstr_t RHS ) {
    HRESULT _hr = put_Formula(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2336)
inline _bstr_t PPT::Series::GetFormulaLocal ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FormulaLocal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2337)
inline void PPT::Series::PutFormulaLocal ( _bstr_t RHS ) {
    HRESULT _hr = put_FormulaLocal(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2338)
inline _bstr_t PPT::Series::GetFormulaR1C1 ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FormulaR1C1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2339)
inline void PPT::Series::PutFormulaR1C1 ( _bstr_t RHS ) {
    HRESULT _hr = put_FormulaR1C1(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2340)
inline _bstr_t PPT::Series::GetFormulaR1C1Local ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FormulaR1C1Local(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2341)
inline void PPT::Series::PutFormulaR1C1Local ( _bstr_t RHS ) {
    HRESULT _hr = put_FormulaR1C1Local(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2342)
inline VARIANT_BOOL PPT::Series::GetHasDataLabels ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasDataLabels(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2343)
inline void PPT::Series::PutHasDataLabels ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_HasDataLabels(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2344)
inline VARIANT_BOOL PPT::Series::GetHasErrorBars ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasErrorBars(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2345)
inline void PPT::Series::PutHasErrorBars ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_HasErrorBars(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2346)
inline PPT::InteriorPtr PPT::Series::GetInterior ( ) {
    struct Interior * _result = 0;
    HRESULT _hr = get_Interior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return InteriorPtr(_result, false);
}

#pragma implementation_key(2347)
inline PPT::ChartFillFormatPtr PPT::Series::GetFill ( ) {
    struct ChartFillFormat * _result = 0;
    HRESULT _hr = get_Fill(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFillFormatPtr(_result, false);
}

#pragma implementation_key(2348)
inline VARIANT_BOOL PPT::Series::GetInvertIfNegative ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_InvertIfNegative(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2349)
inline void PPT::Series::PutInvertIfNegative ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_InvertIfNegative(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2350)
inline long PPT::Series::GetMarkerBackgroundColor ( ) {
    long _result = 0;
    HRESULT _hr = get_MarkerBackgroundColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2351)
inline void PPT::Series::PutMarkerBackgroundColor ( long RHS ) {
    HRESULT _hr = put_MarkerBackgroundColor(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2352)
inline enum PPT::XlColorIndex PPT::Series::GetMarkerBackgroundColorIndex ( ) {
    enum XlColorIndex _result;
    HRESULT _hr = get_MarkerBackgroundColorIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2353)
inline void PPT::Series::PutMarkerBackgroundColorIndex ( enum XlColorIndex RHS ) {
    HRESULT _hr = put_MarkerBackgroundColorIndex(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2354)
inline long PPT::Series::GetMarkerForegroundColor ( ) {
    long _result = 0;
    HRESULT _hr = get_MarkerForegroundColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2355)
inline void PPT::Series::PutMarkerForegroundColor ( long RHS ) {
    HRESULT _hr = put_MarkerForegroundColor(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2356)
inline enum PPT::XlColorIndex PPT::Series::GetMarkerForegroundColorIndex ( ) {
    enum XlColorIndex _result;
    HRESULT _hr = get_MarkerForegroundColorIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2357)
inline void PPT::Series::PutMarkerForegroundColorIndex ( enum XlColorIndex RHS ) {
    HRESULT _hr = put_MarkerForegroundColorIndex(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2358)
inline long PPT::Series::GetMarkerSize ( ) {
    long _result = 0;
    HRESULT _hr = get_MarkerSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2359)
inline void PPT::Series::PutMarkerSize ( long RHS ) {
    HRESULT _hr = put_MarkerSize(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2360)
inline enum PPT::XlMarkerStyle PPT::Series::GetMarkerStyle ( ) {
    enum XlMarkerStyle _result;
    HRESULT _hr = get_MarkerStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2361)
inline void PPT::Series::PutMarkerStyle ( enum XlMarkerStyle RHS ) {
    HRESULT _hr = put_MarkerStyle(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2362)
inline _bstr_t PPT::Series::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2363)
inline void PPT::Series::PutName ( _bstr_t RHS ) {
    HRESULT _hr = put_Name(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2364)
inline _variant_t PPT::Series::Paste ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Paste(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2365)
inline enum PPT::XlChartPictureType PPT::Series::GetPictureType ( ) {
    enum XlChartPictureType _result;
    HRESULT _hr = get_PictureType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2366)
inline void PPT::Series::PutPictureType ( enum XlChartPictureType RHS ) {
    HRESULT _hr = put_PictureType(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2367)
inline long PPT::Series::GetPlotOrder ( ) {
    long _result = 0;
    HRESULT _hr = get_PlotOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2368)
inline void PPT::Series::PutPlotOrder ( long RHS ) {
    HRESULT _hr = put_PlotOrder(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2369)
inline IDispatchPtr PPT::Series::Points ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Points(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2370)
inline _variant_t PPT::Series::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2371)
inline VARIANT_BOOL PPT::Series::GetSmooth ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Smooth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2372)
inline void PPT::Series::PutSmooth ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Smooth(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2373)
inline IDispatchPtr PPT::Series::Trendlines ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Trendlines(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2374)
inline long PPT::Series::GetType ( ) {
    long _result = 0;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2375)
inline void PPT::Series::PutType ( long RHS ) {
    HRESULT _hr = put_Type(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2376)
inline enum Office::XlChartType PPT::Series::GetChartType ( ) {
    enum Office::XlChartType _result;
    HRESULT _hr = get_ChartType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2377)
inline void PPT::Series::PutChartType ( enum Office::XlChartType RHS ) {
    HRESULT _hr = put_ChartType(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2378)
inline HRESULT PPT::Series::ApplyCustomType ( enum Office::XlChartType ChartType ) {
    HRESULT _hr = raw_ApplyCustomType(ChartType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2379)
inline _variant_t PPT::Series::GetValues ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Values(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2380)
inline void PPT::Series::PutValues ( const _variant_t & RHS ) {
    HRESULT _hr = put_Values(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2381)
inline _variant_t PPT::Series::GetXValues ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_XValues(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2382)
inline void PPT::Series::PutXValues ( const _variant_t & RHS ) {
    HRESULT _hr = put_XValues(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2383)
inline _variant_t PPT::Series::GetBubbleSizes ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_BubbleSizes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2384)
inline void PPT::Series::PutBubbleSizes ( const _variant_t & RHS ) {
    HRESULT _hr = put_BubbleSizes(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2385)
inline enum PPT::XlBarShape PPT::Series::GetBarShape ( ) {
    enum XlBarShape _result;
    HRESULT _hr = get_BarShape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2386)
inline void PPT::Series::PutBarShape ( enum XlBarShape RHS ) {
    HRESULT _hr = put_BarShape(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2387)
inline VARIANT_BOOL PPT::Series::GetApplyPictToSides ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ApplyPictToSides(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2388)
inline void PPT::Series::PutApplyPictToSides ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ApplyPictToSides(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2389)
inline VARIANT_BOOL PPT::Series::GetApplyPictToFront ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ApplyPictToFront(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2390)
inline void PPT::Series::PutApplyPictToFront ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ApplyPictToFront(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2391)
inline VARIANT_BOOL PPT::Series::GetApplyPictToEnd ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ApplyPictToEnd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2392)
inline void PPT::Series::PutApplyPictToEnd ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ApplyPictToEnd(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2393)
inline VARIANT_BOOL PPT::Series::GetHas3DEffect ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Has3DEffect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2394)
inline void PPT::Series::PutHas3DEffect ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Has3DEffect(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2395)
inline VARIANT_BOOL PPT::Series::GetShadow ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Shadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2396)
inline void PPT::Series::PutShadow ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Shadow(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2397)
inline VARIANT_BOOL PPT::Series::GetHasLeaderLines ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasLeaderLines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2398)
inline void PPT::Series::PutHasLeaderLines ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_HasLeaderLines(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2399)
inline PPT::LeaderLinesPtr PPT::Series::GetLeaderLines ( ) {
    struct LeaderLines * _result = 0;
    HRESULT _hr = get_LeaderLines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return LeaderLinesPtr(_result, false);
}

#pragma implementation_key(2400)
inline PPT::ChartFormatPtr PPT::Series::GetFormat ( ) {
    struct ChartFormat * _result = 0;
    HRESULT _hr = get_Format(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFormatPtr(_result, false);
}

#pragma implementation_key(2401)
inline long PPT::Series::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2402)
inline double PPT::Series::GetPictureUnit2 ( ) {
    double _result = 0;
    HRESULT _hr = get_PictureUnit2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2403)
inline void PPT::Series::PutPictureUnit2 ( double RHS ) {
    HRESULT _hr = put_PictureUnit2(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2404)
inline PPT::_ApplicationPtr PPT::Series::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2405)
inline _variant_t PPT::Series::_ApplyDataLabels ( enum XlDataLabelsType Type, const _variant_t & LegendKey, const _variant_t & AutoText, const _variant_t & HasLeaderLines ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw__ApplyDataLabels(Type, LegendKey, AutoText, HasLeaderLines, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2406)
inline _variant_t PPT::Series::ApplyDataLabels ( enum XlDataLabelsType Type, const _variant_t & LegendKey, const _variant_t & AutoText, const _variant_t & HasLeaderLines, const _variant_t & ShowSeriesName, const _variant_t & ShowCategoryName, const _variant_t & ShowValue, const _variant_t & ShowPercentage, const _variant_t & ShowBubbleSize, const _variant_t & Separator ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_ApplyDataLabels(Type, LegendKey, AutoText, HasLeaderLines, ShowSeriesName, ShowCategoryName, ShowValue, ShowPercentage, ShowBubbleSize, Separator, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2407)
inline long PPT::Series::GetPictureUnit ( ) {
    long _result = 0;
    HRESULT _hr = get_PictureUnit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2408)
inline void PPT::Series::PutPictureUnit ( long RHS ) {
    HRESULT _hr = put_PictureUnit(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2409)
inline long PPT::Series::GetPlotColorIndex ( ) {
    long _result = 0;
    HRESULT _hr = get_PlotColorIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2410)
inline long PPT::Series::GetInvertColor ( ) {
    long _result = 0;
    HRESULT _hr = get_InvertColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2411)
inline void PPT::Series::PutInvertColor ( long RHS ) {
    HRESULT _hr = put_InvertColor(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2412)
inline enum PPT::XlColorIndex PPT::Series::GetInvertColorIndex ( ) {
    enum XlColorIndex _result;
    HRESULT _hr = get_InvertColorIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2413)
inline void PPT::Series::PutInvertColorIndex ( enum XlColorIndex RHS ) {
    HRESULT _hr = put_InvertColorIndex(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2414)
inline VARIANT_BOOL PPT::Series::GetIsFiltered ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsFiltered(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2415)
inline void PPT::Series::PutIsFiltered ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_IsFiltered(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2416)
inline enum PPT::XlParentDataLabelOptions PPT::Series::GetParentDataLabelOption ( ) {
    enum XlParentDataLabelOptions _result;
    HRESULT _hr = get_ParentDataLabelOption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2417)
inline void PPT::Series::PutParentDataLabelOption ( enum XlParentDataLabelOptions RHS ) {
    HRESULT _hr = put_ParentDataLabelOption(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2418)
inline VARIANT_BOOL PPT::Series::GetQuartileCalculationInclusiveMedian ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_QuartileCalculationInclusiveMedian(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2419)
inline void PPT::Series::PutQuartileCalculationInclusiveMedian ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_QuartileCalculationInclusiveMedian(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2420)
inline enum PPT::XlValueSortOrder PPT::Series::GetValueSortOrder ( ) {
    enum XlValueSortOrder _result;
    HRESULT _hr = get_ValueSortOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2421)
inline void PPT::Series::PutValueSortOrder ( enum XlValueSortOrder RHS ) {
    HRESULT _hr = put_ValueSortOrder(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2422)
inline enum PPT::XlGeoProjectionType PPT::Series::GetGeoProjectionType ( ) {
    enum XlGeoProjectionType _result;
    HRESULT _hr = get_GeoProjectionType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2423)
inline void PPT::Series::PutGeoProjectionType ( enum XlGeoProjectionType RHS ) {
    HRESULT _hr = put_GeoProjectionType(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2424)
inline enum PPT::XlGeoMappingLevel PPT::Series::GetGeoMappingLevel ( ) {
    enum XlGeoMappingLevel _result;
    HRESULT _hr = get_GeoMappingLevel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2425)
inline void PPT::Series::PutGeoMappingLevel ( enum XlGeoMappingLevel RHS ) {
    HRESULT _hr = put_GeoMappingLevel(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2426)
inline enum PPT::XlRegionLabelOptions PPT::Series::GetRegionLabelOption ( ) {
    enum XlRegionLabelOptions _result;
    HRESULT _hr = get_RegionLabelOption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2427)
inline void PPT::Series::PutRegionLabelOption ( enum XlRegionLabelOptions RHS ) {
    HRESULT _hr = put_RegionLabelOption(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2428)
inline enum PPT::XlSeriesColorGradientStyle PPT::Series::GetSeriesColorGradientStyle ( ) {
    enum XlSeriesColorGradientStyle _result;
    HRESULT _hr = get_SeriesColorGradientStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2429)
inline void PPT::Series::PutSeriesColorGradientStyle ( enum XlSeriesColorGradientStyle RHS ) {
    HRESULT _hr = put_SeriesColorGradientStyle(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2430)
inline _variant_t PPT::Series::GetProperty ( _bstr_t Id ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetProperty(Id, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2431)
inline HRESULT PPT::Series::SetProperty ( _bstr_t Id, const _variant_t & Value ) {
    HRESULT _hr = raw_SetProperty(Id, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface SeriesCollection wrapper method implementations
//

#pragma implementation_key(2432)
inline IDispatchPtr PPT::SeriesCollection::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2433)
inline long PPT::SeriesCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2434)
inline _variant_t PPT::SeriesCollection::Extend ( const _variant_t & Source, const _variant_t & Rowcol, const _variant_t & CategoryLabels ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Extend(Source, Rowcol, CategoryLabels, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2435)
inline PPT::SeriesPtr PPT::SeriesCollection::Item ( const _variant_t & Index ) {
    struct Series * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SeriesPtr(_result, false);
}

#pragma implementation_key(2436)
inline IUnknownPtr PPT::SeriesCollection::_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(2437)
inline PPT::SeriesPtr PPT::SeriesCollection::NewSeries ( ) {
    struct Series * _result = 0;
    HRESULT _hr = raw_NewSeries(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SeriesPtr(_result, false);
}

#pragma implementation_key(2438)
inline long PPT::SeriesCollection::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2439)
inline PPT::_ApplicationPtr PPT::SeriesCollection::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2440)
inline PPT::SeriesPtr PPT::SeriesCollection::Add ( const _variant_t & Source, enum XlRowCol Rowcol, const _variant_t & SeriesLabels, const _variant_t & CategoryLabels, const _variant_t & Replace ) {
    struct Series * _result = 0;
    HRESULT _hr = raw_Add(Source, Rowcol, SeriesLabels, CategoryLabels, Replace, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SeriesPtr(_result, false);
}

#pragma implementation_key(2441)
inline PPT::SeriesPtr PPT::SeriesCollection::_Default ( const _variant_t & Index ) {
    struct Series * _result = 0;
    HRESULT _hr = raw__Default(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SeriesPtr(_result, false);
}

//
// interface FullSeriesCollection wrapper method implementations
//

#pragma implementation_key(2442)
inline IDispatchPtr PPT::FullSeriesCollection::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2443)
inline long PPT::FullSeriesCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2444)
inline PPT::SeriesPtr PPT::FullSeriesCollection::Item ( const _variant_t & Index ) {
    struct Series * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SeriesPtr(_result, false);
}

#pragma implementation_key(2445)
inline IUnknownPtr PPT::FullSeriesCollection::_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(2446)
inline PPT::_ApplicationPtr PPT::FullSeriesCollection::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2447)
inline long PPT::FullSeriesCollection::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2448)
inline PPT::SeriesPtr PPT::FullSeriesCollection::_Default ( const _variant_t & Index ) {
    struct Series * _result = 0;
    HRESULT _hr = raw__Default(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SeriesPtr(_result, false);
}

//
// interface _Application wrapper method implementations
//

#pragma implementation_key(2449)
inline PPT::PresentationsPtr PPT::_Application::GetPresentations ( ) {
    struct Presentations * _result = 0;
    HRESULT _hr = get_Presentations(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PresentationsPtr(_result, false);
}

#pragma implementation_key(2450)
inline PPT::DocumentWindowsPtr PPT::_Application::GetWindows ( ) {
    struct DocumentWindows * _result = 0;
    HRESULT _hr = get_Windows(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DocumentWindowsPtr(_result, false);
}

#pragma implementation_key(2451)
inline IUnknownPtr PPT::_Application::GetDialogs ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get_Dialogs(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(2452)
inline PPT::DocumentWindowPtr PPT::_Application::GetActiveWindow ( ) {
    struct DocumentWindow * _result = 0;
    HRESULT _hr = get_ActiveWindow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DocumentWindowPtr(_result, false);
}

#pragma implementation_key(2453)
inline PPT::_PresentationPtr PPT::_Application::GetActivePresentation ( ) {
    struct _Presentation * _result = 0;
    HRESULT _hr = get_ActivePresentation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _PresentationPtr(_result, false);
}

#pragma implementation_key(2454)
inline PPT::SlideShowWindowsPtr PPT::_Application::GetSlideShowWindows ( ) {
    struct SlideShowWindows * _result = 0;
    HRESULT _hr = get_SlideShowWindows(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SlideShowWindowsPtr(_result, false);
}

#pragma implementation_key(2455)
inline Office::_CommandBarsPtr PPT::_Application::GetCommandBars ( ) {
    struct Office::_CommandBars * _result = 0;
    HRESULT _hr = get_CommandBars(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::_CommandBarsPtr(_result, false);
}

#pragma implementation_key(2456)
inline _bstr_t PPT::_Application::GetPath ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Path(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2457)
inline _bstr_t PPT::_Application::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2458)
inline _bstr_t PPT::_Application::GetCaption ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2459)
inline void PPT::_Application::PutCaption ( _bstr_t Caption ) {
    HRESULT _hr = put_Caption(Caption);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2460)
inline Office::AssistantPtr PPT::_Application::GetAssistant ( ) {
    struct Office::Assistant * _result = 0;
    HRESULT _hr = get_Assistant(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::AssistantPtr(_result, false);
}

#pragma implementation_key(2461)
inline Office::FileSearchPtr PPT::_Application::GetFileSearch ( ) {
    struct Office::FileSearch * _result = 0;
    HRESULT _hr = get_FileSearch(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::FileSearchPtr(_result, false);
}

#pragma implementation_key(2462)
inline Office::IFindPtr PPT::_Application::GetFileFind ( ) {
    struct Office::IFind * _result = 0;
    HRESULT _hr = get_FileFind(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::IFindPtr(_result, false);
}

#pragma implementation_key(2463)
inline _bstr_t PPT::_Application::GetBuild ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Build(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2464)
inline _bstr_t PPT::_Application::GetVersion ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Version(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2465)
inline _bstr_t PPT::_Application::GetOperatingSystem ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OperatingSystem(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2466)
inline _bstr_t PPT::_Application::GetActivePrinter ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ActivePrinter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2467)
inline long PPT::_Application::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2468)
inline PPT::AddInsPtr PPT::_Application::GetAddIns ( ) {
    struct AddIns * _result = 0;
    HRESULT _hr = get_AddIns(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AddInsPtr(_result, false);
}

#pragma implementation_key(2469)
inline VBIDE::VBEPtr PPT::_Application::GetVBE ( ) {
    struct VBIDE::VBE * _result = 0;
    HRESULT _hr = get_VBE(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return VBIDE::VBEPtr(_result, false);
}

#pragma implementation_key(2470)
inline HRESULT PPT::_Application::Help ( _bstr_t HelpFile, int ContextID ) {
    HRESULT _hr = raw_Help(HelpFile, ContextID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2471)
inline HRESULT PPT::_Application::Quit ( ) {
    HRESULT _hr = raw_Quit();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2472)
inline _variant_t PPT::_Application::Run ( _bstr_t MacroName, SAFEARRAY * * safeArrayOfParams ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Run(MacroName, safeArrayOfParams, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2473)
inline IUnknownPtr PPT::_Application::PPFileDialog ( enum PpFileDialogType Type ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_PPFileDialog(Type, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(2474)
inline HRESULT PPT::_Application::LaunchSpelling ( struct DocumentWindow * pWindow ) {
    HRESULT _hr = raw_LaunchSpelling(pWindow);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2475)
inline float PPT::_Application::GetLeft ( ) {
    float _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2476)
inline void PPT::_Application::PutLeft ( float Left ) {
    HRESULT _hr = put_Left(Left);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2477)
inline float PPT::_Application::GetTop ( ) {
    float _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2478)
inline void PPT::_Application::PutTop ( float Top ) {
    HRESULT _hr = put_Top(Top);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2479)
inline float PPT::_Application::GetWidth ( ) {
    float _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2480)
inline void PPT::_Application::PutWidth ( float Width ) {
    HRESULT _hr = put_Width(Width);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2481)
inline float PPT::_Application::GetHeight ( ) {
    float _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2482)
inline void PPT::_Application::PutHeight ( float Height ) {
    HRESULT _hr = put_Height(Height);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2483)
inline enum PPT::PpWindowState PPT::_Application::GetWindowState ( ) {
    enum PpWindowState _result;
    HRESULT _hr = get_WindowState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2484)
inline void PPT::_Application::PutWindowState ( enum PpWindowState WindowState ) {
    HRESULT _hr = put_WindowState(WindowState);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2485)
inline enum Office::MsoTriState PPT::_Application::GetVisible ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2486)
inline void PPT::_Application::PutVisible ( enum Office::MsoTriState Visible ) {
    HRESULT _hr = put_Visible(Visible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2487)
inline long PPT::_Application::GetHWND ( ) {
    long _result = 0;
    HRESULT _hr = get_HWND(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2488)
inline enum Office::MsoTriState PPT::_Application::GetActive ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Active(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2489)
inline HRESULT PPT::_Application::Activate ( ) {
    HRESULT _hr = raw_Activate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2490)
inline Office::AnswerWizardPtr PPT::_Application::GetAnswerWizard ( ) {
    struct Office::AnswerWizard * _result = 0;
    HRESULT _hr = get_AnswerWizard(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::AnswerWizardPtr(_result, false);
}

#pragma implementation_key(2491)
inline Office::COMAddInsPtr PPT::_Application::GetCOMAddIns ( ) {
    struct Office::COMAddIns * _result = 0;
    HRESULT _hr = get_COMAddIns(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::COMAddInsPtr(_result, false);
}

#pragma implementation_key(2492)
inline _bstr_t PPT::_Application::GetProductCode ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ProductCode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2493)
inline PPT::DefaultWebOptionsPtr PPT::_Application::GetDefaultWebOptions ( ) {
    struct DefaultWebOptions * _result = 0;
    HRESULT _hr = get_DefaultWebOptions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DefaultWebOptionsPtr(_result, false);
}

#pragma implementation_key(2494)
inline Office::LanguageSettingsPtr PPT::_Application::GetLanguageSettings ( ) {
    struct Office::LanguageSettings * _result = 0;
    HRESULT _hr = get_LanguageSettings(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::LanguageSettingsPtr(_result, false);
}

#pragma implementation_key(2495)
inline Office::MsoDebugOptionsPtr PPT::_Application::GetMsoDebugOptions ( ) {
    struct Office::MsoDebugOptions * _result = 0;
    HRESULT _hr = get_MsoDebugOptions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::MsoDebugOptionsPtr(_result, false);
}

#pragma implementation_key(2496)
inline enum Office::MsoTriState PPT::_Application::GetShowWindowsInTaskbar ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_ShowWindowsInTaskbar(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2497)
inline void PPT::_Application::PutShowWindowsInTaskbar ( enum Office::MsoTriState ShowWindowsInTaskbar ) {
    HRESULT _hr = put_ShowWindowsInTaskbar(ShowWindowsInTaskbar);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2498)
inline IUnknownPtr PPT::_Application::GetMarker ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get_Marker(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(2499)
inline enum Office::MsoFeatureInstall PPT::_Application::GetFeatureInstall ( ) {
    enum Office::MsoFeatureInstall _result;
    HRESULT _hr = get_FeatureInstall(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2500)
inline void PPT::_Application::PutFeatureInstall ( enum Office::MsoFeatureInstall FeatureInstall ) {
    HRESULT _hr = put_FeatureInstall(FeatureInstall);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2501)
inline VARIANT_BOOL PPT::_Application::GetOptionFlag ( long Option, VARIANT_BOOL Persist ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetOptionFlag(Option, Persist, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2502)
inline HRESULT PPT::_Application::SetOptionFlag ( long Option, VARIANT_BOOL State, VARIANT_BOOL Persist ) {
    HRESULT _hr = raw_SetOptionFlag(Option, State, Persist);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2503)
inline Office::FileDialogPtr PPT::_Application::GetFileDialog ( enum Office::MsoFileDialogType Type ) {
    struct Office::FileDialog * _result = 0;
    HRESULT _hr = get_FileDialog(Type, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::FileDialogPtr(_result, false);
}

#pragma implementation_key(2504)
inline enum Office::MsoTriState PPT::_Application::GetDisplayGridLines ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_DisplayGridLines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2505)
inline void PPT::_Application::PutDisplayGridLines ( enum Office::MsoTriState DisplayGridLines ) {
    HRESULT _hr = put_DisplayGridLines(DisplayGridLines);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2506)
inline enum Office::MsoAutomationSecurity PPT::_Application::GetAutomationSecurity ( ) {
    enum Office::MsoAutomationSecurity _result;
    HRESULT _hr = get_AutomationSecurity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2507)
inline void PPT::_Application::PutAutomationSecurity ( enum Office::MsoAutomationSecurity AutomationSecurity ) {
    HRESULT _hr = put_AutomationSecurity(AutomationSecurity);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2508)
inline Office::NewFilePtr PPT::_Application::GetNewPresentation ( ) {
    struct Office::NewFile * _result = 0;
    HRESULT _hr = get_NewPresentation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::NewFilePtr(_result, false);
}

#pragma implementation_key(2509)
inline enum PPT::PpAlertLevel PPT::_Application::GetDisplayAlerts ( ) {
    enum PpAlertLevel _result;
    HRESULT _hr = get_DisplayAlerts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2510)
inline void PPT::_Application::PutDisplayAlerts ( enum PpAlertLevel DisplayAlerts ) {
    HRESULT _hr = put_DisplayAlerts(DisplayAlerts);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2511)
inline enum Office::MsoTriState PPT::_Application::GetShowStartupDialog ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_ShowStartupDialog(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2512)
inline void PPT::_Application::PutShowStartupDialog ( enum Office::MsoTriState ShowStartupDialog ) {
    HRESULT _hr = put_ShowStartupDialog(ShowStartupDialog);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2513)
inline HRESULT PPT::_Application::SetPerfMarker ( int Marker ) {
    HRESULT _hr = raw_SetPerfMarker(Marker);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2514)
inline PPT::AutoCorrectPtr PPT::_Application::GetAutoCorrect ( ) {
    struct AutoCorrect * _result = 0;
    HRESULT _hr = get_AutoCorrect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AutoCorrectPtr(_result, false);
}

#pragma implementation_key(2515)
inline PPT::OptionsPtr PPT::_Application::GetOptions ( ) {
    struct Options * _result = 0;
    HRESULT _hr = get_Options(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return OptionsPtr(_result, false);
}

#pragma implementation_key(2516)
inline HRESULT PPT::_Application::LaunchPublishSlidesDialog ( _bstr_t SlideLibraryUrl ) {
    HRESULT _hr = raw_LaunchPublishSlidesDialog(SlideLibraryUrl);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2517)
inline HRESULT PPT::_Application::LaunchSendToPPTDialog ( VARIANT * SlideUrls ) {
    HRESULT _hr = raw_LaunchSendToPPTDialog(SlideUrls);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2518)
inline VARIANT_BOOL PPT::_Application::GetDisplayDocumentInformationPanel ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DisplayDocumentInformationPanel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2519)
inline void PPT::_Application::PutDisplayDocumentInformationPanel ( VARIANT_BOOL DisplayDocumentInformationPanel ) {
    HRESULT _hr = put_DisplayDocumentInformationPanel(DisplayDocumentInformationPanel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2520)
inline Office::IAssistancePtr PPT::_Application::GetAssistance ( ) {
    struct Office::IAssistance * _result = 0;
    HRESULT _hr = get_Assistance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::IAssistancePtr(_result, false);
}

#pragma implementation_key(2521)
inline long PPT::_Application::GetActiveEncryptionSession ( ) {
    long _result = 0;
    HRESULT _hr = get_ActiveEncryptionSession(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2522)
inline PPT::FileConvertersPtr PPT::_Application::GetFileConverters ( ) {
    struct FileConverters * _result = 0;
    HRESULT _hr = get_FileConverters(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FileConvertersPtr(_result, false);
}

#pragma implementation_key(2523)
inline Office::SmartArtLayoutsPtr PPT::_Application::GetSmartArtLayouts ( ) {
    struct Office::SmartArtLayouts * _result = 0;
    HRESULT _hr = get_SmartArtLayouts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::SmartArtLayoutsPtr(_result, false);
}

#pragma implementation_key(2524)
inline Office::SmartArtQuickStylesPtr PPT::_Application::GetSmartArtQuickStyles ( ) {
    struct Office::SmartArtQuickStyles * _result = 0;
    HRESULT _hr = get_SmartArtQuickStyles(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::SmartArtQuickStylesPtr(_result, false);
}

#pragma implementation_key(2525)
inline Office::SmartArtColorsPtr PPT::_Application::GetSmartArtColors ( ) {
    struct Office::SmartArtColors * _result = 0;
    HRESULT _hr = get_SmartArtColors(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::SmartArtColorsPtr(_result, false);
}

#pragma implementation_key(2526)
inline PPT::ProtectedViewWindowsPtr PPT::_Application::GetProtectedViewWindows ( ) {
    struct ProtectedViewWindows * _result = 0;
    HRESULT _hr = get_ProtectedViewWindows(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ProtectedViewWindowsPtr(_result, false);
}

#pragma implementation_key(2527)
inline PPT::ProtectedViewWindowPtr PPT::_Application::GetActiveProtectedViewWindow ( ) {
    struct ProtectedViewWindow * _result = 0;
    HRESULT _hr = get_ActiveProtectedViewWindow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ProtectedViewWindowPtr(_result, false);
}

#pragma implementation_key(2528)
inline VARIANT_BOOL PPT::_Application::GetIsSandboxed ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsSandboxed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2529)
inline PPT::ResampleMediaTasksPtr PPT::_Application::GetResampleMediaTasks ( ) {
    struct ResampleMediaTasks * _result = 0;
    HRESULT _hr = get_ResampleMediaTasks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ResampleMediaTasksPtr(_result, false);
}

#pragma implementation_key(2530)
inline HRESULT PPT::_Application::StartNewUndoEntry ( ) {
    HRESULT _hr = raw_StartNewUndoEntry();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2531)
inline enum Office::MsoFileValidationMode PPT::_Application::GetFileValidation ( ) {
    enum Office::MsoFileValidationMode _result;
    HRESULT _hr = get_FileValidation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2532)
inline void PPT::_Application::PutFileValidation ( enum Office::MsoFileValidationMode FileValidation ) {
    HRESULT _hr = put_FileValidation(FileValidation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2533)
inline PPT::ThemePtr PPT::_Application::OpenThemeFile ( _bstr_t themeFileName ) {
    struct Theme * _result = 0;
    HRESULT _hr = raw_OpenThemeFile(themeFileName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ThemePtr(_result, false);
}

#pragma implementation_key(2534)
inline VARIANT_BOOL PPT::_Application::GetChartDataPointTrack ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ChartDataPointTrack(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2535)
inline void PPT::_Application::PutChartDataPointTrack ( VARIANT_BOOL pfChartDataPointTrack ) {
    HRESULT _hr = put_ChartDataPointTrack(pfChartDataPointTrack);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2536)
inline enum Office::MsoTriState PPT::_Application::GetDisplayGuides ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_DisplayGuides(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2537)
inline void PPT::_Application::PutDisplayGuides ( enum Office::MsoTriState DisplayGridLines ) {
    HRESULT _hr = put_DisplayGuides(DisplayGridLines);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2538)
inline Office::DataPrivacyOptionsPtr PPT::_Application::GetDataPrivacyOptions ( ) {
    struct Office::DataPrivacyOptions * _result = 0;
    HRESULT _hr = get_DataPrivacyOptions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::DataPrivacyOptionsPtr(_result, false);
}

#pragma implementation_key(2539)
inline Office::SensitivityLabelPolicyPtr PPT::_Application::GetSensitivityLabelPolicy ( ) {
    struct Office::SensitivityLabelPolicy * _result = 0;
    HRESULT _hr = get_SensitivityLabelPolicy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::SensitivityLabelPolicyPtr(_result, false);
}

//
// interface _Global wrapper method implementations
//

#pragma implementation_key(2540)
inline PPT::_PresentationPtr PPT::_Global::GetActivePresentation ( ) {
    struct _Presentation * _result = 0;
    HRESULT _hr = get_ActivePresentation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _PresentationPtr(_result, false);
}

#pragma implementation_key(2541)
inline PPT::DocumentWindowPtr PPT::_Global::GetActiveWindow ( ) {
    struct DocumentWindow * _result = 0;
    HRESULT _hr = get_ActiveWindow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DocumentWindowPtr(_result, false);
}

#pragma implementation_key(2542)
inline PPT::AddInsPtr PPT::_Global::GetAddIns ( ) {
    struct AddIns * _result = 0;
    HRESULT _hr = get_AddIns(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AddInsPtr(_result, false);
}

#pragma implementation_key(2543)
inline PPT::_ApplicationPtr PPT::_Global::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2544)
inline Office::AssistantPtr PPT::_Global::GetAssistant ( ) {
    struct Office::Assistant * _result = 0;
    HRESULT _hr = get_Assistant(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::AssistantPtr(_result, false);
}

#pragma implementation_key(2545)
inline IUnknownPtr PPT::_Global::GetDialogs ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get_Dialogs(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(2546)
inline PPT::PresentationsPtr PPT::_Global::GetPresentations ( ) {
    struct Presentations * _result = 0;
    HRESULT _hr = get_Presentations(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PresentationsPtr(_result, false);
}

#pragma implementation_key(2547)
inline PPT::SlideShowWindowsPtr PPT::_Global::GetSlideShowWindows ( ) {
    struct SlideShowWindows * _result = 0;
    HRESULT _hr = get_SlideShowWindows(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SlideShowWindowsPtr(_result, false);
}

#pragma implementation_key(2548)
inline PPT::DocumentWindowsPtr PPT::_Global::GetWindows ( ) {
    struct DocumentWindows * _result = 0;
    HRESULT _hr = get_Windows(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DocumentWindowsPtr(_result, false);
}

#pragma implementation_key(2549)
inline Office::_CommandBarsPtr PPT::_Global::GetCommandBars ( ) {
    struct Office::_CommandBars * _result = 0;
    HRESULT _hr = get_CommandBars(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::_CommandBarsPtr(_result, false);
}

#pragma implementation_key(2550)
inline Office::AnswerWizardPtr PPT::_Global::GetAnswerWizard ( ) {
    struct Office::AnswerWizard * _result = 0;
    HRESULT _hr = get_AnswerWizard(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::AnswerWizardPtr(_result, false);
}

#pragma implementation_key(2551)
inline PPT::FileConvertersPtr PPT::_Global::GetFileConverters ( ) {
    struct FileConverters * _result = 0;
    HRESULT _hr = get_FileConverters(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FileConvertersPtr(_result, false);
}

#pragma implementation_key(2552)
inline PPT::ProtectedViewWindowsPtr PPT::_Global::GetProtectedViewWindows ( ) {
    struct ProtectedViewWindows * _result = 0;
    HRESULT _hr = get_ProtectedViewWindows(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ProtectedViewWindowsPtr(_result, false);
}

#pragma implementation_key(2553)
inline PPT::ProtectedViewWindowPtr PPT::_Global::GetActiveProtectedViewWindow ( ) {
    struct ProtectedViewWindow * _result = 0;
    HRESULT _hr = get_ActiveProtectedViewWindow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ProtectedViewWindowPtr(_result, false);
}

#pragma implementation_key(2554)
inline VARIANT_BOOL PPT::_Global::GetIsSandboxed ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsSandboxed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface Selection wrapper method implementations
//

#pragma implementation_key(2555)
inline PPT::_ApplicationPtr PPT::Selection::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2556)
inline IDispatchPtr PPT::Selection::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2557)
inline HRESULT PPT::Selection::Cut ( ) {
    HRESULT _hr = raw_Cut();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2558)
inline HRESULT PPT::Selection::Copy ( ) {
    HRESULT _hr = raw_Copy();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2559)
inline HRESULT PPT::Selection::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2560)
inline HRESULT PPT::Selection::Unselect ( ) {
    HRESULT _hr = raw_Unselect();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2561)
inline enum PPT::PpSelectionType PPT::Selection::GetType ( ) {
    enum PpSelectionType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2562)
inline PPT::SlideRangePtr PPT::Selection::GetSlideRange ( ) {
    struct SlideRange * _result = 0;
    HRESULT _hr = get_SlideRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SlideRangePtr(_result, false);
}

#pragma implementation_key(2563)
inline PPT::ShapeRangePtr PPT::Selection::GetShapeRange ( ) {
    struct ShapeRange * _result = 0;
    HRESULT _hr = get_ShapeRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

#pragma implementation_key(2564)
inline PPT::PPT_TextRangePtr PPT::Selection::GetPPT_TextRange ( ) {
    struct PPT_TextRange * _result = 0;
    HRESULT _hr = get_PPT_TextRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PPT_TextRangePtr(_result, false);
}

#pragma implementation_key(2565)
inline PPT::ShapeRangePtr PPT::Selection::GetChildShapeRange ( ) {
    struct ShapeRange * _result = 0;
    HRESULT _hr = get_ChildShapeRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

#pragma implementation_key(2566)
inline VARIANT_BOOL PPT::Selection::GetHasChildShapeRange ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasChildShapeRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2567)
inline Office::TextRange2Ptr PPT::Selection::GetTextRange2 ( ) {
    struct Office::TextRange2 * _result = 0;
    HRESULT _hr = get_TextRange2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::TextRange2Ptr(_result, false);
}

//
// interface DocumentWindow wrapper method implementations
//

#pragma implementation_key(2568)
inline PPT::_ApplicationPtr PPT::DocumentWindow::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2569)
inline IDispatchPtr PPT::DocumentWindow::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2570)
inline PPT::SelectionPtr PPT::DocumentWindow::GetSelection ( ) {
    struct Selection * _result = 0;
    HRESULT _hr = get_Selection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SelectionPtr(_result, false);
}

#pragma implementation_key(2571)
inline PPT::ViewPtr PPT::DocumentWindow::GetView ( ) {
    struct View * _result = 0;
    HRESULT _hr = get_View(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ViewPtr(_result, false);
}

#pragma implementation_key(2572)
inline PPT::_PresentationPtr PPT::DocumentWindow::GetPresentation ( ) {
    struct _Presentation * _result = 0;
    HRESULT _hr = get_Presentation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _PresentationPtr(_result, false);
}

#pragma implementation_key(2573)
inline enum PPT::PpViewType PPT::DocumentWindow::GetViewType ( ) {
    enum PpViewType _result;
    HRESULT _hr = get_ViewType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2574)
inline void PPT::DocumentWindow::PutViewType ( enum PpViewType ViewType ) {
    HRESULT _hr = put_ViewType(ViewType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2575)
inline enum Office::MsoTriState PPT::DocumentWindow::GetBlackAndWhite ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_BlackAndWhite(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2576)
inline void PPT::DocumentWindow::PutBlackAndWhite ( enum Office::MsoTriState BlackAndWhite ) {
    HRESULT _hr = put_BlackAndWhite(BlackAndWhite);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2577)
inline enum Office::MsoTriState PPT::DocumentWindow::GetActive ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Active(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2578)
inline enum PPT::PpWindowState PPT::DocumentWindow::GetWindowState ( ) {
    enum PpWindowState _result;
    HRESULT _hr = get_WindowState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2579)
inline void PPT::DocumentWindow::PutWindowState ( enum PpWindowState WindowState ) {
    HRESULT _hr = put_WindowState(WindowState);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2580)
inline _bstr_t PPT::DocumentWindow::GetCaption ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2581)
inline float PPT::DocumentWindow::GetLeft ( ) {
    float _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2582)
inline void PPT::DocumentWindow::PutLeft ( float Left ) {
    HRESULT _hr = put_Left(Left);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2583)
inline float PPT::DocumentWindow::GetTop ( ) {
    float _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2584)
inline void PPT::DocumentWindow::PutTop ( float Top ) {
    HRESULT _hr = put_Top(Top);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2585)
inline float PPT::DocumentWindow::GetWidth ( ) {
    float _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2586)
inline void PPT::DocumentWindow::PutWidth ( float Width ) {
    HRESULT _hr = put_Width(Width);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2587)
inline float PPT::DocumentWindow::GetHeight ( ) {
    float _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2588)
inline void PPT::DocumentWindow::PutHeight ( float Height ) {
    HRESULT _hr = put_Height(Height);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2589)
inline HRESULT PPT::DocumentWindow::FitToPage ( ) {
    HRESULT _hr = raw_FitToPage();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2590)
inline HRESULT PPT::DocumentWindow::Activate ( ) {
    HRESULT _hr = raw_Activate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2591)
inline HRESULT PPT::DocumentWindow::LargeScroll ( int Down, int Up, int ToRight, int ToLeft ) {
    HRESULT _hr = raw_LargeScroll(Down, Up, ToRight, ToLeft);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2592)
inline HRESULT PPT::DocumentWindow::SmallScroll ( int Down, int Up, int ToRight, int ToLeft ) {
    HRESULT _hr = raw_SmallScroll(Down, Up, ToRight, ToLeft);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2593)
inline PPT::DocumentWindowPtr PPT::DocumentWindow::NewWindow ( ) {
    struct DocumentWindow * _result = 0;
    HRESULT _hr = raw_NewWindow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DocumentWindowPtr(_result, false);
}

#pragma implementation_key(2594)
inline HRESULT PPT::DocumentWindow::Close ( ) {
    HRESULT _hr = raw_Close();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2595)
inline long PPT::DocumentWindow::GetHWND ( ) {
    long _result = 0;
    HRESULT _hr = get_HWND(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2596)
inline PPT::PanePtr PPT::DocumentWindow::GetActivePane ( ) {
    struct Pane * _result = 0;
    HRESULT _hr = get_ActivePane(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PanePtr(_result, false);
}

#pragma implementation_key(2597)
inline PPT::PanesPtr PPT::DocumentWindow::GetPanes ( ) {
    struct Panes * _result = 0;
    HRESULT _hr = get_Panes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PanesPtr(_result, false);
}

#pragma implementation_key(2598)
inline long PPT::DocumentWindow::GetSplitVertical ( ) {
    long _result = 0;
    HRESULT _hr = get_SplitVertical(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2599)
inline void PPT::DocumentWindow::PutSplitVertical ( long SplitVertical ) {
    HRESULT _hr = put_SplitVertical(SplitVertical);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2600)
inline long PPT::DocumentWindow::GetSplitHorizontal ( ) {
    long _result = 0;
    HRESULT _hr = get_SplitHorizontal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2601)
inline void PPT::DocumentWindow::PutSplitHorizontal ( long SplitHorizontal ) {
    HRESULT _hr = put_SplitHorizontal(SplitHorizontal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2602)
inline IDispatchPtr PPT::DocumentWindow::RangeFromPoint ( int X, int Y ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_RangeFromPoint(X, Y, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2603)
inline int PPT::DocumentWindow::PointsToScreenPixelsX ( float Points ) {
    int _result = 0;
    HRESULT _hr = raw_PointsToScreenPixelsX(Points, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2604)
inline int PPT::DocumentWindow::PointsToScreenPixelsY ( float Points ) {
    int _result = 0;
    HRESULT _hr = raw_PointsToScreenPixelsY(Points, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2605)
inline HRESULT PPT::DocumentWindow::ScrollIntoView ( float Left, float Top, float Width, float Height, enum Office::MsoTriState Start ) {
    HRESULT _hr = raw_ScrollIntoView(Left, Top, Width, Height, Start);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2606)
inline VARIANT_BOOL PPT::DocumentWindow::IsSectionExpanded ( int sectionIndex ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsSectionExpanded(sectionIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2607)
inline HRESULT PPT::DocumentWindow::ExpandSection ( int sectionIndex, VARIANT_BOOL Expand ) {
    HRESULT _hr = raw_ExpandSection(sectionIndex, Expand);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2608)
inline HRESULT PPT::DocumentWindow::ShowInsertAppDialog ( int Filter ) {
    HRESULT _hr = raw_ShowInsertAppDialog(Filter);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface DocumentWindows wrapper method implementations
//

#pragma implementation_key(2609)
inline PPT::_ApplicationPtr PPT::DocumentWindows::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2610)
inline IDispatchPtr PPT::DocumentWindows::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2611)
inline PPT::DocumentWindowPtr PPT::DocumentWindows::Item ( int Index ) {
    struct DocumentWindow * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DocumentWindowPtr(_result, false);
}

#pragma implementation_key(2612)
inline HRESULT PPT::DocumentWindows::Arrange ( enum PpArrangeStyle arrangeStyle ) {
    HRESULT _hr = raw_Arrange(arrangeStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface Slides wrapper method implementations
//

#pragma implementation_key(2613)
inline PPT::_ApplicationPtr PPT::Slides::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2614)
inline IDispatchPtr PPT::Slides::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2615)
inline PPT::_SlidePtr PPT::Slides::Item ( const _variant_t & Index ) {
    struct _Slide * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _SlidePtr(_result, false);
}

#pragma implementation_key(2616)
inline PPT::_SlidePtr PPT::Slides::FindBySlideID ( long SlideID ) {
    struct _Slide * _result = 0;
    HRESULT _hr = raw_FindBySlideID(SlideID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _SlidePtr(_result, false);
}

#pragma implementation_key(2617)
inline PPT::_SlidePtr PPT::Slides::Add ( int Index, enum PpSlideLayout Layout ) {
    struct _Slide * _result = 0;
    HRESULT _hr = raw_Add(Index, Layout, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _SlidePtr(_result, false);
}

#pragma implementation_key(2618)
inline int PPT::Slides::InsertFromFile ( _bstr_t FileName, int Index, int SlideStart, int SlideEnd ) {
    int _result = 0;
    HRESULT _hr = raw_InsertFromFile(FileName, Index, SlideStart, SlideEnd, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2619)
inline PPT::SlideRangePtr PPT::Slides::Range ( const _variant_t & Index ) {
    struct SlideRange * _result = 0;
    HRESULT _hr = raw_Range(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SlideRangePtr(_result, false);
}

#pragma implementation_key(2620)
inline PPT::SlideRangePtr PPT::Slides::Paste ( int Index ) {
    struct SlideRange * _result = 0;
    HRESULT _hr = raw_Paste(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SlideRangePtr(_result, false);
}

#pragma implementation_key(2621)
inline PPT::_SlidePtr PPT::Slides::AddSlide ( int Index, struct CustomLayout * pCustomLayout ) {
    struct _Slide * _result = 0;
    HRESULT _hr = raw_AddSlide(Index, pCustomLayout, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _SlidePtr(_result, false);
}

//
// interface _Slide wrapper method implementations
//

#pragma implementation_key(2622)
inline PPT::_ApplicationPtr PPT::_Slide::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2623)
inline IDispatchPtr PPT::_Slide::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2624)
inline PPT::ShapesPtr PPT::_Slide::GetShapes ( ) {
    struct Shapes * _result = 0;
    HRESULT _hr = get_Shapes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapesPtr(_result, false);
}

#pragma implementation_key(2625)
inline PPT::HeadersFootersPtr PPT::_Slide::GetHeadersFooters ( ) {
    struct HeadersFooters * _result = 0;
    HRESULT _hr = get_HeadersFooters(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return HeadersFootersPtr(_result, false);
}

#pragma implementation_key(2626)
inline PPT::SlideShowTransitionPtr PPT::_Slide::GetSlideShowTransition ( ) {
    struct SlideShowTransition * _result = 0;
    HRESULT _hr = get_SlideShowTransition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SlideShowTransitionPtr(_result, false);
}

#pragma implementation_key(2627)
inline PPT::ColorSchemePtr PPT::_Slide::GetColorScheme ( ) {
    struct ColorScheme * _result = 0;
    HRESULT _hr = get_ColorScheme(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColorSchemePtr(_result, false);
}

#pragma implementation_key(2628)
inline void PPT::_Slide::PutColorScheme ( struct ColorScheme * ColorScheme ) {
    HRESULT _hr = put_ColorScheme(ColorScheme);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2629)
inline PPT::ShapeRangePtr PPT::_Slide::GetBackground ( ) {
    struct ShapeRange * _result = 0;
    HRESULT _hr = get_Background(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

#pragma implementation_key(2630)
inline _bstr_t PPT::_Slide::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2631)
inline void PPT::_Slide::PutName ( _bstr_t Name ) {
    HRESULT _hr = put_Name(Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2632)
inline long PPT::_Slide::GetSlideID ( ) {
    long _result = 0;
    HRESULT _hr = get_SlideID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2633)
inline int PPT::_Slide::GetPrintSteps ( ) {
    int _result = 0;
    HRESULT _hr = get_PrintSteps(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2634)
inline HRESULT PPT::_Slide::Select ( ) {
    HRESULT _hr = raw_Select();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2635)
inline HRESULT PPT::_Slide::Cut ( ) {
    HRESULT _hr = raw_Cut();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2636)
inline HRESULT PPT::_Slide::Copy ( ) {
    HRESULT _hr = raw_Copy();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2637)
inline enum PPT::PpSlideLayout PPT::_Slide::GetLayout ( ) {
    enum PpSlideLayout _result;
    HRESULT _hr = get_Layout(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2638)
inline void PPT::_Slide::PutLayout ( enum PpSlideLayout Layout ) {
    HRESULT _hr = put_Layout(Layout);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2639)
inline PPT::SlideRangePtr PPT::_Slide::Duplicate ( ) {
    struct SlideRange * _result = 0;
    HRESULT _hr = raw_Duplicate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SlideRangePtr(_result, false);
}

#pragma implementation_key(2640)
inline HRESULT PPT::_Slide::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2641)
inline PPT::TagsPtr PPT::_Slide::GetTags ( ) {
    struct Tags * _result = 0;
    HRESULT _hr = get_Tags(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TagsPtr(_result, false);
}

#pragma implementation_key(2642)
inline int PPT::_Slide::GetSlideIndex ( ) {
    int _result = 0;
    HRESULT _hr = get_SlideIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2643)
inline int PPT::_Slide::GetSlideNumber ( ) {
    int _result = 0;
    HRESULT _hr = get_SlideNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2644)
inline enum Office::MsoTriState PPT::_Slide::GetDisplayMasterShapes ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_DisplayMasterShapes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2645)
inline void PPT::_Slide::PutDisplayMasterShapes ( enum Office::MsoTriState DisplayMasterShapes ) {
    HRESULT _hr = put_DisplayMasterShapes(DisplayMasterShapes);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2646)
inline enum Office::MsoTriState PPT::_Slide::GetFollowMasterBackground ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_FollowMasterBackground(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2647)
inline void PPT::_Slide::PutFollowMasterBackground ( enum Office::MsoTriState FollowMasterBackground ) {
    HRESULT _hr = put_FollowMasterBackground(FollowMasterBackground);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2648)
inline PPT::SlideRangePtr PPT::_Slide::GetNotesPage ( ) {
    struct SlideRange * _result = 0;
    HRESULT _hr = get_NotesPage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SlideRangePtr(_result, false);
}

#pragma implementation_key(2649)
inline PPT::_MasterPtr PPT::_Slide::GetMaster ( ) {
    struct _Master * _result = 0;
    HRESULT _hr = get_Master(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _MasterPtr(_result, false);
}

#pragma implementation_key(2650)
inline PPT::HyperlinksPtr PPT::_Slide::GetHyperlinks ( ) {
    struct Hyperlinks * _result = 0;
    HRESULT _hr = get_Hyperlinks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return HyperlinksPtr(_result, false);
}

#pragma implementation_key(2651)
inline HRESULT PPT::_Slide::Export ( _bstr_t FileName, _bstr_t FilterName, int ScaleWidth, int ScaleHeight ) {
    HRESULT _hr = raw_Export(FileName, FilterName, ScaleWidth, ScaleHeight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2652)
inline Office::ScriptsPtr PPT::_Slide::GetScripts ( ) {
    struct Office::Scripts * _result = 0;
    HRESULT _hr = get_Scripts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::ScriptsPtr(_result, false);
}

#pragma implementation_key(2653)
inline PPT::CommentsPtr PPT::_Slide::GetComments ( ) {
    struct Comments * _result = 0;
    HRESULT _hr = get_Comments(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CommentsPtr(_result, false);
}

#pragma implementation_key(2654)
inline PPT::DesignPtr PPT::_Slide::GetDesign ( ) {
    struct Design * _result = 0;
    HRESULT _hr = get_Design(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DesignPtr(_result, false);
}

#pragma implementation_key(2655)
inline void PPT::_Slide::PutDesign ( struct Design * Design ) {
    HRESULT _hr = put_Design(Design);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2656)
inline HRESULT PPT::_Slide::MoveTo ( int toPos ) {
    HRESULT _hr = raw_MoveTo(toPos);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2657)
inline PPT::TimeLinePtr PPT::_Slide::GetTimeLine ( ) {
    struct TimeLine * _result = 0;
    HRESULT _hr = get_TimeLine(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TimeLinePtr(_result, false);
}

#pragma implementation_key(2658)
inline HRESULT PPT::_Slide::ApplyTemplate ( _bstr_t FileName ) {
    HRESULT _hr = raw_ApplyTemplate(FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2659)
inline int PPT::_Slide::GetSectionNumber ( ) {
    int _result = 0;
    HRESULT _hr = get_SectionNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2660)
inline PPT::CustomLayoutPtr PPT::_Slide::GetCustomLayout ( ) {
    struct CustomLayout * _result = 0;
    HRESULT _hr = get_CustomLayout(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CustomLayoutPtr(_result, false);
}

#pragma implementation_key(2661)
inline void PPT::_Slide::PutCustomLayout ( struct CustomLayout * CustomLayout ) {
    HRESULT _hr = put_CustomLayout(CustomLayout);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2662)
inline HRESULT PPT::_Slide::ApplyTheme ( _bstr_t themeName ) {
    HRESULT _hr = raw_ApplyTheme(themeName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2663)
inline Office::ThemeColorSchemePtr PPT::_Slide::GetThemeColorScheme ( ) {
    struct Office::ThemeColorScheme * _result = 0;
    HRESULT _hr = get_ThemeColorScheme(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::ThemeColorSchemePtr(_result, false);
}

#pragma implementation_key(2664)
inline HRESULT PPT::_Slide::ApplyThemeColorScheme ( _bstr_t themeColorSchemeName ) {
    HRESULT _hr = raw_ApplyThemeColorScheme(themeColorSchemeName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2665)
inline enum Office::MsoBackgroundStyleIndex PPT::_Slide::GetBackgroundStyle ( ) {
    enum Office::MsoBackgroundStyleIndex _result;
    HRESULT _hr = get_BackgroundStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2666)
inline void PPT::_Slide::PutBackgroundStyle ( enum Office::MsoBackgroundStyleIndex BackgroundStyle ) {
    HRESULT _hr = put_BackgroundStyle(BackgroundStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2667)
inline PPT::CustomerDataPtr PPT::_Slide::GetCustomerData ( ) {
    struct CustomerData * _result = 0;
    HRESULT _hr = get_CustomerData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CustomerDataPtr(_result, false);
}

#pragma implementation_key(2668)
inline HRESULT PPT::_Slide::PublishSlides ( _bstr_t SlideLibraryUrl, VARIANT_BOOL Overwrite, VARIANT_BOOL UseSlideOrder ) {
    HRESULT _hr = raw_PublishSlides(SlideLibraryUrl, Overwrite, UseSlideOrder);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2669)
inline HRESULT PPT::_Slide::MoveToSectionStart ( int toSection ) {
    HRESULT _hr = raw_MoveToSectionStart(toSection);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2670)
inline int PPT::_Slide::GetsectionIndex ( ) {
    int _result = 0;
    HRESULT _hr = get_sectionIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2671)
inline enum Office::MsoTriState PPT::_Slide::GetHasNotesPage ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_HasNotesPage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2672)
inline HRESULT PPT::_Slide::ApplyTemplate2 ( _bstr_t FileName, _bstr_t VariantGUID ) {
    HRESULT _hr = raw_ApplyTemplate2(FileName, VariantGUID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface SlideRange wrapper method implementations
//

#pragma implementation_key(2673)
inline PPT::_ApplicationPtr PPT::SlideRange::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2674)
inline IDispatchPtr PPT::SlideRange::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2675)
inline PPT::ShapesPtr PPT::SlideRange::GetShapes ( ) {
    struct Shapes * _result = 0;
    HRESULT _hr = get_Shapes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapesPtr(_result, false);
}

#pragma implementation_key(2676)
inline PPT::HeadersFootersPtr PPT::SlideRange::GetHeadersFooters ( ) {
    struct HeadersFooters * _result = 0;
    HRESULT _hr = get_HeadersFooters(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return HeadersFootersPtr(_result, false);
}

#pragma implementation_key(2677)
inline PPT::SlideShowTransitionPtr PPT::SlideRange::GetSlideShowTransition ( ) {
    struct SlideShowTransition * _result = 0;
    HRESULT _hr = get_SlideShowTransition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SlideShowTransitionPtr(_result, false);
}

#pragma implementation_key(2678)
inline PPT::ColorSchemePtr PPT::SlideRange::GetColorScheme ( ) {
    struct ColorScheme * _result = 0;
    HRESULT _hr = get_ColorScheme(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColorSchemePtr(_result, false);
}

#pragma implementation_key(2679)
inline void PPT::SlideRange::PutColorScheme ( struct ColorScheme * ColorScheme ) {
    HRESULT _hr = put_ColorScheme(ColorScheme);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2680)
inline PPT::ShapeRangePtr PPT::SlideRange::GetBackground ( ) {
    struct ShapeRange * _result = 0;
    HRESULT _hr = get_Background(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

#pragma implementation_key(2681)
inline _bstr_t PPT::SlideRange::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2682)
inline void PPT::SlideRange::PutName ( _bstr_t Name ) {
    HRESULT _hr = put_Name(Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2683)
inline long PPT::SlideRange::GetSlideID ( ) {
    long _result = 0;
    HRESULT _hr = get_SlideID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2684)
inline int PPT::SlideRange::GetPrintSteps ( ) {
    int _result = 0;
    HRESULT _hr = get_PrintSteps(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2685)
inline HRESULT PPT::SlideRange::Select ( ) {
    HRESULT _hr = raw_Select();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2686)
inline HRESULT PPT::SlideRange::Cut ( ) {
    HRESULT _hr = raw_Cut();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2687)
inline HRESULT PPT::SlideRange::Copy ( ) {
    HRESULT _hr = raw_Copy();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2688)
inline enum PPT::PpSlideLayout PPT::SlideRange::GetLayout ( ) {
    enum PpSlideLayout _result;
    HRESULT _hr = get_Layout(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2689)
inline void PPT::SlideRange::PutLayout ( enum PpSlideLayout Layout ) {
    HRESULT _hr = put_Layout(Layout);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2690)
inline PPT::SlideRangePtr PPT::SlideRange::Duplicate ( ) {
    struct SlideRange * _result = 0;
    HRESULT _hr = raw_Duplicate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SlideRangePtr(_result, false);
}

#pragma implementation_key(2691)
inline HRESULT PPT::SlideRange::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2692)
inline PPT::TagsPtr PPT::SlideRange::GetTags ( ) {
    struct Tags * _result = 0;
    HRESULT _hr = get_Tags(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TagsPtr(_result, false);
}

#pragma implementation_key(2693)
inline int PPT::SlideRange::GetSlideIndex ( ) {
    int _result = 0;
    HRESULT _hr = get_SlideIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2694)
inline int PPT::SlideRange::GetSlideNumber ( ) {
    int _result = 0;
    HRESULT _hr = get_SlideNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2695)
inline enum Office::MsoTriState PPT::SlideRange::GetDisplayMasterShapes ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_DisplayMasterShapes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2696)
inline void PPT::SlideRange::PutDisplayMasterShapes ( enum Office::MsoTriState DisplayMasterShapes ) {
    HRESULT _hr = put_DisplayMasterShapes(DisplayMasterShapes);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2697)
inline enum Office::MsoTriState PPT::SlideRange::GetFollowMasterBackground ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_FollowMasterBackground(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2698)
inline void PPT::SlideRange::PutFollowMasterBackground ( enum Office::MsoTriState FollowMasterBackground ) {
    HRESULT _hr = put_FollowMasterBackground(FollowMasterBackground);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2699)
inline PPT::SlideRangePtr PPT::SlideRange::GetNotesPage ( ) {
    struct SlideRange * _result = 0;
    HRESULT _hr = get_NotesPage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SlideRangePtr(_result, false);
}

#pragma implementation_key(2700)
inline PPT::_MasterPtr PPT::SlideRange::GetMaster ( ) {
    struct _Master * _result = 0;
    HRESULT _hr = get_Master(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _MasterPtr(_result, false);
}

#pragma implementation_key(2701)
inline PPT::HyperlinksPtr PPT::SlideRange::GetHyperlinks ( ) {
    struct Hyperlinks * _result = 0;
    HRESULT _hr = get_Hyperlinks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return HyperlinksPtr(_result, false);
}

#pragma implementation_key(2702)
inline HRESULT PPT::SlideRange::Export ( _bstr_t FileName, _bstr_t FilterName, int ScaleWidth, int ScaleHeight ) {
    HRESULT _hr = raw_Export(FileName, FilterName, ScaleWidth, ScaleHeight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2703)
inline PPT::_SlidePtr PPT::SlideRange::Item ( const _variant_t & Index ) {
    struct _Slide * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _SlidePtr(_result, false);
}

#pragma implementation_key(2704)
inline IUnknownPtr PPT::SlideRange::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(2705)
inline _variant_t PPT::SlideRange::_Index ( int Index ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw__Index(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2706)
inline long PPT::SlideRange::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2707)
inline Office::ScriptsPtr PPT::SlideRange::GetScripts ( ) {
    struct Office::Scripts * _result = 0;
    HRESULT _hr = get_Scripts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::ScriptsPtr(_result, false);
}

#pragma implementation_key(2708)
inline PPT::CommentsPtr PPT::SlideRange::GetComments ( ) {
    struct Comments * _result = 0;
    HRESULT _hr = get_Comments(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CommentsPtr(_result, false);
}

#pragma implementation_key(2709)
inline PPT::DesignPtr PPT::SlideRange::GetDesign ( ) {
    struct Design * _result = 0;
    HRESULT _hr = get_Design(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DesignPtr(_result, false);
}

#pragma implementation_key(2710)
inline void PPT::SlideRange::PutDesign ( struct Design * Design ) {
    HRESULT _hr = put_Design(Design);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2711)
inline HRESULT PPT::SlideRange::MoveTo ( int toPos ) {
    HRESULT _hr = raw_MoveTo(toPos);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2712)
inline PPT::TimeLinePtr PPT::SlideRange::GetTimeLine ( ) {
    struct TimeLine * _result = 0;
    HRESULT _hr = get_TimeLine(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TimeLinePtr(_result, false);
}

#pragma implementation_key(2713)
inline HRESULT PPT::SlideRange::ApplyTemplate ( _bstr_t FileName ) {
    HRESULT _hr = raw_ApplyTemplate(FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2714)
inline int PPT::SlideRange::GetSectionNumber ( ) {
    int _result = 0;
    HRESULT _hr = get_SectionNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2715)
inline PPT::CustomLayoutPtr PPT::SlideRange::GetCustomLayout ( ) {
    struct CustomLayout * _result = 0;
    HRESULT _hr = get_CustomLayout(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CustomLayoutPtr(_result, false);
}

#pragma implementation_key(2716)
inline void PPT::SlideRange::PutCustomLayout ( struct CustomLayout * CustomLayout ) {
    HRESULT _hr = put_CustomLayout(CustomLayout);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2717)
inline HRESULT PPT::SlideRange::ApplyTheme ( _bstr_t themeName ) {
    HRESULT _hr = raw_ApplyTheme(themeName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2718)
inline Office::ThemeColorSchemePtr PPT::SlideRange::GetThemeColorScheme ( ) {
    struct Office::ThemeColorScheme * _result = 0;
    HRESULT _hr = get_ThemeColorScheme(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::ThemeColorSchemePtr(_result, false);
}

#pragma implementation_key(2719)
inline HRESULT PPT::SlideRange::ApplyThemeColorScheme ( _bstr_t themeColorSchemeName ) {
    HRESULT _hr = raw_ApplyThemeColorScheme(themeColorSchemeName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2720)
inline enum Office::MsoBackgroundStyleIndex PPT::SlideRange::GetBackgroundStyle ( ) {
    enum Office::MsoBackgroundStyleIndex _result;
    HRESULT _hr = get_BackgroundStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2721)
inline void PPT::SlideRange::PutBackgroundStyle ( enum Office::MsoBackgroundStyleIndex BackgroundStyle ) {
    HRESULT _hr = put_BackgroundStyle(BackgroundStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2722)
inline PPT::CustomerDataPtr PPT::SlideRange::GetCustomerData ( ) {
    struct CustomerData * _result = 0;
    HRESULT _hr = get_CustomerData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CustomerDataPtr(_result, false);
}

#pragma implementation_key(2723)
inline HRESULT PPT::SlideRange::PublishSlides ( _bstr_t SlideLibraryUrl, VARIANT_BOOL Overwrite, VARIANT_BOOL UseSlideOrder ) {
    HRESULT _hr = raw_PublishSlides(SlideLibraryUrl, Overwrite, UseSlideOrder);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2724)
inline HRESULT PPT::SlideRange::MoveToSectionStart ( int toSection ) {
    HRESULT _hr = raw_MoveToSectionStart(toSection);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2725)
inline int PPT::SlideRange::GetsectionIndex ( ) {
    int _result = 0;
    HRESULT _hr = get_sectionIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2726)
inline enum Office::MsoTriState PPT::SlideRange::GetHasNotesPage ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_HasNotesPage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2727)
inline HRESULT PPT::SlideRange::ApplyTemplate2 ( _bstr_t FileName, _bstr_t VariantGUID ) {
    HRESULT _hr = raw_ApplyTemplate2(FileName, VariantGUID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface _Master wrapper method implementations
//

#pragma implementation_key(2728)
inline PPT::_ApplicationPtr PPT::_Master::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2729)
inline IDispatchPtr PPT::_Master::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2730)
inline PPT::ShapesPtr PPT::_Master::GetShapes ( ) {
    struct Shapes * _result = 0;
    HRESULT _hr = get_Shapes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapesPtr(_result, false);
}

#pragma implementation_key(2731)
inline PPT::HeadersFootersPtr PPT::_Master::GetHeadersFooters ( ) {
    struct HeadersFooters * _result = 0;
    HRESULT _hr = get_HeadersFooters(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return HeadersFootersPtr(_result, false);
}

#pragma implementation_key(2732)
inline PPT::ColorSchemePtr PPT::_Master::GetColorScheme ( ) {
    struct ColorScheme * _result = 0;
    HRESULT _hr = get_ColorScheme(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColorSchemePtr(_result, false);
}

#pragma implementation_key(2733)
inline void PPT::_Master::PutColorScheme ( struct ColorScheme * ColorScheme ) {
    HRESULT _hr = put_ColorScheme(ColorScheme);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2734)
inline PPT::ShapeRangePtr PPT::_Master::GetBackground ( ) {
    struct ShapeRange * _result = 0;
    HRESULT _hr = get_Background(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

#pragma implementation_key(2735)
inline _bstr_t PPT::_Master::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2736)
inline void PPT::_Master::PutName ( _bstr_t Name ) {
    HRESULT _hr = put_Name(Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2737)
inline HRESULT PPT::_Master::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2738)
inline float PPT::_Master::GetHeight ( ) {
    float _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2739)
inline float PPT::_Master::GetWidth ( ) {
    float _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2740)
inline PPT::TextStylesPtr PPT::_Master::GetTextStyles ( ) {
    struct TextStyles * _result = 0;
    HRESULT _hr = get_TextStyles(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextStylesPtr(_result, false);
}

#pragma implementation_key(2741)
inline PPT::HyperlinksPtr PPT::_Master::GetHyperlinks ( ) {
    struct Hyperlinks * _result = 0;
    HRESULT _hr = get_Hyperlinks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return HyperlinksPtr(_result, false);
}

#pragma implementation_key(2742)
inline Office::ScriptsPtr PPT::_Master::GetScripts ( ) {
    struct Office::Scripts * _result = 0;
    HRESULT _hr = get_Scripts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::ScriptsPtr(_result, false);
}

#pragma implementation_key(2743)
inline PPT::DesignPtr PPT::_Master::GetDesign ( ) {
    struct Design * _result = 0;
    HRESULT _hr = get_Design(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DesignPtr(_result, false);
}

#pragma implementation_key(2744)
inline PPT::TimeLinePtr PPT::_Master::GetTimeLine ( ) {
    struct TimeLine * _result = 0;
    HRESULT _hr = get_TimeLine(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TimeLinePtr(_result, false);
}

#pragma implementation_key(2745)
inline PPT::SlideShowTransitionPtr PPT::_Master::GetSlideShowTransition ( ) {
    struct SlideShowTransition * _result = 0;
    HRESULT _hr = get_SlideShowTransition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SlideShowTransitionPtr(_result, false);
}

#pragma implementation_key(2746)
inline PPT::CustomLayoutsPtr PPT::_Master::GetCustomLayouts ( ) {
    struct CustomLayouts * _result = 0;
    HRESULT _hr = get_CustomLayouts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CustomLayoutsPtr(_result, false);
}

#pragma implementation_key(2747)
inline Office::OfficeThemePtr PPT::_Master::GetTheme ( ) {
    struct Office::OfficeTheme * _result = 0;
    HRESULT _hr = get_Theme(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::OfficeThemePtr(_result, false);
}

#pragma implementation_key(2748)
inline HRESULT PPT::_Master::ApplyTheme ( _bstr_t themeName ) {
    HRESULT _hr = raw_ApplyTheme(themeName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2749)
inline enum Office::MsoBackgroundStyleIndex PPT::_Master::GetBackgroundStyle ( ) {
    enum Office::MsoBackgroundStyleIndex _result;
    HRESULT _hr = get_BackgroundStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2750)
inline void PPT::_Master::PutBackgroundStyle ( enum Office::MsoBackgroundStyleIndex BackgroundStyle ) {
    HRESULT _hr = put_BackgroundStyle(BackgroundStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2751)
inline PPT::CustomerDataPtr PPT::_Master::GetCustomerData ( ) {
    struct CustomerData * _result = 0;
    HRESULT _hr = get_CustomerData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CustomerDataPtr(_result, false);
}

#pragma implementation_key(2752)
inline PPT::GuidesPtr PPT::_Master::GetGuides ( ) {
    struct Guides * _result = 0;
    HRESULT _hr = get_Guides(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return GuidesPtr(_result, false);
}

//
// interface Design wrapper method implementations
//

#pragma implementation_key(2753)
inline PPT::_ApplicationPtr PPT::Design::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2754)
inline IDispatchPtr PPT::Design::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2755)
inline PPT::_MasterPtr PPT::Design::GetSlideMaster ( ) {
    struct _Master * _result = 0;
    HRESULT _hr = get_SlideMaster(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _MasterPtr(_result, false);
}

#pragma implementation_key(2756)
inline PPT::_MasterPtr PPT::Design::GetTitleMaster ( ) {
    struct _Master * _result = 0;
    HRESULT _hr = get_TitleMaster(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _MasterPtr(_result, false);
}

#pragma implementation_key(2757)
inline enum Office::MsoTriState PPT::Design::GetHasTitleMaster ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_HasTitleMaster(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2758)
inline PPT::_MasterPtr PPT::Design::AddTitleMaster ( ) {
    struct _Master * _result = 0;
    HRESULT _hr = raw_AddTitleMaster(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _MasterPtr(_result, false);
}

#pragma implementation_key(2759)
inline int PPT::Design::GetIndex ( ) {
    int _result = 0;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2760)
inline _bstr_t PPT::Design::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2761)
inline void PPT::Design::PutName ( _bstr_t Name ) {
    HRESULT _hr = put_Name(Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2762)
inline enum Office::MsoTriState PPT::Design::GetPreserved ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Preserved(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2763)
inline void PPT::Design::PutPreserved ( enum Office::MsoTriState Preserved ) {
    HRESULT _hr = put_Preserved(Preserved);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2764)
inline HRESULT PPT::Design::MoveTo ( int toPos ) {
    HRESULT _hr = raw_MoveTo(toPos);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2765)
inline HRESULT PPT::Design::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface Designs wrapper method implementations
//

#pragma implementation_key(2766)
inline PPT::_ApplicationPtr PPT::Designs::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2767)
inline IDispatchPtr PPT::Designs::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2768)
inline PPT::DesignPtr PPT::Designs::Item ( const _variant_t & Index ) {
    struct Design * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DesignPtr(_result, false);
}

#pragma implementation_key(2769)
inline PPT::DesignPtr PPT::Designs::Add ( _bstr_t designName, int Index ) {
    struct Design * _result = 0;
    HRESULT _hr = raw_Add(designName, Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DesignPtr(_result, false);
}

#pragma implementation_key(2770)
inline PPT::DesignPtr PPT::Designs::Load ( _bstr_t TemplateName, int Index ) {
    struct Design * _result = 0;
    HRESULT _hr = raw_Load(TemplateName, Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DesignPtr(_result, false);
}

#pragma implementation_key(2771)
inline PPT::DesignPtr PPT::Designs::Clone ( struct Design * pOriginal, int Index ) {
    struct Design * _result = 0;
    HRESULT _hr = raw_Clone(pOriginal, Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DesignPtr(_result, false);
}

//
// interface Shapes wrapper method implementations
//

#pragma implementation_key(2772)
inline IDispatchPtr PPT::Shapes::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2773)
inline long PPT::Shapes::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2774)
inline IDispatchPtr PPT::Shapes::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2775)
inline int PPT::Shapes::GetCount ( ) {
    int _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2776)
inline PPT::PPT_ShapePtr PPT::Shapes::Item ( const _variant_t & Index ) {
    struct PPT_Shape * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PPT_ShapePtr(_result, false);
}

#pragma implementation_key(2777)
inline IUnknownPtr PPT::Shapes::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(2778)
inline PPT::PPT_ShapePtr PPT::Shapes::AddCallout ( enum Office::MsoCalloutType Type, float Left, float Top, float Width, float Height ) {
    struct PPT_Shape * _result = 0;
    HRESULT _hr = raw_AddCallout(Type, Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PPT_ShapePtr(_result, false);
}

#pragma implementation_key(2779)
inline PPT::PPT_ShapePtr PPT::Shapes::AddConnector ( enum Office::MsoConnectorType Type, float BeginX, float BeginY, float EndX, float EndY ) {
    struct PPT_Shape * _result = 0;
    HRESULT _hr = raw_AddConnector(Type, BeginX, BeginY, EndX, EndY, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PPT_ShapePtr(_result, false);
}

#pragma implementation_key(2780)
inline PPT::PPT_ShapePtr PPT::Shapes::AddCurve ( const _variant_t & SafeArrayOfPoints ) {
    struct PPT_Shape * _result = 0;
    HRESULT _hr = raw_AddCurve(SafeArrayOfPoints, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PPT_ShapePtr(_result, false);
}

#pragma implementation_key(2781)
inline PPT::PPT_ShapePtr PPT::Shapes::AddLabel ( enum Office::MsoTextOrientation Orientation, float Left, float Top, float Width, float Height ) {
    struct PPT_Shape * _result = 0;
    HRESULT _hr = raw_AddLabel(Orientation, Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PPT_ShapePtr(_result, false);
}

#pragma implementation_key(2782)
inline PPT::PPT_ShapePtr PPT::Shapes::AddLine ( float BeginX, float BeginY, float EndX, float EndY ) {
    struct PPT_Shape * _result = 0;
    HRESULT _hr = raw_AddLine(BeginX, BeginY, EndX, EndY, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PPT_ShapePtr(_result, false);
}

#pragma implementation_key(2783)
inline PPT::PPT_ShapePtr PPT::Shapes::AddPicture ( _bstr_t FileName, enum Office::MsoTriState LinkToFile, enum Office::MsoTriState SaveWithDocument, float Left, float Top, float Width, float Height ) {
    struct PPT_Shape * _result = 0;
    HRESULT _hr = raw_AddPicture(FileName, LinkToFile, SaveWithDocument, Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PPT_ShapePtr(_result, false);
}

#pragma implementation_key(2784)
inline PPT::PPT_ShapePtr PPT::Shapes::AddPolyline ( const _variant_t & SafeArrayOfPoints ) {
    struct PPT_Shape * _result = 0;
    HRESULT _hr = raw_AddPolyline(SafeArrayOfPoints, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PPT_ShapePtr(_result, false);
}

#pragma implementation_key(2785)
inline PPT::PPT_ShapePtr PPT::Shapes::AddShape ( enum Office::MsoAutoShapeType Type, float Left, float Top, float Width, float Height ) {
    struct PPT_Shape * _result = 0;
    HRESULT _hr = raw_AddShape(Type, Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PPT_ShapePtr(_result, false);
}

#pragma implementation_key(2786)
inline PPT::PPT_ShapePtr PPT::Shapes::AddTextEffect ( enum Office::MsoPresetTextEffect PresetTextEffect, _bstr_t Text, _bstr_t FontName, float FontSize, enum Office::MsoTriState FontBold, enum Office::MsoTriState FontItalic, float Left, float Top ) {
    struct PPT_Shape * _result = 0;
    HRESULT _hr = raw_AddTextEffect(PresetTextEffect, Text, FontName, FontSize, FontBold, FontItalic, Left, Top, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PPT_ShapePtr(_result, false);
}

#pragma implementation_key(2787)
inline PPT::PPT_ShapePtr PPT::Shapes::AddTextbox ( enum Office::MsoTextOrientation Orientation, float Left, float Top, float Width, float Height ) {
    struct PPT_Shape * _result = 0;
    HRESULT _hr = raw_AddTextbox(Orientation, Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PPT_ShapePtr(_result, false);
}

#pragma implementation_key(2788)
inline PPT::FreeformBuilderPtr PPT::Shapes::BuildFreeform ( enum Office::MsoEditingType EditingType, float X1, float Y1 ) {
    struct FreeformBuilder * _result = 0;
    HRESULT _hr = raw_BuildFreeform(EditingType, X1, Y1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FreeformBuilderPtr(_result, false);
}

#pragma implementation_key(2789)
inline HRESULT PPT::Shapes::SelectAll ( ) {
    HRESULT _hr = raw_SelectAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2790)
inline PPT::ShapeRangePtr PPT::Shapes::Range ( const _variant_t & Index ) {
    struct ShapeRange * _result = 0;
    HRESULT _hr = raw_Range(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

#pragma implementation_key(2791)
inline enum Office::MsoTriState PPT::Shapes::GetHasTitle ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_HasTitle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2792)
inline PPT::PPT_ShapePtr PPT::Shapes::AddTitle ( ) {
    struct PPT_Shape * _result = 0;
    HRESULT _hr = raw_AddTitle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PPT_ShapePtr(_result, false);
}

#pragma implementation_key(2793)
inline PPT::PPT_ShapePtr PPT::Shapes::GetTitle ( ) {
    struct PPT_Shape * _result = 0;
    HRESULT _hr = get_Title(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PPT_ShapePtr(_result, false);
}

#pragma implementation_key(2794)
inline PPT::PlaceholdersPtr PPT::Shapes::GetPlaceholders ( ) {
    struct Placeholders * _result = 0;
    HRESULT _hr = get_Placeholders(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PlaceholdersPtr(_result, false);
}

#pragma implementation_key(2795)
inline PPT::PPT_ShapePtr PPT::Shapes::AddOLEObject ( float Left, float Top, float Width, float Height, _bstr_t ClassName, _bstr_t FileName, enum Office::MsoTriState DisplayAsIcon, _bstr_t IconFileName, int IconIndex, _bstr_t IconLabel, enum Office::MsoTriState Link ) {
    struct PPT_Shape * _result = 0;
    HRESULT _hr = raw_AddOLEObject(Left, Top, Width, Height, ClassName, FileName, DisplayAsIcon, IconFileName, IconIndex, IconLabel, Link, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PPT_ShapePtr(_result, false);
}

#pragma implementation_key(2796)
inline PPT::PPT_ShapePtr PPT::Shapes::AddComment ( float Left, float Top, float Width, float Height ) {
    struct PPT_Shape * _result = 0;
    HRESULT _hr = raw_AddComment(Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PPT_ShapePtr(_result, false);
}

#pragma implementation_key(2797)
inline PPT::PPT_ShapePtr PPT::Shapes::AddPlaceholder ( enum PpPlaceholderType Type, float Left, float Top, float Width, float Height ) {
    struct PPT_Shape * _result = 0;
    HRESULT _hr = raw_AddPlaceholder(Type, Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PPT_ShapePtr(_result, false);
}

#pragma implementation_key(2798)
inline PPT::PPT_ShapePtr PPT::Shapes::AddMediaObject ( _bstr_t FileName, float Left, float Top, float Width, float Height ) {
    struct PPT_Shape * _result = 0;
    HRESULT _hr = raw_AddMediaObject(FileName, Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PPT_ShapePtr(_result, false);
}

#pragma implementation_key(2799)
inline PPT::ShapeRangePtr PPT::Shapes::Paste ( ) {
    struct ShapeRange * _result = 0;
    HRESULT _hr = raw_Paste(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

#pragma implementation_key(2800)
inline PPT::PPT_ShapePtr PPT::Shapes::AddTable ( int NumRows, int NumColumns, float Left, float Top, float Width, float Height ) {
    struct PPT_Shape * _result = 0;
    HRESULT _hr = raw_AddTable(NumRows, NumColumns, Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PPT_ShapePtr(_result, false);
}

#pragma implementation_key(2801)
inline PPT::ShapeRangePtr PPT::Shapes::PasteSpecial ( enum PpPasteDataType DataType, enum Office::MsoTriState DisplayAsIcon, _bstr_t IconFileName, int IconIndex, _bstr_t IconLabel, enum Office::MsoTriState Link ) {
    struct ShapeRange * _result = 0;
    HRESULT _hr = raw_PasteSpecial(DataType, DisplayAsIcon, IconFileName, IconIndex, IconLabel, Link, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

#pragma implementation_key(2802)
inline PPT::PPT_ShapePtr PPT::Shapes::AddDiagram ( enum Office::MsoDiagramType Type, float Left, float Top, float Width, float Height ) {
    struct PPT_Shape * _result = 0;
    HRESULT _hr = raw_AddDiagram(Type, Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PPT_ShapePtr(_result, false);
}

#pragma implementation_key(2803)
inline PPT::PPT_ShapePtr PPT::Shapes::AddCanvas ( float Left, float Top, float Width, float Height ) {
    struct PPT_Shape * _result = 0;
    HRESULT _hr = raw_AddCanvas(Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PPT_ShapePtr(_result, false);
}

#pragma implementation_key(2804)
inline PPT::PPT_ShapePtr PPT::Shapes::AddChart ( enum Office::XlChartType Type, float Left, float Top, float Width, float Height ) {
    struct PPT_Shape * _result = 0;
    HRESULT _hr = raw_AddChart(Type, Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PPT_ShapePtr(_result, false);
}

#pragma implementation_key(2805)
inline PPT::PPT_ShapePtr PPT::Shapes::AddMediaObject2 ( _bstr_t FileName, enum Office::MsoTriState LinkToFile, enum Office::MsoTriState SaveWithDocument, float Left, float Top, float Width, float Height ) {
    struct PPT_Shape * _result = 0;
    HRESULT _hr = raw_AddMediaObject2(FileName, LinkToFile, SaveWithDocument, Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PPT_ShapePtr(_result, false);
}

#pragma implementation_key(2806)
inline PPT::PPT_ShapePtr PPT::Shapes::AddMediaObjectFromEmbedTag ( _bstr_t EmbedTag, float Left, float Top, float Width, float Height ) {
    struct PPT_Shape * _result = 0;
    HRESULT _hr = raw_AddMediaObjectFromEmbedTag(EmbedTag, Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PPT_ShapePtr(_result, false);
}

#pragma implementation_key(2807)
inline PPT::PPT_ShapePtr PPT::Shapes::AddSmartArt ( struct Office::SmartArtLayout * Layout, float Left, float Top, float Width, float Height ) {
    struct PPT_Shape * _result = 0;
    HRESULT _hr = raw_AddSmartArt(Layout, Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PPT_ShapePtr(_result, false);
}

#pragma implementation_key(2808)
inline PPT::PPT_ShapePtr PPT::Shapes::AddChart2 ( int Style, enum Office::XlChartType Type, float Left, float Top, float Width, float Height, VARIANT_BOOL NewLayout ) {
    struct PPT_Shape * _result = 0;
    HRESULT _hr = raw_AddChart2(Style, Type, Left, Top, Width, Height, NewLayout, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PPT_ShapePtr(_result, false);
}

#pragma implementation_key(2809)
inline PPT::PPT_ShapePtr PPT::Shapes::AddPicture2 ( _bstr_t FileName, enum Office::MsoTriState LinkToFile, enum Office::MsoTriState SaveWithDocument, float Left, float Top, float Width, float Height, enum Office::MsoPictureCompress compress ) {
    struct PPT_Shape * _result = 0;
    HRESULT _hr = raw_AddPicture2(FileName, LinkToFile, SaveWithDocument, Left, Top, Width, Height, compress, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PPT_ShapePtr(_result, false);
}

#pragma implementation_key(2810)
inline PPT::PPT_ShapePtr PPT::Shapes::AddInkShapeFromXML ( _bstr_t InkXML, float Left, float Top, float Width, float Height ) {
    struct PPT_Shape * _result = 0;
    HRESULT _hr = raw_AddInkShapeFromXML(InkXML, Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PPT_ShapePtr(_result, false);
}

#pragma implementation_key(2811)
inline PPT::PPT_ShapePtr PPT::Shapes::Add3DModel ( _bstr_t FileName, enum Office::MsoTriState LinkToFile, enum Office::MsoTriState SaveWithDocument, float Left, float Top, float Width, float Height ) {
    struct PPT_Shape * _result = 0;
    HRESULT _hr = raw_Add3DModel(FileName, LinkToFile, SaveWithDocument, Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PPT_ShapePtr(_result, false);
}

//
// interface Chart wrapper method implementations
//

#pragma implementation_key(2812)
inline IDispatchPtr PPT::Chart::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2813)
inline HRESULT PPT::Chart::ApplyDataLabels ( enum XlDataLabelsType Type, const _variant_t & LegendKey, const _variant_t & AutoText, const _variant_t & HasLeaderLines, const _variant_t & ShowSeriesName, const _variant_t & ShowCategoryName, const _variant_t & ShowValue, const _variant_t & ShowPercentage, const _variant_t & ShowBubbleSize, const _variant_t & Separator ) {
    HRESULT _hr = raw_ApplyDataLabels(Type, LegendKey, AutoText, HasLeaderLines, ShowSeriesName, ShowCategoryName, ShowValue, ShowPercentage, ShowBubbleSize, Separator);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2814)
inline enum Office::XlChartType PPT::Chart::GetChartType ( ) {
    enum Office::XlChartType _result;
    HRESULT _hr = get_ChartType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2815)
inline void PPT::Chart::PutChartType ( enum Office::XlChartType RHS ) {
    HRESULT _hr = put_ChartType(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2816)
inline VARIANT_BOOL PPT::Chart::GetHasDataTable ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasDataTable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2817)
inline void PPT::Chart::PutHasDataTable ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_HasDataTable(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2818)
inline HRESULT PPT::Chart::ApplyCustomType ( enum Office::XlChartType ChartType, const _variant_t & TypeName ) {
    HRESULT _hr = raw_ApplyCustomType(ChartType, TypeName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2819)
inline HRESULT PPT::Chart::GetChartElement ( long X, long Y, long * ElementID, long * Arg1, long * Arg2 ) {
    HRESULT _hr = raw_GetChartElement(X, Y, ElementID, Arg1, Arg2);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2820)
inline HRESULT PPT::Chart::SetSourceData ( _bstr_t Source, const _variant_t & PlotBy ) {
    HRESULT _hr = raw_SetSourceData(Source, PlotBy);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2821)
inline enum PPT::XlRowCol PPT::Chart::GetPlotBy ( ) {
    enum XlRowCol _result;
    HRESULT _hr = get_PlotBy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2822)
inline void PPT::Chart::PutPlotBy ( enum XlRowCol PlotBy ) {
    HRESULT _hr = put_PlotBy(PlotBy);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2823)
inline HRESULT PPT::Chart::AutoFormat ( long Gallery, const _variant_t & Format ) {
    HRESULT _hr = raw_AutoFormat(Gallery, Format);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2824)
inline HRESULT PPT::Chart::SetBackgroundPicture ( _bstr_t FileName ) {
    HRESULT _hr = raw_SetBackgroundPicture(FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2825)
inline PPT::DataTablePtr PPT::Chart::GetDataTable ( ) {
    struct DataTable * _result = 0;
    HRESULT _hr = get_DataTable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DataTablePtr(_result, false);
}

#pragma implementation_key(2826)
inline HRESULT PPT::Chart::Paste ( const _variant_t & Type, long lcid ) {
    HRESULT _hr = raw_Paste(Type, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2827)
inline enum PPT::XlBarShape PPT::Chart::GetBarShape ( ) {
    enum XlBarShape _result;
    HRESULT _hr = get_BarShape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2828)
inline void PPT::Chart::PutBarShape ( enum XlBarShape RHS ) {
    HRESULT _hr = put_BarShape(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2829)
inline HRESULT PPT::Chart::SetDefaultChart ( const _variant_t & Name ) {
    HRESULT _hr = raw_SetDefaultChart(Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2830)
inline HRESULT PPT::Chart::ApplyChartTemplate ( _bstr_t FileName ) {
    HRESULT _hr = raw_ApplyChartTemplate(FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2831)
inline HRESULT PPT::Chart::SaveChartTemplate ( _bstr_t FileName ) {
    HRESULT _hr = raw_SaveChartTemplate(FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2832)
inline PPT::WallsPtr PPT::Chart::GetSideWall ( ) {
    struct Walls * _result = 0;
    HRESULT _hr = get_SideWall(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return WallsPtr(_result, false);
}

#pragma implementation_key(2833)
inline PPT::WallsPtr PPT::Chart::GetBackWall ( ) {
    struct Walls * _result = 0;
    HRESULT _hr = get_BackWall(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return WallsPtr(_result, false);
}

#pragma implementation_key(2834)
inline _variant_t PPT::Chart::GetChartStyle ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ChartStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2835)
inline void PPT::Chart::PutChartStyle ( const _variant_t & RHS ) {
    HRESULT _hr = put_ChartStyle(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2836)
inline HRESULT PPT::Chart::ClearToMatchStyle ( ) {
    HRESULT _hr = raw_ClearToMatchStyle();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2837)
inline VARIANT_BOOL PPT::Chart::GetHasPivotFields ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasPivotFields(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2838)
inline void PPT::Chart::PutHasPivotFields ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_HasPivotFields(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2839)
inline void PPT::Chart::PutShowDataLabelsOverMaximum ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ShowDataLabelsOverMaximum(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2840)
inline VARIANT_BOOL PPT::Chart::GetShowDataLabelsOverMaximum ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowDataLabelsOverMaximum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2841)
inline HRESULT PPT::Chart::ApplyLayout ( long Layout, const _variant_t & ChartType ) {
    HRESULT _hr = raw_ApplyLayout(Layout, ChartType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2842)
inline HRESULT PPT::Chart::Refresh ( ) {
    HRESULT _hr = raw_Refresh();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2843)
inline PPT::ChartDataPtr PPT::Chart::GetChartData ( ) {
    struct ChartData * _result = 0;
    HRESULT _hr = get_ChartData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartDataPtr(_result, false);
}

#pragma implementation_key(2844)
inline PPT::ShapesPtr PPT::Chart::GetShapes ( ) {
    struct Shapes * _result = 0;
    HRESULT _hr = get_Shapes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapesPtr(_result, false);
}

#pragma implementation_key(2845)
inline long PPT::Chart::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2846)
inline PPT::ChartGroupPtr PPT::Chart::GetArea3DGroup ( long lcid ) {
    struct ChartGroup * _result = 0;
    HRESULT _hr = get_Area3DGroup(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartGroupPtr(_result, false);
}

#pragma implementation_key(2847)
inline IDispatchPtr PPT::Chart::AreaGroups ( const _variant_t & Index, long lcid ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_AreaGroups(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2848)
inline PPT::ChartGroupPtr PPT::Chart::GetBar3DGroup ( long lcid ) {
    struct ChartGroup * _result = 0;
    HRESULT _hr = get_Bar3DGroup(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartGroupPtr(_result, false);
}

#pragma implementation_key(2849)
inline IDispatchPtr PPT::Chart::BarGroups ( const _variant_t & Index, long lcid ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_BarGroups(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2850)
inline PPT::ChartGroupPtr PPT::Chart::GetColumn3DGroup ( long lcid ) {
    struct ChartGroup * _result = 0;
    HRESULT _hr = get_Column3DGroup(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartGroupPtr(_result, false);
}

#pragma implementation_key(2851)
inline IDispatchPtr PPT::Chart::ColumnGroups ( const _variant_t & Index, long lcid ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_ColumnGroups(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2852)
inline PPT::ChartGroupPtr PPT::Chart::GetLine3DGroup ( long lcid ) {
    struct ChartGroup * _result = 0;
    HRESULT _hr = get_Line3DGroup(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartGroupPtr(_result, false);
}

#pragma implementation_key(2853)
inline IDispatchPtr PPT::Chart::LineGroups ( const _variant_t & Index, long lcid ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_LineGroups(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2854)
inline PPT::ChartGroupPtr PPT::Chart::GetPie3DGroup ( long lcid ) {
    struct ChartGroup * _result = 0;
    HRESULT _hr = get_Pie3DGroup(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartGroupPtr(_result, false);
}

#pragma implementation_key(2855)
inline IDispatchPtr PPT::Chart::PieGroups ( const _variant_t & Index, long lcid ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_PieGroups(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2856)
inline IDispatchPtr PPT::Chart::DoughnutGroups ( const _variant_t & Index, long lcid ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_DoughnutGroups(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2857)
inline IDispatchPtr PPT::Chart::RadarGroups ( const _variant_t & Index, long lcid ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_RadarGroups(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2858)
inline PPT::ChartGroupPtr PPT::Chart::GetSurfaceGroup ( long lcid ) {
    struct ChartGroup * _result = 0;
    HRESULT _hr = get_SurfaceGroup(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartGroupPtr(_result, false);
}

#pragma implementation_key(2859)
inline IDispatchPtr PPT::Chart::XYGroups ( const _variant_t & Index, long lcid ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_XYGroups(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2860)
inline PPT::_ApplicationPtr PPT::Chart::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2861)
inline HRESULT PPT::Chart::_ApplyDataLabels ( enum XlDataLabelsType Type, const _variant_t & LegendKey, const _variant_t & AutoText, const _variant_t & HasLeaderLines, long lcid ) {
    HRESULT _hr = raw__ApplyDataLabels(Type, LegendKey, AutoText, HasLeaderLines, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2862)
inline void PPT::Chart::PutAutoScaling ( long lcid, VARIANT_BOOL RHS ) {
    HRESULT _hr = put_AutoScaling(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2863)
inline VARIANT_BOOL PPT::Chart::GetAutoScaling ( long lcid ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoScaling(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2864)
inline IDispatchPtr PPT::Chart::Axes ( const _variant_t & Type, enum XlAxisGroup AxisGroup, long lcid ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Axes(Type, AxisGroup, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2865)
inline PPT::ChartAreaPtr PPT::Chart::GetChartArea ( long lcid ) {
    struct ChartArea * _result = 0;
    HRESULT _hr = get_ChartArea(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartAreaPtr(_result, false);
}

#pragma implementation_key(2866)
inline IDispatchPtr PPT::Chart::ChartGroups ( const _variant_t & Index, long lcid ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_ChartGroups(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2867)
inline PPT::ChartTitlePtr PPT::Chart::GetChartTitle ( long lcid ) {
    struct ChartTitle * _result = 0;
    HRESULT _hr = get_ChartTitle(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartTitlePtr(_result, false);
}

#pragma implementation_key(2868)
inline HRESULT PPT::Chart::ChartWizard ( const _variant_t & Source, const _variant_t & Gallery, const _variant_t & Format, const _variant_t & PlotBy, const _variant_t & CategoryLabels, const _variant_t & SeriesLabels, const _variant_t & HasLegend, const _variant_t & Title, const _variant_t & CategoryTitle, const _variant_t & ValueTitle, const _variant_t & ExtraTitle, long lcid ) {
    HRESULT _hr = raw_ChartWizard(Source, Gallery, Format, PlotBy, CategoryLabels, SeriesLabels, HasLegend, Title, CategoryTitle, ValueTitle, ExtraTitle, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2869)
inline HRESULT PPT::Chart::Copy ( const _variant_t & Before, const _variant_t & After, long lcid ) {
    HRESULT _hr = raw_Copy(Before, After, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2870)
inline HRESULT PPT::Chart::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format, enum XlPictureAppearance Size, long LocaleID ) {
    HRESULT _hr = raw_CopyPicture(Appearance, Format, Size, LocaleID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2871)
inline PPT::CornersPtr PPT::Chart::GetCorners ( long lcid ) {
    struct Corners * _result = 0;
    HRESULT _hr = get_Corners(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CornersPtr(_result, false);
}

#pragma implementation_key(2872)
inline HRESULT PPT::Chart::Delete ( long lcid ) {
    HRESULT _hr = raw_Delete(lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2873)
inline long PPT::Chart::GetDepthPercent ( long lcid ) {
    long _result = 0;
    HRESULT _hr = get_DepthPercent(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2874)
inline void PPT::Chart::PutDepthPercent ( long lcid, long RHS ) {
    HRESULT _hr = put_DepthPercent(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2875)
inline enum PPT::XlDisplayBlanksAs PPT::Chart::GetDisplayBlanksAs ( long lcid ) {
    enum XlDisplayBlanksAs _result;
    HRESULT _hr = get_DisplayBlanksAs(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2876)
inline void PPT::Chart::PutDisplayBlanksAs ( long lcid, enum XlDisplayBlanksAs RHS ) {
    HRESULT _hr = put_DisplayBlanksAs(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2877)
inline long PPT::Chart::GetElevation ( long lcid ) {
    long _result = 0;
    HRESULT _hr = get_Elevation(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2878)
inline void PPT::Chart::PutElevation ( long lcid, long RHS ) {
    HRESULT _hr = put_Elevation(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2879)
inline VARIANT_BOOL PPT::Chart::Export ( _bstr_t FileName, const _variant_t & FilterName, const _variant_t & Interactive ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Export(FileName, FilterName, Interactive, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2880)
inline PPT::FloorPtr PPT::Chart::GetFloor ( long lcid ) {
    struct Floor * _result = 0;
    HRESULT _hr = get_Floor(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FloorPtr(_result, false);
}

#pragma implementation_key(2881)
inline long PPT::Chart::GetGapDepth ( long lcid ) {
    long _result = 0;
    HRESULT _hr = get_GapDepth(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2882)
inline void PPT::Chart::PutGapDepth ( long lcid, long RHS ) {
    HRESULT _hr = put_GapDepth(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2883)
inline _variant_t PPT::Chart::GetHasAxis ( const _variant_t & Index1, const _variant_t & Index2, long lcid ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_HasAxis(Index1, Index2, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2884)
inline void PPT::Chart::PutHasAxis ( const _variant_t & Index1, const _variant_t & Index2, long lcid, const _variant_t & RHS ) {
    HRESULT _hr = put_HasAxis(Index1, Index2, lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2885)
inline VARIANT_BOOL PPT::Chart::GetHasLegend ( long lcid ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasLegend(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2886)
inline void PPT::Chart::PutHasLegend ( long lcid, VARIANT_BOOL RHS ) {
    HRESULT _hr = put_HasLegend(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2887)
inline VARIANT_BOOL PPT::Chart::GetHasTitle ( long lcid ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasTitle(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2888)
inline void PPT::Chart::PutHasTitle ( long lcid, VARIANT_BOOL RHS ) {
    HRESULT _hr = put_HasTitle(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2889)
inline long PPT::Chart::GetHeightPercent ( long lcid ) {
    long _result = 0;
    HRESULT _hr = get_HeightPercent(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2890)
inline void PPT::Chart::PutHeightPercent ( long lcid, long RHS ) {
    HRESULT _hr = put_HeightPercent(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2891)
inline PPT::LegendPtr PPT::Chart::GetLegend ( long lcid ) {
    struct Legend * _result = 0;
    HRESULT _hr = get_Legend(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return LegendPtr(_result, false);
}

#pragma implementation_key(2892)
inline _bstr_t PPT::Chart::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2893)
inline void PPT::Chart::PutName ( _bstr_t RHS ) {
    HRESULT _hr = put_Name(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2894)
inline long PPT::Chart::GetPerspective ( long lcid ) {
    long _result = 0;
    HRESULT _hr = get_Perspective(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2895)
inline void PPT::Chart::PutPerspective ( long lcid, long RHS ) {
    HRESULT _hr = put_Perspective(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2896)
inline PPT::PlotAreaPtr PPT::Chart::GetPlotArea ( long lcid ) {
    struct PlotArea * _result = 0;
    HRESULT _hr = get_PlotArea(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PlotAreaPtr(_result, false);
}

#pragma implementation_key(2897)
inline VARIANT_BOOL PPT::Chart::GetPlotVisibleOnly ( long lcid ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PlotVisibleOnly(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2898)
inline void PPT::Chart::PutPlotVisibleOnly ( long lcid, VARIANT_BOOL RHS ) {
    HRESULT _hr = put_PlotVisibleOnly(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2899)
inline _variant_t PPT::Chart::GetRightAngleAxes ( long lcid ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_RightAngleAxes(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2900)
inline void PPT::Chart::PutRightAngleAxes ( long lcid, const _variant_t & RHS ) {
    HRESULT _hr = put_RightAngleAxes(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2901)
inline _variant_t PPT::Chart::GetRotation ( long lcid ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Rotation(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2902)
inline void PPT::Chart::PutRotation ( long lcid, const _variant_t & RHS ) {
    HRESULT _hr = put_Rotation(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2903)
inline HRESULT PPT::Chart::Select ( const _variant_t & Replace, long lcid ) {
    HRESULT _hr = raw_Select(Replace, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2904)
inline IDispatchPtr PPT::Chart::SeriesCollection ( const _variant_t & Index, long lcid ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_SeriesCollection(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2905)
inline HRESULT PPT::Chart::SetElement ( enum Office::MsoChartElementType Element ) {
    HRESULT _hr = raw_SetElement(Element);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2906)
inline long PPT::Chart::GetSubtype ( long lcid ) {
    long _result = 0;
    HRESULT _hr = get_Subtype(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2907)
inline void PPT::Chart::PutSubtype ( long lcid, long RHS ) {
    HRESULT _hr = put_Subtype(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2908)
inline long PPT::Chart::GetType ( long lcid ) {
    long _result = 0;
    HRESULT _hr = get_Type(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2909)
inline void PPT::Chart::PutType ( long lcid, long RHS ) {
    HRESULT _hr = put_Type(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2910)
inline PPT::WallsPtr PPT::Chart::GetWalls ( long lcid ) {
    struct Walls * _result = 0;
    HRESULT _hr = get_Walls(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return WallsPtr(_result, false);
}

#pragma implementation_key(2911)
inline PPT::ChartFormatPtr PPT::Chart::GetFormat ( ) {
    struct ChartFormat * _result = 0;
    HRESULT _hr = get_Format(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFormatPtr(_result, false);
}

#pragma implementation_key(2912)
inline VARIANT_BOOL PPT::Chart::GetShowReportFilterFieldButtons ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowReportFilterFieldButtons(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2913)
inline void PPT::Chart::PutShowReportFilterFieldButtons ( VARIANT_BOOL res ) {
    HRESULT _hr = put_ShowReportFilterFieldButtons(res);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2914)
inline VARIANT_BOOL PPT::Chart::GetShowLegendFieldButtons ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowLegendFieldButtons(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2915)
inline void PPT::Chart::PutShowLegendFieldButtons ( VARIANT_BOOL res ) {
    HRESULT _hr = put_ShowLegendFieldButtons(res);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2916)
inline VARIANT_BOOL PPT::Chart::GetShowAxisFieldButtons ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowAxisFieldButtons(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2917)
inline void PPT::Chart::PutShowAxisFieldButtons ( VARIANT_BOOL res ) {
    HRESULT _hr = put_ShowAxisFieldButtons(res);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2918)
inline VARIANT_BOOL PPT::Chart::GetShowValueFieldButtons ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowValueFieldButtons(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2919)
inline void PPT::Chart::PutShowValueFieldButtons ( VARIANT_BOOL res ) {
    HRESULT _hr = put_ShowValueFieldButtons(res);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2920)
inline VARIANT_BOOL PPT::Chart::GetShowAllFieldButtons ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowAllFieldButtons(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2921)
inline void PPT::Chart::PutShowAllFieldButtons ( VARIANT_BOOL res ) {
    HRESULT _hr = put_ShowAllFieldButtons(res);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2922)
inline _bstr_t PPT::Chart::GetAlternativeText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AlternativeText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2923)
inline void PPT::Chart::PutAlternativeText ( _bstr_t AlternativeText ) {
    HRESULT _hr = put_AlternativeText(AlternativeText);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2924)
inline _bstr_t PPT::Chart::GetTitle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Title(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2925)
inline void PPT::Chart::PutTitle ( _bstr_t Title ) {
    HRESULT _hr = put_Title(Title);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2926)
inline IDispatchPtr PPT::Chart::FullSeriesCollection ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_FullSeriesCollection(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2927)
inline enum PPT::XlCategoryLabelLevel PPT::Chart::GetCategoryLabelLevel ( ) {
    enum XlCategoryLabelLevel _result;
    HRESULT _hr = get_CategoryLabelLevel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2928)
inline void PPT::Chart::PutCategoryLabelLevel ( enum XlCategoryLabelLevel plevel ) {
    HRESULT _hr = put_CategoryLabelLevel(plevel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2929)
inline enum PPT::XlSeriesNameLevel PPT::Chart::GetSeriesNameLevel ( ) {
    enum XlSeriesNameLevel _result;
    HRESULT _hr = get_SeriesNameLevel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2930)
inline void PPT::Chart::PutSeriesNameLevel ( enum XlSeriesNameLevel plevel ) {
    HRESULT _hr = put_SeriesNameLevel(plevel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2931)
inline VARIANT_BOOL PPT::Chart::GetHasHiddenContent ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasHiddenContent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2932)
inline HRESULT PPT::Chart::DeleteHiddenContent ( ) {
    HRESULT _hr = raw_DeleteHiddenContent();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2933)
inline _variant_t PPT::Chart::GetChartColor ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ChartColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2934)
inline void PPT::Chart::PutChartColor ( const _variant_t & pColor ) {
    HRESULT _hr = put_ChartColor(pColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2935)
inline HRESULT PPT::Chart::ClearToMatchColorStyle ( ) {
    HRESULT _hr = raw_ClearToMatchColorStyle();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2936)
inline _variant_t PPT::Chart::GetProperty ( _bstr_t Id ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetProperty(Id, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2937)
inline HRESULT PPT::Chart::SetProperty ( _bstr_t Id, const _variant_t & Value ) {
    HRESULT _hr = raw_SetProperty(Id, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface Placeholders wrapper method implementations
//

#pragma implementation_key(2938)
inline PPT::_ApplicationPtr PPT::Placeholders::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2939)
inline IDispatchPtr PPT::Placeholders::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2940)
inline PPT::PPT_ShapePtr PPT::Placeholders::Item ( int Index ) {
    struct PPT_Shape * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PPT_ShapePtr(_result, false);
}

#pragma implementation_key(2941)
inline PPT::PPT_ShapePtr PPT::Placeholders::FindByName ( const _variant_t & Index ) {
    struct PPT_Shape * _result = 0;
    HRESULT _hr = raw_FindByName(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PPT_ShapePtr(_result, false);
}

//
// interface FreeformBuilder wrapper method implementations
//

#pragma implementation_key(2942)
inline IDispatchPtr PPT::FreeformBuilder::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2943)
inline long PPT::FreeformBuilder::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2944)
inline IDispatchPtr PPT::FreeformBuilder::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2945)
inline HRESULT PPT::FreeformBuilder::AddNodes ( enum Office::MsoSegmentType SegmentType, enum Office::MsoEditingType EditingType, float X1, float Y1, float X2, float Y2, float X3, float Y3 ) {
    HRESULT _hr = raw_AddNodes(SegmentType, EditingType, X1, Y1, X2, Y2, X3, Y3);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2946)
inline PPT::PPT_ShapePtr PPT::FreeformBuilder::ConvertToShape ( ) {
    struct PPT_Shape * _result = 0;
    HRESULT _hr = raw_ConvertToShape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PPT_ShapePtr(_result, false);
}

//
// interface PPT_Shape wrapper method implementations
//

#pragma implementation_key(2947)
inline IDispatchPtr PPT::PPT_Shape::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2948)
inline long PPT::PPT_Shape::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2949)
inline IDispatchPtr PPT::PPT_Shape::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2950)
inline HRESULT PPT::PPT_Shape::Apply ( ) {
    HRESULT _hr = raw_Apply();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2951)
inline HRESULT PPT::PPT_Shape::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2952)
inline HRESULT PPT::PPT_Shape::Flip ( enum Office::MsoFlipCmd FlipCmd ) {
    HRESULT _hr = raw_Flip(FlipCmd);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2953)
inline HRESULT PPT::PPT_Shape::IncrementLeft ( float Increment ) {
    HRESULT _hr = raw_IncrementLeft(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2954)
inline HRESULT PPT::PPT_Shape::IncrementRotation ( float Increment ) {
    HRESULT _hr = raw_IncrementRotation(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2955)
inline HRESULT PPT::PPT_Shape::IncrementTop ( float Increment ) {
    HRESULT _hr = raw_IncrementTop(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2956)
inline HRESULT PPT::PPT_Shape::PickUp ( ) {
    HRESULT _hr = raw_PickUp();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2957)
inline HRESULT PPT::PPT_Shape::RerouteConnections ( ) {
    HRESULT _hr = raw_RerouteConnections();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2958)
inline HRESULT PPT::PPT_Shape::ScaleHeight ( float Factor, enum Office::MsoTriState RelativeToOriginalSize, enum Office::MsoScaleFrom fScale ) {
    HRESULT _hr = raw_ScaleHeight(Factor, RelativeToOriginalSize, fScale);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2959)
inline HRESULT PPT::PPT_Shape::ScaleWidth ( float Factor, enum Office::MsoTriState RelativeToOriginalSize, enum Office::MsoScaleFrom fScale ) {
    HRESULT _hr = raw_ScaleWidth(Factor, RelativeToOriginalSize, fScale);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2960)
inline HRESULT PPT::PPT_Shape::SetShapesDefaultProperties ( ) {
    HRESULT _hr = raw_SetShapesDefaultProperties();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2961)
inline PPT::ShapeRangePtr PPT::PPT_Shape::Ungroup ( ) {
    struct ShapeRange * _result = 0;
    HRESULT _hr = raw_Ungroup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

#pragma implementation_key(2962)
inline HRESULT PPT::PPT_Shape::ZOrder ( enum Office::MsoZOrderCmd ZOrderCmd ) {
    HRESULT _hr = raw_ZOrder(ZOrderCmd);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2963)
inline PPT::AdjustmentsPtr PPT::PPT_Shape::GetAdjustments ( ) {
    struct Adjustments * _result = 0;
    HRESULT _hr = get_Adjustments(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AdjustmentsPtr(_result, false);
}

#pragma implementation_key(2964)
inline enum Office::MsoAutoShapeType PPT::PPT_Shape::GetAutoShapeType ( ) {
    enum Office::MsoAutoShapeType _result;
    HRESULT _hr = get_AutoShapeType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2965)
inline void PPT::PPT_Shape::PutAutoShapeType ( enum Office::MsoAutoShapeType AutoShapeType ) {
    HRESULT _hr = put_AutoShapeType(AutoShapeType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2966)
inline enum Office::MsoBlackWhiteMode PPT::PPT_Shape::GetBlackWhiteMode ( ) {
    enum Office::MsoBlackWhiteMode _result;
    HRESULT _hr = get_BlackWhiteMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2967)
inline void PPT::PPT_Shape::PutBlackWhiteMode ( enum Office::MsoBlackWhiteMode BlackWhiteMode ) {
    HRESULT _hr = put_BlackWhiteMode(BlackWhiteMode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2968)
inline PPT::CalloutFormatPtr PPT::PPT_Shape::GetCallout ( ) {
    struct CalloutFormat * _result = 0;
    HRESULT _hr = get_Callout(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CalloutFormatPtr(_result, false);
}

#pragma implementation_key(2969)
inline int PPT::PPT_Shape::GetConnectionSiteCount ( ) {
    int _result = 0;
    HRESULT _hr = get_ConnectionSiteCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2970)
inline enum Office::MsoTriState PPT::PPT_Shape::GetConnector ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Connector(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2971)
inline PPT::ConnectorFormatPtr PPT::PPT_Shape::GetConnectorFormat ( ) {
    struct ConnectorFormat * _result = 0;
    HRESULT _hr = get_ConnectorFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ConnectorFormatPtr(_result, false);
}

#pragma implementation_key(2972)
inline PPT::FillFormatPtr PPT::PPT_Shape::GetFill ( ) {
    struct FillFormat * _result = 0;
    HRESULT _hr = get_Fill(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FillFormatPtr(_result, false);
}

#pragma implementation_key(2973)
inline PPT::GroupShapesPtr PPT::PPT_Shape::GetGroupItems ( ) {
    struct GroupShapes * _result = 0;
    HRESULT _hr = get_GroupItems(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return GroupShapesPtr(_result, false);
}

#pragma implementation_key(2974)
inline float PPT::PPT_Shape::GetHeight ( ) {
    float _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2975)
inline void PPT::PPT_Shape::PutHeight ( float Height ) {
    HRESULT _hr = put_Height(Height);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2976)
inline enum Office::MsoTriState PPT::PPT_Shape::GetHorizontalFlip ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_HorizontalFlip(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2977)
inline float PPT::PPT_Shape::GetLeft ( ) {
    float _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2978)
inline void PPT::PPT_Shape::PutLeft ( float Left ) {
    HRESULT _hr = put_Left(Left);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2979)
inline PPT::LineFormatPtr PPT::PPT_Shape::GetLine ( ) {
    struct LineFormat * _result = 0;
    HRESULT _hr = get_Line(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return LineFormatPtr(_result, false);
}

#pragma implementation_key(2980)
inline enum Office::MsoTriState PPT::PPT_Shape::GetLockAspectRatio ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_LockAspectRatio(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2981)
inline void PPT::PPT_Shape::PutLockAspectRatio ( enum Office::MsoTriState LockAspectRatio ) {
    HRESULT _hr = put_LockAspectRatio(LockAspectRatio);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2982)
inline _bstr_t PPT::PPT_Shape::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2983)
inline void PPT::PPT_Shape::PutName ( _bstr_t Name ) {
    HRESULT _hr = put_Name(Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2984)
inline PPT::ShapeNodesPtr PPT::PPT_Shape::GetNodes ( ) {
    struct ShapeNodes * _result = 0;
    HRESULT _hr = get_Nodes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeNodesPtr(_result, false);
}

#pragma implementation_key(2985)
inline float PPT::PPT_Shape::GetRotation ( ) {
    float _result = 0;
    HRESULT _hr = get_Rotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2986)
inline void PPT::PPT_Shape::PutRotation ( float Rotation ) {
    HRESULT _hr = put_Rotation(Rotation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2987)
inline PPT::PictureFormatPtr PPT::PPT_Shape::GetPictureFormat ( ) {
    struct PictureFormat * _result = 0;
    HRESULT _hr = get_PictureFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PictureFormatPtr(_result, false);
}

#pragma implementation_key(2988)
inline PPT::ShadowFormatPtr PPT::PPT_Shape::GetShadow ( ) {
    struct ShadowFormat * _result = 0;
    HRESULT _hr = get_Shadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShadowFormatPtr(_result, false);
}

#pragma implementation_key(2989)
inline PPT::TextEffectFormatPtr PPT::PPT_Shape::GetTextEffect ( ) {
    struct TextEffectFormat * _result = 0;
    HRESULT _hr = get_TextEffect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextEffectFormatPtr(_result, false);
}

#pragma implementation_key(2990)
inline PPT::TextFramePtr PPT::PPT_Shape::GetTextFrame ( ) {
    struct TextFrame * _result = 0;
    HRESULT _hr = get_TextFrame(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextFramePtr(_result, false);
}

#pragma implementation_key(2991)
inline PPT::ThreeDFormatPtr PPT::PPT_Shape::GetThreeD ( ) {
    struct ThreeDFormat * _result = 0;
    HRESULT _hr = get_ThreeD(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ThreeDFormatPtr(_result, false);
}

#pragma implementation_key(2992)
inline float PPT::PPT_Shape::GetTop ( ) {
    float _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2993)
inline void PPT::PPT_Shape::PutTop ( float Top ) {
    HRESULT _hr = put_Top(Top);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2994)
inline enum Office::MsoShapeType PPT::PPT_Shape::GetType ( ) {
    enum Office::MsoShapeType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2995)
inline enum Office::MsoTriState PPT::PPT_Shape::GetVerticalFlip ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_VerticalFlip(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2996)
inline _variant_t PPT::PPT_Shape::GetVertices ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Vertices(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2997)
inline enum Office::MsoTriState PPT::PPT_Shape::GetVisible ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2998)
inline void PPT::PPT_Shape::PutVisible ( enum Office::MsoTriState Visible ) {
    HRESULT _hr = put_Visible(Visible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2999)
inline float PPT::PPT_Shape::GetWidth ( ) {
    float _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3000)
inline void PPT::PPT_Shape::PutWidth ( float Width ) {
    HRESULT _hr = put_Width(Width);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3001)
inline int PPT::PPT_Shape::GetZOrderPosition ( ) {
    int _result = 0;
    HRESULT _hr = get_ZOrderPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3002)
inline PPT::OLEFormatPtr PPT::PPT_Shape::GetOLEFormat ( ) {
    struct OLEFormat * _result = 0;
    HRESULT _hr = get_OLEFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return OLEFormatPtr(_result, false);
}

#pragma implementation_key(3003)
inline PPT::LinkFormatPtr PPT::PPT_Shape::GetLinkFormat ( ) {
    struct LinkFormat * _result = 0;
    HRESULT _hr = get_LinkFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return LinkFormatPtr(_result, false);
}

#pragma implementation_key(3004)
inline PPT::PlaceholderFormatPtr PPT::PPT_Shape::GetPlaceholderFormat ( ) {
    struct PlaceholderFormat * _result = 0;
    HRESULT _hr = get_PlaceholderFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PlaceholderFormatPtr(_result, false);
}

#pragma implementation_key(3005)
inline PPT::AnimationSettingsPtr PPT::PPT_Shape::GetAnimationSettings ( ) {
    struct AnimationSettings * _result = 0;
    HRESULT _hr = get_AnimationSettings(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AnimationSettingsPtr(_result, false);
}

#pragma implementation_key(3006)
inline PPT::ActionSettingsPtr PPT::PPT_Shape::GetActionSettings ( ) {
    struct ActionSettings * _result = 0;
    HRESULT _hr = get_ActionSettings(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ActionSettingsPtr(_result, false);
}

#pragma implementation_key(3007)
inline PPT::TagsPtr PPT::PPT_Shape::GetTags ( ) {
    struct Tags * _result = 0;
    HRESULT _hr = get_Tags(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TagsPtr(_result, false);
}

#pragma implementation_key(3008)
inline HRESULT PPT::PPT_Shape::Cut ( ) {
    HRESULT _hr = raw_Cut();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3009)
inline HRESULT PPT::PPT_Shape::Copy ( ) {
    HRESULT _hr = raw_Copy();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3010)
inline HRESULT PPT::PPT_Shape::Select ( enum Office::MsoTriState Replace ) {
    HRESULT _hr = raw_Select(Replace);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3011)
inline PPT::ShapeRangePtr PPT::PPT_Shape::Duplicate ( ) {
    struct ShapeRange * _result = 0;
    HRESULT _hr = raw_Duplicate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

#pragma implementation_key(3012)
inline enum PPT::PpMediaType PPT::PPT_Shape::GetMediaType ( ) {
    enum PpMediaType _result;
    HRESULT _hr = get_MediaType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3013)
inline enum Office::MsoTriState PPT::PPT_Shape::GetHasTextFrame ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_HasTextFrame(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3014)
inline PPT::SoundFormatPtr PPT::PPT_Shape::GetSoundFormat ( ) {
    struct SoundFormat * _result = 0;
    HRESULT _hr = get_SoundFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SoundFormatPtr(_result, false);
}

#pragma implementation_key(3015)
inline Office::ScriptPtr PPT::PPT_Shape::GetScript ( ) {
    struct Office::Script * _result = 0;
    HRESULT _hr = get_Script(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::ScriptPtr(_result, false);
}

#pragma implementation_key(3016)
inline _bstr_t PPT::PPT_Shape::GetAlternativeText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AlternativeText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3017)
inline void PPT::PPT_Shape::PutAlternativeText ( _bstr_t AlternativeText ) {
    HRESULT _hr = put_AlternativeText(AlternativeText);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3018)
inline enum Office::MsoTriState PPT::PPT_Shape::GetHasTable ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_HasTable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3019)
inline PPT::TablePtr PPT::PPT_Shape::GetTable ( ) {
    struct Table * _result = 0;
    HRESULT _hr = get_Table(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TablePtr(_result, false);
}

#pragma implementation_key(3020)
inline HRESULT PPT::PPT_Shape::Export ( _bstr_t PathName, enum PpShapeFormat Filter, int ScaleWidth, int ScaleHeight, enum PpExportMode ExportMode ) {
    HRESULT _hr = raw_Export(PathName, Filter, ScaleWidth, ScaleHeight, ExportMode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3021)
inline enum Office::MsoTriState PPT::PPT_Shape::GetHasDiagram ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_HasDiagram(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3022)
inline PPT::DiagramPtr PPT::PPT_Shape::GetDiagram ( ) {
    struct Diagram * _result = 0;
    HRESULT _hr = get_Diagram(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DiagramPtr(_result, false);
}

#pragma implementation_key(3023)
inline enum Office::MsoTriState PPT::PPT_Shape::GetHasDiagramNode ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_HasDiagramNode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3024)
inline PPT::DiagramNodePtr PPT::PPT_Shape::GetDiagramNode ( ) {
    struct DiagramNode * _result = 0;
    HRESULT _hr = get_DiagramNode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DiagramNodePtr(_result, false);
}

#pragma implementation_key(3025)
inline enum Office::MsoTriState PPT::PPT_Shape::GetChild ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Child(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3026)
inline PPT::PPT_ShapePtr PPT::PPT_Shape::GetParentGroup ( ) {
    struct PPT_Shape * _result = 0;
    HRESULT _hr = get_ParentGroup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PPT_ShapePtr(_result, false);
}

#pragma implementation_key(3027)
inline PPT::CanvasShapesPtr PPT::PPT_Shape::GetCanvasItems ( ) {
    struct CanvasShapes * _result = 0;
    HRESULT _hr = get_CanvasItems(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CanvasShapesPtr(_result, false);
}

#pragma implementation_key(3028)
inline int PPT::PPT_Shape::GetId ( ) {
    int _result = 0;
    HRESULT _hr = get_Id(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3029)
inline HRESULT PPT::PPT_Shape::CanvasCropLeft ( float Increment ) {
    HRESULT _hr = raw_CanvasCropLeft(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3030)
inline HRESULT PPT::PPT_Shape::CanvasCropTop ( float Increment ) {
    HRESULT _hr = raw_CanvasCropTop(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3031)
inline HRESULT PPT::PPT_Shape::CanvasCropRight ( float Increment ) {
    HRESULT _hr = raw_CanvasCropRight(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3032)
inline HRESULT PPT::PPT_Shape::CanvasCropBottom ( float Increment ) {
    HRESULT _hr = raw_CanvasCropBottom(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3033)
inline void PPT::PPT_Shape::PutRTF ( _bstr_t _arg1 ) {
    HRESULT _hr = put_RTF(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3034)
inline PPT::CustomerDataPtr PPT::PPT_Shape::GetCustomerData ( ) {
    struct CustomerData * _result = 0;
    HRESULT _hr = get_CustomerData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CustomerDataPtr(_result, false);
}

#pragma implementation_key(3035)
inline PPT::TextFrame2Ptr PPT::PPT_Shape::GetTextFrame2 ( ) {
    struct TextFrame2 * _result = 0;
    HRESULT _hr = get_TextFrame2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextFrame2Ptr(_result, false);
}

#pragma implementation_key(3036)
inline enum Office::MsoTriState PPT::PPT_Shape::GetHasChart ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_HasChart(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3037)
inline enum Office::MsoShapeStyleIndex PPT::PPT_Shape::GetShapeStyle ( ) {
    enum Office::MsoShapeStyleIndex _result;
    HRESULT _hr = get_ShapeStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3038)
inline void PPT::PPT_Shape::PutShapeStyle ( enum Office::MsoShapeStyleIndex ShapeStyle ) {
    HRESULT _hr = put_ShapeStyle(ShapeStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3039)
inline enum Office::MsoBackgroundStyleIndex PPT::PPT_Shape::GetBackgroundStyle ( ) {
    enum Office::MsoBackgroundStyleIndex _result;
    HRESULT _hr = get_BackgroundStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3040)
inline void PPT::PPT_Shape::PutBackgroundStyle ( enum Office::MsoBackgroundStyleIndex BackgroundStyle ) {
    HRESULT _hr = put_BackgroundStyle(BackgroundStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3041)
inline Office::SoftEdgeFormatPtr PPT::PPT_Shape::GetSoftEdge ( ) {
    struct Office::SoftEdgeFormat * _result = 0;
    HRESULT _hr = get_SoftEdge(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::SoftEdgeFormatPtr(_result, false);
}

#pragma implementation_key(3042)
inline Office::GlowFormatPtr PPT::PPT_Shape::GetGlow ( ) {
    struct Office::GlowFormat * _result = 0;
    HRESULT _hr = get_Glow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::GlowFormatPtr(_result, false);
}

#pragma implementation_key(3043)
inline Office::ReflectionFormatPtr PPT::PPT_Shape::GetReflection ( ) {
    struct Office::ReflectionFormat * _result = 0;
    HRESULT _hr = get_Reflection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::ReflectionFormatPtr(_result, false);
}

#pragma implementation_key(3044)
inline PPT::ChartPtr PPT::PPT_Shape::GetChart ( ) {
    struct Chart * _result = 0;
    HRESULT _hr = get_Chart(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartPtr(_result, false);
}

#pragma implementation_key(3045)
inline enum Office::MsoTriState PPT::PPT_Shape::GetHasSmartArt ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_HasSmartArt(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3046)
inline Office::SmartArtPtr PPT::PPT_Shape::GetSmartArt ( ) {
    struct Office::SmartArt * _result = 0;
    HRESULT _hr = get_SmartArt(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::SmartArtPtr(_result, false);
}

#pragma implementation_key(3047)
inline HRESULT PPT::PPT_Shape::ConvertTextToSmartArt ( struct Office::SmartArtLayout * Layout ) {
    HRESULT _hr = raw_ConvertTextToSmartArt(Layout);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3048)
inline _bstr_t PPT::PPT_Shape::GetTitle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Title(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3049)
inline void PPT::PPT_Shape::PutTitle ( _bstr_t Title ) {
    HRESULT _hr = put_Title(Title);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3050)
inline PPT::MediaFormatPtr PPT::PPT_Shape::GetMediaFormat ( ) {
    struct MediaFormat * _result = 0;
    HRESULT _hr = get_MediaFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return MediaFormatPtr(_result, false);
}

#pragma implementation_key(3051)
inline HRESULT PPT::PPT_Shape::PickupAnimation ( ) {
    HRESULT _hr = raw_PickupAnimation();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3052)
inline HRESULT PPT::PPT_Shape::ApplyAnimation ( ) {
    HRESULT _hr = raw_ApplyAnimation();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3053)
inline HRESULT PPT::PPT_Shape::UpgradeMedia ( ) {
    HRESULT _hr = raw_UpgradeMedia();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3054)
inline enum Office::MsoTriState PPT::PPT_Shape::GetIsNarration ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_IsNarration(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3055)
inline void PPT::PPT_Shape::PutIsNarration ( enum Office::MsoTriState IsNarration ) {
    HRESULT _hr = put_IsNarration(IsNarration);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3056)
inline _bstr_t PPT::PPT_Shape::GetInkXML ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_InkXML(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3057)
inline enum Office::MsoTriState PPT::PPT_Shape::GetHasInkXML ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_HasInkXML(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3058)
inline enum Office::MsoTriState PPT::PPT_Shape::GetHasSectionZoom ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_HasSectionZoom(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3059)
inline enum Office::MsoGraphicStyleIndex PPT::PPT_Shape::GetGraphicStyle ( ) {
    enum Office::MsoGraphicStyleIndex _result;
    HRESULT _hr = get_GraphicStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3060)
inline void PPT::PPT_Shape::PutGraphicStyle ( enum Office::MsoGraphicStyleIndex GraphicStyle ) {
    HRESULT _hr = put_GraphicStyle(GraphicStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3061)
inline PPT::Model3DFormatPtr PPT::PPT_Shape::GetModel3D ( ) {
    struct Model3DFormat * _result = 0;
    HRESULT _hr = get_Model3D(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Model3DFormatPtr(_result, false);
}

#pragma implementation_key(3062)
inline enum Office::MsoTriState PPT::PPT_Shape::GetDecorative ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Decorative(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3063)
inline void PPT::PPT_Shape::PutDecorative ( enum Office::MsoTriState fDecorative ) {
    HRESULT _hr = put_Decorative(fDecorative);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3064)
inline _bstr_t PPT::PPT_Shape::ConvertInkToText ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_ConvertInkToText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3065)
inline enum Office::MsoTriState PPT::PPT_Shape::GetLocked ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Locked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3066)
inline void PPT::PPT_Shape::PutLocked ( enum Office::MsoTriState pLocked ) {
    HRESULT _hr = put_Locked(pLocked);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ConnectorFormat wrapper method implementations
//

#pragma implementation_key(3067)
inline IDispatchPtr PPT::ConnectorFormat::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3068)
inline long PPT::ConnectorFormat::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3069)
inline IDispatchPtr PPT::ConnectorFormat::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3070)
inline HRESULT PPT::ConnectorFormat::BeginConnect ( struct PPT_Shape * ConnectedShape, int ConnectionSite ) {
    HRESULT _hr = raw_BeginConnect(ConnectedShape, ConnectionSite);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3071)
inline HRESULT PPT::ConnectorFormat::BeginDisconnect ( ) {
    HRESULT _hr = raw_BeginDisconnect();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3072)
inline HRESULT PPT::ConnectorFormat::EndConnect ( struct PPT_Shape * ConnectedShape, int ConnectionSite ) {
    HRESULT _hr = raw_EndConnect(ConnectedShape, ConnectionSite);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3073)
inline HRESULT PPT::ConnectorFormat::EndDisconnect ( ) {
    HRESULT _hr = raw_EndDisconnect();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3074)
inline enum Office::MsoTriState PPT::ConnectorFormat::GetBeginConnected ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_BeginConnected(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3075)
inline PPT::PPT_ShapePtr PPT::ConnectorFormat::GetBeginConnectedShape ( ) {
    struct PPT_Shape * _result = 0;
    HRESULT _hr = get_BeginConnectedShape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PPT_ShapePtr(_result, false);
}

#pragma implementation_key(3076)
inline int PPT::ConnectorFormat::GetBeginConnectionSite ( ) {
    int _result = 0;
    HRESULT _hr = get_BeginConnectionSite(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3077)
inline enum Office::MsoTriState PPT::ConnectorFormat::GetEndConnected ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_EndConnected(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3078)
inline PPT::PPT_ShapePtr PPT::ConnectorFormat::GetEndConnectedShape ( ) {
    struct PPT_Shape * _result = 0;
    HRESULT _hr = get_EndConnectedShape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PPT_ShapePtr(_result, false);
}

#pragma implementation_key(3079)
inline int PPT::ConnectorFormat::GetEndConnectionSite ( ) {
    int _result = 0;
    HRESULT _hr = get_EndConnectionSite(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3080)
inline enum Office::MsoConnectorType PPT::ConnectorFormat::GetType ( ) {
    enum Office::MsoConnectorType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3081)
inline void PPT::ConnectorFormat::PutType ( enum Office::MsoConnectorType Type ) {
    HRESULT _hr = put_Type(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _Presentation wrapper method implementations
//

#pragma implementation_key(3082)
inline PPT::_ApplicationPtr PPT::_Presentation::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(3083)
inline IDispatchPtr PPT::_Presentation::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3084)
inline PPT::_MasterPtr PPT::_Presentation::GetSlideMaster ( ) {
    struct _Master * _result = 0;
    HRESULT _hr = get_SlideMaster(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _MasterPtr(_result, false);
}

#pragma implementation_key(3085)
inline PPT::_MasterPtr PPT::_Presentation::GetTitleMaster ( ) {
    struct _Master * _result = 0;
    HRESULT _hr = get_TitleMaster(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _MasterPtr(_result, false);
}

#pragma implementation_key(3086)
inline enum Office::MsoTriState PPT::_Presentation::GetHasTitleMaster ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_HasTitleMaster(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3087)
inline PPT::_MasterPtr PPT::_Presentation::AddTitleMaster ( ) {
    struct _Master * _result = 0;
    HRESULT _hr = raw_AddTitleMaster(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _MasterPtr(_result, false);
}

#pragma implementation_key(3088)
inline HRESULT PPT::_Presentation::ApplyTemplate ( _bstr_t FileName ) {
    HRESULT _hr = raw_ApplyTemplate(FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3089)
inline _bstr_t PPT::_Presentation::GetTemplateName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TemplateName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3090)
inline PPT::_MasterPtr PPT::_Presentation::GetNotesMaster ( ) {
    struct _Master * _result = 0;
    HRESULT _hr = get_NotesMaster(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _MasterPtr(_result, false);
}

#pragma implementation_key(3091)
inline PPT::_MasterPtr PPT::_Presentation::GetHandoutMaster ( ) {
    struct _Master * _result = 0;
    HRESULT _hr = get_HandoutMaster(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _MasterPtr(_result, false);
}

#pragma implementation_key(3092)
inline PPT::SlidesPtr PPT::_Presentation::GetSlides ( ) {
    struct Slides * _result = 0;
    HRESULT _hr = get_Slides(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SlidesPtr(_result, false);
}

#pragma implementation_key(3093)
inline PPT::PPT_PageSetupPtr PPT::_Presentation::GetPPT_PageSetup ( ) {
    struct PPT_PageSetup * _result = 0;
    HRESULT _hr = get_PPT_PageSetup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PPT_PageSetupPtr(_result, false);
}

#pragma implementation_key(3094)
inline PPT::ColorSchemesPtr PPT::_Presentation::GetColorSchemes ( ) {
    struct ColorSchemes * _result = 0;
    HRESULT _hr = get_ColorSchemes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColorSchemesPtr(_result, false);
}

#pragma implementation_key(3095)
inline PPT::ExtraColorsPtr PPT::_Presentation::GetExtraColors ( ) {
    struct ExtraColors * _result = 0;
    HRESULT _hr = get_ExtraColors(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ExtraColorsPtr(_result, false);
}

#pragma implementation_key(3096)
inline PPT::SlideShowSettingsPtr PPT::_Presentation::GetSlideShowSettings ( ) {
    struct SlideShowSettings * _result = 0;
    HRESULT _hr = get_SlideShowSettings(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SlideShowSettingsPtr(_result, false);
}

#pragma implementation_key(3097)
inline PPT::FontsPtr PPT::_Presentation::GetFonts ( ) {
    struct Fonts * _result = 0;
    HRESULT _hr = get_Fonts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FontsPtr(_result, false);
}

#pragma implementation_key(3098)
inline PPT::DocumentWindowsPtr PPT::_Presentation::GetWindows ( ) {
    struct DocumentWindows * _result = 0;
    HRESULT _hr = get_Windows(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DocumentWindowsPtr(_result, false);
}

#pragma implementation_key(3099)
inline PPT::TagsPtr PPT::_Presentation::GetTags ( ) {
    struct Tags * _result = 0;
    HRESULT _hr = get_Tags(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TagsPtr(_result, false);
}

#pragma implementation_key(3100)
inline PPT::PPT_ShapePtr PPT::_Presentation::GetDefaultShape ( ) {
    struct PPT_Shape * _result = 0;
    HRESULT _hr = get_DefaultShape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PPT_ShapePtr(_result, false);
}

#pragma implementation_key(3101)
inline IDispatchPtr PPT::_Presentation::GetBuiltInDocumentProperties ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_BuiltInDocumentProperties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3102)
inline IDispatchPtr PPT::_Presentation::GetCustomDocumentProperties ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_CustomDocumentProperties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3103)
inline VBIDE::_VBProjectPtr PPT::_Presentation::GetVBProject ( ) {
    struct VBIDE::_VBProject * _result = 0;
    HRESULT _hr = get_VBProject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return VBIDE::_VBProjectPtr(_result, false);
}

#pragma implementation_key(3104)
inline enum Office::MsoTriState PPT::_Presentation::GetReadOnly ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_ReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3105)
inline _bstr_t PPT::_Presentation::GetFullName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FullName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3106)
inline _bstr_t PPT::_Presentation::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3107)
inline _bstr_t PPT::_Presentation::GetPath ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Path(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3108)
inline enum Office::MsoTriState PPT::_Presentation::GetSaved ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Saved(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3109)
inline void PPT::_Presentation::PutSaved ( enum Office::MsoTriState Saved ) {
    HRESULT _hr = put_Saved(Saved);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3110)
inline enum PPT::PpDirection PPT::_Presentation::GetLayoutDirection ( ) {
    enum PpDirection _result;
    HRESULT _hr = get_LayoutDirection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3111)
inline void PPT::_Presentation::PutLayoutDirection ( enum PpDirection LayoutDirection ) {
    HRESULT _hr = put_LayoutDirection(LayoutDirection);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3112)
inline PPT::DocumentWindowPtr PPT::_Presentation::NewWindow ( ) {
    struct DocumentWindow * _result = 0;
    HRESULT _hr = raw_NewWindow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DocumentWindowPtr(_result, false);
}

#pragma implementation_key(3113)
inline HRESULT PPT::_Presentation::FollowHyperlink ( _bstr_t Address, _bstr_t SubAddress, VARIANT_BOOL NewWindow, VARIANT_BOOL AddHistory, _bstr_t ExtraInfo, enum Office::MsoExtraInfoMethod Method, _bstr_t HeaderInfo ) {
    HRESULT _hr = raw_FollowHyperlink(Address, SubAddress, NewWindow, AddHistory, ExtraInfo, Method, HeaderInfo);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3114)
inline HRESULT PPT::_Presentation::AddToFavorites ( ) {
    HRESULT _hr = raw_AddToFavorites();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3115)
inline HRESULT PPT::_Presentation::Unused ( ) {
    HRESULT _hr = raw_Unused();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3116)
inline PPT::PrintOptionsPtr PPT::_Presentation::GetPrintOptions ( ) {
    struct PrintOptions * _result = 0;
    HRESULT _hr = get_PrintOptions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PrintOptionsPtr(_result, false);
}

#pragma implementation_key(3117)
inline HRESULT PPT::_Presentation::PrintOut ( int From, int To, _bstr_t PrintToFile, int Copies, enum Office::MsoTriState Collate ) {
    HRESULT _hr = raw_PrintOut(From, To, PrintToFile, Copies, Collate);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3118)
inline HRESULT PPT::_Presentation::Save ( ) {
    HRESULT _hr = raw_Save();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3119)
inline HRESULT PPT::_Presentation::SaveAs ( _bstr_t FileName, enum PpSaveAsFileType FileFormat, enum Office::MsoTriState EmbedTrueTypeFonts ) {
    HRESULT _hr = raw_SaveAs(FileName, FileFormat, EmbedTrueTypeFonts);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3120)
inline HRESULT PPT::_Presentation::SaveCopyAs ( _bstr_t FileName, enum PpSaveAsFileType FileFormat, enum Office::MsoTriState EmbedTrueTypeFonts ) {
    HRESULT _hr = raw_SaveCopyAs(FileName, FileFormat, EmbedTrueTypeFonts);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3121)
inline HRESULT PPT::_Presentation::Export ( _bstr_t Path, _bstr_t FilterName, int ScaleWidth, int ScaleHeight ) {
    HRESULT _hr = raw_Export(Path, FilterName, ScaleWidth, ScaleHeight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3122)
inline HRESULT PPT::_Presentation::Close ( ) {
    HRESULT _hr = raw_Close();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3123)
inline HRESULT PPT::_Presentation::SetUndoText ( _bstr_t Text ) {
    HRESULT _hr = raw_SetUndoText(Text);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3124)
inline IDispatchPtr PPT::_Presentation::GetContainer ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Container(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3125)
inline enum Office::MsoTriState PPT::_Presentation::GetDisplayComments ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_DisplayComments(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3126)
inline void PPT::_Presentation::PutDisplayComments ( enum Office::MsoTriState DisplayComments ) {
    HRESULT _hr = put_DisplayComments(DisplayComments);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3127)
inline enum PPT::PpFarEastLineBreakLevel PPT::_Presentation::GetFarEastLineBreakLevel ( ) {
    enum PpFarEastLineBreakLevel _result;
    HRESULT _hr = get_FarEastLineBreakLevel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3128)
inline void PPT::_Presentation::PutFarEastLineBreakLevel ( enum PpFarEastLineBreakLevel FarEastLineBreakLevel ) {
    HRESULT _hr = put_FarEastLineBreakLevel(FarEastLineBreakLevel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3129)
inline _bstr_t PPT::_Presentation::GetNoLineBreakBefore ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_NoLineBreakBefore(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3130)
inline void PPT::_Presentation::PutNoLineBreakBefore ( _bstr_t NoLineBreakBefore ) {
    HRESULT _hr = put_NoLineBreakBefore(NoLineBreakBefore);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3131)
inline _bstr_t PPT::_Presentation::GetNoLineBreakAfter ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_NoLineBreakAfter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3132)
inline void PPT::_Presentation::PutNoLineBreakAfter ( _bstr_t NoLineBreakAfter ) {
    HRESULT _hr = put_NoLineBreakAfter(NoLineBreakAfter);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3133)
inline HRESULT PPT::_Presentation::UpdateLinks ( ) {
    HRESULT _hr = raw_UpdateLinks();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3134)
inline PPT::SlideShowWindowPtr PPT::_Presentation::GetSlideShowWindow ( ) {
    struct SlideShowWindow * _result = 0;
    HRESULT _hr = get_SlideShowWindow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SlideShowWindowPtr(_result, false);
}

#pragma implementation_key(3135)
inline enum Office::MsoFarEastLineBreakLanguageID PPT::_Presentation::GetFarEastLineBreakLanguage ( ) {
    enum Office::MsoFarEastLineBreakLanguageID _result;
    HRESULT _hr = get_FarEastLineBreakLanguage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3136)
inline void PPT::_Presentation::PutFarEastLineBreakLanguage ( enum Office::MsoFarEastLineBreakLanguageID FarEastLineBreakLanguage ) {
    HRESULT _hr = put_FarEastLineBreakLanguage(FarEastLineBreakLanguage);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3137)
inline HRESULT PPT::_Presentation::WebPagePreview ( ) {
    HRESULT _hr = raw_WebPagePreview();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3138)
inline enum Office::MsoLanguageID PPT::_Presentation::GetDefaultLanguageID ( ) {
    enum Office::MsoLanguageID _result;
    HRESULT _hr = get_DefaultLanguageID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3139)
inline void PPT::_Presentation::PutDefaultLanguageID ( enum Office::MsoLanguageID DefaultLanguageID ) {
    HRESULT _hr = put_DefaultLanguageID(DefaultLanguageID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3140)
inline Office::_CommandBarsPtr PPT::_Presentation::GetCommandBars ( ) {
    struct Office::_CommandBars * _result = 0;
    HRESULT _hr = get_CommandBars(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::_CommandBarsPtr(_result, false);
}

#pragma implementation_key(3141)
inline PPT::PublishObjectsPtr PPT::_Presentation::GetPublishObjects ( ) {
    struct PublishObjects * _result = 0;
    HRESULT _hr = get_PublishObjects(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PublishObjectsPtr(_result, false);
}

#pragma implementation_key(3142)
inline PPT::WebOptionsPtr PPT::_Presentation::GetWebOptions ( ) {
    struct WebOptions * _result = 0;
    HRESULT _hr = get_WebOptions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return WebOptionsPtr(_result, false);
}

#pragma implementation_key(3143)
inline Office::HTMLProjectPtr PPT::_Presentation::GetHTMLProject ( ) {
    struct Office::HTMLProject * _result = 0;
    HRESULT _hr = get_HTMLProject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::HTMLProjectPtr(_result, false);
}

#pragma implementation_key(3144)
inline HRESULT PPT::_Presentation::ReloadAs ( enum Office::MsoEncoding cp ) {
    HRESULT _hr = raw_ReloadAs(cp);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3145)
inline HRESULT PPT::_Presentation::MakeIntoTemplate ( enum Office::MsoTriState IsDesignTemplate ) {
    HRESULT _hr = raw_MakeIntoTemplate(IsDesignTemplate);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3146)
inline enum Office::MsoTriState PPT::_Presentation::GetEnvelopeVisible ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_EnvelopeVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3147)
inline void PPT::_Presentation::PutEnvelopeVisible ( enum Office::MsoTriState EnvelopeVisible ) {
    HRESULT _hr = put_EnvelopeVisible(EnvelopeVisible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3148)
inline HRESULT PPT::_Presentation::sblt ( _bstr_t s ) {
    HRESULT _hr = raw_sblt(s);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3149)
inline enum Office::MsoTriState PPT::_Presentation::GetVBASigned ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_VBASigned(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3150)
inline enum Office::MsoTriState PPT::_Presentation::GetSnapToGrid ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_SnapToGrid(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3151)
inline void PPT::_Presentation::PutSnapToGrid ( enum Office::MsoTriState SnapToGrid ) {
    HRESULT _hr = put_SnapToGrid(SnapToGrid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3152)
inline float PPT::_Presentation::GetGridDistance ( ) {
    float _result = 0;
    HRESULT _hr = get_GridDistance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3153)
inline void PPT::_Presentation::PutGridDistance ( float GridDistance ) {
    HRESULT _hr = put_GridDistance(GridDistance);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3154)
inline PPT::DesignsPtr PPT::_Presentation::GetDesigns ( ) {
    struct Designs * _result = 0;
    HRESULT _hr = get_Designs(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DesignsPtr(_result, false);
}

#pragma implementation_key(3155)
inline HRESULT PPT::_Presentation::Merge ( _bstr_t Path ) {
    HRESULT _hr = raw_Merge(Path);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3156)
inline HRESULT PPT::_Presentation::CheckIn ( VARIANT_BOOL SaveChanges, const _variant_t & Comments, const _variant_t & MakePublic ) {
    HRESULT _hr = raw_CheckIn(SaveChanges, Comments, MakePublic);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3157)
inline VARIANT_BOOL PPT::_Presentation::CanCheckIn ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_CanCheckIn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3158)
inline Office::SignatureSetPtr PPT::_Presentation::GetSignatures ( ) {
    struct Office::SignatureSet * _result = 0;
    HRESULT _hr = get_Signatures(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::SignatureSetPtr(_result, false);
}

#pragma implementation_key(3159)
inline enum Office::MsoTriState PPT::_Presentation::GetRemovePersonalInformation ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_RemovePersonalInformation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3160)
inline void PPT::_Presentation::PutRemovePersonalInformation ( enum Office::MsoTriState RemovePersonalInformation ) {
    HRESULT _hr = put_RemovePersonalInformation(RemovePersonalInformation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3161)
inline HRESULT PPT::_Presentation::SendForReview ( _bstr_t Recipients, _bstr_t Subject, VARIANT_BOOL ShowMessage, const _variant_t & IncludeAttachment ) {
    HRESULT _hr = raw_SendForReview(Recipients, Subject, ShowMessage, IncludeAttachment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3162)
inline HRESULT PPT::_Presentation::ReplyWithChanges ( VARIANT_BOOL ShowMessage ) {
    HRESULT _hr = raw_ReplyWithChanges(ShowMessage);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3163)
inline HRESULT PPT::_Presentation::EndReview ( ) {
    HRESULT _hr = raw_EndReview();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3164)
inline enum PPT::PpRevisionInfo PPT::_Presentation::GetHasRevisionInfo ( ) {
    enum PpRevisionInfo _result;
    HRESULT _hr = get_HasRevisionInfo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3165)
inline HRESULT PPT::_Presentation::AddBaseline ( _bstr_t FileName ) {
    HRESULT _hr = raw_AddBaseline(FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3166)
inline HRESULT PPT::_Presentation::RemoveBaseline ( ) {
    HRESULT _hr = raw_RemoveBaseline();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3167)
inline _bstr_t PPT::_Presentation::GetPasswordEncryptionProvider ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PasswordEncryptionProvider(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3168)
inline _bstr_t PPT::_Presentation::GetPasswordEncryptionAlgorithm ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PasswordEncryptionAlgorithm(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3169)
inline int PPT::_Presentation::GetPasswordEncryptionKeyLength ( ) {
    int _result = 0;
    HRESULT _hr = get_PasswordEncryptionKeyLength(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3170)
inline VARIANT_BOOL PPT::_Presentation::GetPasswordEncryptionFileProperties ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PasswordEncryptionFileProperties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3171)
inline HRESULT PPT::_Presentation::SetPasswordEncryptionOptions ( _bstr_t PasswordEncryptionProvider, _bstr_t PasswordEncryptionAlgorithm, int PasswordEncryptionKeyLength, VARIANT_BOOL PasswordEncryptionFileProperties ) {
    HRESULT _hr = raw_SetPasswordEncryptionOptions(PasswordEncryptionProvider, PasswordEncryptionAlgorithm, PasswordEncryptionKeyLength, PasswordEncryptionFileProperties);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3172)
inline _bstr_t PPT::_Presentation::GetPassword ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Password(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3173)
inline void PPT::_Presentation::PutPassword ( _bstr_t Password ) {
    HRESULT _hr = put_Password(Password);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3174)
inline _bstr_t PPT::_Presentation::GetWritePassword ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_WritePassword(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3175)
inline void PPT::_Presentation::PutWritePassword ( _bstr_t WritePassword ) {
    HRESULT _hr = put_WritePassword(WritePassword);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3176)
inline Office::PermissionPtr PPT::_Presentation::GetPermission ( ) {
    struct Office::Permission * _result = 0;
    HRESULT _hr = get_Permission(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::PermissionPtr(_result, false);
}

#pragma implementation_key(3177)
inline Office::SharedWorkspacePtr PPT::_Presentation::GetSharedWorkspace ( ) {
    struct Office::SharedWorkspace * _result = 0;
    HRESULT _hr = get_SharedWorkspace(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::SharedWorkspacePtr(_result, false);
}

#pragma implementation_key(3178)
inline Office::SyncPtr PPT::_Presentation::GetSync ( ) {
    struct Office::Sync * _result = 0;
    HRESULT _hr = get_Sync(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::SyncPtr(_result, false);
}

#pragma implementation_key(3179)
inline HRESULT PPT::_Presentation::SendFaxOverInternet ( _bstr_t Recipients, _bstr_t Subject, VARIANT_BOOL ShowMessage ) {
    HRESULT _hr = raw_SendFaxOverInternet(Recipients, Subject, ShowMessage);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3180)
inline Office::DocumentLibraryVersionsPtr PPT::_Presentation::GetDocumentLibraryVersions ( ) {
    struct Office::DocumentLibraryVersions * _result = 0;
    HRESULT _hr = get_DocumentLibraryVersions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::DocumentLibraryVersionsPtr(_result, false);
}

#pragma implementation_key(3181)
inline Office::MetaPropertiesPtr PPT::_Presentation::GetContentTypeProperties ( ) {
    struct Office::MetaProperties * _result = 0;
    HRESULT _hr = get_ContentTypeProperties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::MetaPropertiesPtr(_result, false);
}

#pragma implementation_key(3182)
inline int PPT::_Presentation::GetSectionCount ( ) {
    int _result = 0;
    HRESULT _hr = get_SectionCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3183)
inline VARIANT_BOOL PPT::_Presentation::GetHasSections ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasSections(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3184)
inline HRESULT PPT::_Presentation::NewSectionAfter ( int Index, VARIANT_BOOL AfterSlide, _bstr_t sectionTitle, int * newSectionIndex ) {
    HRESULT _hr = raw_NewSectionAfter(Index, AfterSlide, sectionTitle, newSectionIndex);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3185)
inline HRESULT PPT::_Presentation::DeleteSection ( int Index ) {
    HRESULT _hr = raw_DeleteSection(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3186)
inline HRESULT PPT::_Presentation::DisableSections ( ) {
    HRESULT _hr = raw_DisableSections();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3187)
inline _bstr_t PPT::_Presentation::sectionTitle ( int Index ) {
    BSTR _result = 0;
    HRESULT _hr = raw_sectionTitle(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3188)
inline HRESULT PPT::_Presentation::RemoveDocumentInformation ( enum PpRemoveDocInfoType Type ) {
    HRESULT _hr = raw_RemoveDocumentInformation(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3189)
inline HRESULT PPT::_Presentation::CheckInWithVersion ( VARIANT_BOOL SaveChanges, const _variant_t & Comments, const _variant_t & MakePublic, const _variant_t & VersionType ) {
    HRESULT _hr = raw_CheckInWithVersion(SaveChanges, Comments, MakePublic, VersionType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3190)
inline HRESULT PPT::_Presentation::ExportAsFixedFormat ( _bstr_t Path, enum PpFixedFormatType FixedFormatType, enum PpFixedFormatIntent Intent, enum Office::MsoTriState FrameSlides, enum PpPrintHandoutOrder HandoutOrder, enum PpPrintOutputType OutputType, enum Office::MsoTriState PrintHiddenSlides, struct PrintRange * PrintRange, enum PpPrintRangeType RangeType, _bstr_t SlideShowName, VARIANT_BOOL IncludeDocProperties, VARIANT_BOOL KeepIRMSettings, VARIANT_BOOL DocStructureTags, VARIANT_BOOL BitmapMissingFonts, VARIANT_BOOL UseISO19005_1, const _variant_t & ExternalExporter ) {
    HRESULT _hr = raw_ExportAsFixedFormat(Path, FixedFormatType, Intent, FrameSlides, HandoutOrder, OutputType, PrintHiddenSlides, PrintRange, RangeType, SlideShowName, IncludeDocProperties, KeepIRMSettings, DocStructureTags, BitmapMissingFonts, UseISO19005_1, ExternalExporter);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3191)
inline Office::ServerPolicyPtr PPT::_Presentation::GetServerPolicy ( ) {
    struct Office::ServerPolicy * _result = 0;
    HRESULT _hr = get_ServerPolicy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::ServerPolicyPtr(_result, false);
}

#pragma implementation_key(3192)
inline Office::WorkflowTasksPtr PPT::_Presentation::GetWorkflowTasks ( ) {
    struct Office::WorkflowTasks * _result = 0;
    HRESULT _hr = raw_GetWorkflowTasks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::WorkflowTasksPtr(_result, false);
}

#pragma implementation_key(3193)
inline Office::WorkflowTemplatesPtr PPT::_Presentation::GetWorkflowTemplates ( ) {
    struct Office::WorkflowTemplates * _result = 0;
    HRESULT _hr = raw_GetWorkflowTemplates(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::WorkflowTemplatesPtr(_result, false);
}

#pragma implementation_key(3194)
inline HRESULT PPT::_Presentation::LockServerFile ( ) {
    HRESULT _hr = raw_LockServerFile();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3195)
inline Office::DocumentInspectorsPtr PPT::_Presentation::GetDocumentInspectors ( ) {
    struct Office::DocumentInspectors * _result = 0;
    HRESULT _hr = get_DocumentInspectors(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::DocumentInspectorsPtr(_result, false);
}

#pragma implementation_key(3196)
inline VARIANT_BOOL PPT::_Presentation::GetHasVBProject ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasVBProject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3197)
inline Office::_CustomXMLPartsPtr PPT::_Presentation::GetCustomXMLParts ( ) {
    struct Office::_CustomXMLParts * _result = 0;
    HRESULT _hr = get_CustomXMLParts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::_CustomXMLPartsPtr(_result, false);
}

#pragma implementation_key(3198)
inline VARIANT_BOOL PPT::_Presentation::GetFinal ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Final(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3199)
inline void PPT::_Presentation::PutFinal ( VARIANT_BOOL Final ) {
    HRESULT _hr = put_Final(Final);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3200)
inline HRESULT PPT::_Presentation::ApplyTheme ( _bstr_t themeName ) {
    HRESULT _hr = raw_ApplyTheme(themeName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3201)
inline PPT::CustomerDataPtr PPT::_Presentation::GetCustomerData ( ) {
    struct CustomerData * _result = 0;
    HRESULT _hr = get_CustomerData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CustomerDataPtr(_result, false);
}

#pragma implementation_key(3202)
inline PPT::ResearchPtr PPT::_Presentation::GetResearch ( ) {
    struct Research * _result = 0;
    HRESULT _hr = get_Research(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ResearchPtr(_result, false);
}

#pragma implementation_key(3203)
inline HRESULT PPT::_Presentation::PublishSlides ( _bstr_t SlideLibraryUrl, VARIANT_BOOL Overwrite, VARIANT_BOOL UseSlideOrder ) {
    HRESULT _hr = raw_PublishSlides(SlideLibraryUrl, Overwrite, UseSlideOrder);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3204)
inline _bstr_t PPT::_Presentation::GetEncryptionProvider ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_EncryptionProvider(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3205)
inline void PPT::_Presentation::PutEncryptionProvider ( _bstr_t EncryptionProvider ) {
    HRESULT _hr = put_EncryptionProvider(EncryptionProvider);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3206)
inline HRESULT PPT::_Presentation::Convert ( ) {
    HRESULT _hr = raw_Convert();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3207)
inline PPT::SectionPropertiesPtr PPT::_Presentation::GetSectionProperties ( ) {
    struct SectionProperties * _result = 0;
    HRESULT _hr = get_SectionProperties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SectionPropertiesPtr(_result, false);
}

#pragma implementation_key(3208)
inline PPT::CoauthoringPtr PPT::_Presentation::GetCoauthoring ( ) {
    struct Coauthoring * _result = 0;
    HRESULT _hr = get_Coauthoring(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CoauthoringPtr(_result, false);
}

#pragma implementation_key(3209)
inline HRESULT PPT::_Presentation::MergeWithBaseline ( _bstr_t withPresentation, _bstr_t baselinePresentation ) {
    HRESULT _hr = raw_MergeWithBaseline(withPresentation, baselinePresentation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3210)
inline VARIANT_BOOL PPT::_Presentation::GetInMergeMode ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_InMergeMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3211)
inline HRESULT PPT::_Presentation::AcceptAll ( ) {
    HRESULT _hr = raw_AcceptAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3212)
inline HRESULT PPT::_Presentation::RejectAll ( ) {
    HRESULT _hr = raw_RejectAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3213)
inline HRESULT PPT::_Presentation::EnsureAllMediaUpgraded ( ) {
    HRESULT _hr = raw_EnsureAllMediaUpgraded();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3214)
inline PPT::BroadcastPtr PPT::_Presentation::GetBroadcast ( ) {
    struct Broadcast * _result = 0;
    HRESULT _hr = get_Broadcast(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BroadcastPtr(_result, false);
}

#pragma implementation_key(3215)
inline VARIANT_BOOL PPT::_Presentation::GetHasNotesMaster ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasNotesMaster(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3216)
inline VARIANT_BOOL PPT::_Presentation::GetHasHandoutMaster ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasHandoutMaster(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3217)
inline HRESULT PPT::_Presentation::Convert2 ( _bstr_t FileName ) {
    HRESULT _hr = raw_Convert2(FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3218)
inline enum PPT::PpMediaTaskStatus PPT::_Presentation::GetCreateVideoStatus ( ) {
    enum PpMediaTaskStatus _result;
    HRESULT _hr = get_CreateVideoStatus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3219)
inline HRESULT PPT::_Presentation::CreateVideo ( _bstr_t FileName, VARIANT_BOOL UseTimingsAndNarrations, int DefaultSlideDuration, int VertResolution, int FramesPerSecond, int Quality ) {
    HRESULT _hr = raw_CreateVideo(FileName, UseTimingsAndNarrations, DefaultSlideDuration, VertResolution, FramesPerSecond, Quality);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3220)
inline HRESULT PPT::_Presentation::ApplyTemplate2 ( _bstr_t FileName, _bstr_t VariantGUID ) {
    HRESULT _hr = raw_ApplyTemplate2(FileName, VariantGUID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3221)
inline VARIANT_BOOL PPT::_Presentation::GetChartDataPointTrack ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ChartDataPointTrack(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3222)
inline void PPT::_Presentation::PutChartDataPointTrack ( VARIANT_BOOL pfChartDataPointTrack ) {
    HRESULT _hr = put_ChartDataPointTrack(pfChartDataPointTrack);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3223)
inline HRESULT PPT::_Presentation::ExportAsFixedFormat2 ( _bstr_t Path, enum PpFixedFormatType FixedFormatType, enum PpFixedFormatIntent Intent, enum Office::MsoTriState FrameSlides, enum PpPrintHandoutOrder HandoutOrder, enum PpPrintOutputType OutputType, enum Office::MsoTriState PrintHiddenSlides, struct PrintRange * PrintRange, enum PpPrintRangeType RangeType, _bstr_t SlideShowName, VARIANT_BOOL IncludeDocProperties, VARIANT_BOOL KeepIRMSettings, VARIANT_BOOL DocStructureTags, VARIANT_BOOL BitmapMissingFonts, VARIANT_BOOL UseISO19005_1, VARIANT_BOOL IncludeMarkup, const _variant_t & ExternalExporter ) {
    HRESULT _hr = raw_ExportAsFixedFormat2(Path, FixedFormatType, Intent, FrameSlides, HandoutOrder, OutputType, PrintHiddenSlides, PrintRange, RangeType, SlideShowName, IncludeDocProperties, KeepIRMSettings, DocStructureTags, BitmapMissingFonts, UseISO19005_1, IncludeMarkup, ExternalExporter);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3224)
inline PPT::GuidesPtr PPT::_Presentation::GetGuides ( ) {
    struct Guides * _result = 0;
    HRESULT _hr = get_Guides(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return GuidesPtr(_result, false);
}

#pragma implementation_key(3225)
inline _bstr_t PPT::_Presentation::GetWorkIdentity ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_WorkIdentity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3226)
inline void PPT::_Presentation::PutWorkIdentity ( _bstr_t WorkIdentity ) {
    HRESULT _hr = put_WorkIdentity(WorkIdentity);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3227)
inline VARIANT_BOOL PPT::_Presentation::GetAutoSaveOn ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoSaveOn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3228)
inline void PPT::_Presentation::PutAutoSaveOn ( VARIANT_BOOL pfAutoSaveOn ) {
    HRESULT _hr = put_AutoSaveOn(pfAutoSaveOn);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3229)
inline HRESULT PPT::_Presentation::SaveCopyAs2 ( _bstr_t FileName, enum PpSaveAsFileType FileFormat, enum Office::MsoTriState EmbedTrueTypeFonts, enum Office::MsoTriState ReadOnlyRecommended ) {
    HRESULT _hr = raw_SaveCopyAs2(FileName, FileFormat, EmbedTrueTypeFonts, ReadOnlyRecommended);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3230)
inline VARIANT_BOOL PPT::_Presentation::GetReadOnlyRecommended ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ReadOnlyRecommended(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3231)
inline Office::ISensitivityLabelPtr PPT::_Presentation::GetSensitivityLabel ( ) {
    struct Office::ISensitivityLabel * _result = 0;
    HRESULT _hr = get_SensitivityLabel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::ISensitivityLabelPtr(_result, false);
}

#pragma implementation_key(3232)
inline VARIANT_BOOL PPT::_Presentation::GetIsFullyDownloaded ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsFullyDownloaded(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3233)
inline HRESULT PPT::_Presentation::ExportAsFixedFormat3 ( _bstr_t Path, enum PpFixedFormatType FixedFormatType, enum PpFixedFormatIntent Intent, enum Office::MsoTriState FrameSlides, enum PpPrintHandoutOrder HandoutOrder, enum PpPrintOutputType OutputType, enum Office::MsoTriState PrintHiddenSlides, struct PrintRange * PrintRange, enum PpPrintRangeType RangeType, _bstr_t SlideShowName, VARIANT_BOOL IncludeDocProperties, VARIANT_BOOL KeepIRMSettings, VARIANT_BOOL DocStructureTags, VARIANT_BOOL BitmapMissingFonts, VARIANT_BOOL UseISO19005_1, VARIANT_BOOL IncludeMarkup, VARIANT_BOOL Bookmarks, VARIANT_BOOL DocumentMarkup, VARIANT_BOOL PromotedHyperlinkShape, const _variant_t & ExternalExporter ) {
    HRESULT _hr = raw_ExportAsFixedFormat3(Path, FixedFormatType, Intent, FrameSlides, HandoutOrder, OutputType, PrintHiddenSlides, PrintRange, RangeType, SlideShowName, IncludeDocProperties, KeepIRMSettings, DocStructureTags, BitmapMissingFonts, UseISO19005_1, IncludeMarkup, Bookmarks, DocumentMarkup, PromotedHyperlinkShape, ExternalExporter);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface Cell wrapper method implementations
//

#pragma implementation_key(3234)
inline PPT::_ApplicationPtr PPT::Cell::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(3235)
inline IDispatchPtr PPT::Cell::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3236)
inline PPT::PPT_ShapePtr PPT::Cell::GetPPT_Shape ( ) {
    struct PPT_Shape * _result = 0;
    HRESULT _hr = get_PPT_Shape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PPT_ShapePtr(_result, false);
}

#pragma implementation_key(3237)
inline PPT::BordersPtr PPT::Cell::GetBorders ( ) {
    struct Borders * _result = 0;
    HRESULT _hr = get_Borders(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BordersPtr(_result, false);
}

#pragma implementation_key(3238)
inline HRESULT PPT::Cell::Merge ( struct Cell * MergeTo ) {
    HRESULT _hr = raw_Merge(MergeTo);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3239)
inline HRESULT PPT::Cell::Split ( int NumRows, int NumColumns ) {
    HRESULT _hr = raw_Split(NumRows, NumColumns);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3240)
inline HRESULT PPT::Cell::Select ( ) {
    HRESULT _hr = raw_Select();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3241)
inline VARIANT_BOOL PPT::Cell::GetSelected ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Selected(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface CellRange wrapper method implementations
//

#pragma implementation_key(3242)
inline PPT::_ApplicationPtr PPT::CellRange::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(3243)
inline IDispatchPtr PPT::CellRange::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3244)
inline PPT::CellPtr PPT::CellRange::Item ( int Index ) {
    struct Cell * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CellPtr(_result, false);
}

#pragma implementation_key(3245)
inline PPT::BordersPtr PPT::CellRange::GetBorders ( ) {
    struct Borders * _result = 0;
    HRESULT _hr = get_Borders(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BordersPtr(_result, false);
}

//
// interface Column wrapper method implementations
//

#pragma implementation_key(3246)
inline PPT::_ApplicationPtr PPT::Column::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(3247)
inline IDispatchPtr PPT::Column::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3248)
inline PPT::CellRangePtr PPT::Column::GetCells ( ) {
    struct CellRange * _result = 0;
    HRESULT _hr = get_Cells(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CellRangePtr(_result, false);
}

#pragma implementation_key(3249)
inline HRESULT PPT::Column::Select ( ) {
    HRESULT _hr = raw_Select();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3250)
inline HRESULT PPT::Column::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3251)
inline float PPT::Column::GetWidth ( ) {
    float _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3252)
inline void PPT::Column::PutWidth ( float Width ) {
    HRESULT _hr = put_Width(Width);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface Columns wrapper method implementations
//

#pragma implementation_key(3253)
inline PPT::_ApplicationPtr PPT::Columns::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(3254)
inline IDispatchPtr PPT::Columns::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3255)
inline PPT::ColumnPtr PPT::Columns::Item ( int Index ) {
    struct Column * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColumnPtr(_result, false);
}

#pragma implementation_key(3256)
inline PPT::ColumnPtr PPT::Columns::Add ( int BeforeColumn ) {
    struct Column * _result = 0;
    HRESULT _hr = raw_Add(BeforeColumn, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColumnPtr(_result, false);
}

//
// interface Row wrapper method implementations
//

#pragma implementation_key(3257)
inline PPT::_ApplicationPtr PPT::Row::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(3258)
inline IDispatchPtr PPT::Row::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3259)
inline PPT::CellRangePtr PPT::Row::GetCells ( ) {
    struct CellRange * _result = 0;
    HRESULT _hr = get_Cells(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CellRangePtr(_result, false);
}

#pragma implementation_key(3260)
inline HRESULT PPT::Row::Select ( ) {
    HRESULT _hr = raw_Select();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3261)
inline HRESULT PPT::Row::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3262)
inline float PPT::Row::GetHeight ( ) {
    float _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3263)
inline void PPT::Row::PutHeight ( float Height ) {
    HRESULT _hr = put_Height(Height);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface Rows wrapper method implementations
//

#pragma implementation_key(3264)
inline PPT::_ApplicationPtr PPT::Rows::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(3265)
inline IDispatchPtr PPT::Rows::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3266)
inline PPT::RowPtr PPT::Rows::Item ( int Index ) {
    struct Row * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RowPtr(_result, false);
}

#pragma implementation_key(3267)
inline PPT::RowPtr PPT::Rows::Add ( int BeforeRow ) {
    struct Row * _result = 0;
    HRESULT _hr = raw_Add(BeforeRow, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RowPtr(_result, false);
}

//
// interface Table wrapper method implementations
//

#pragma implementation_key(3268)
inline PPT::_ApplicationPtr PPT::Table::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(3269)
inline IDispatchPtr PPT::Table::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3270)
inline PPT::ColumnsPtr PPT::Table::GetColumns ( ) {
    struct Columns * _result = 0;
    HRESULT _hr = get_Columns(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColumnsPtr(_result, false);
}

#pragma implementation_key(3271)
inline PPT::RowsPtr PPT::Table::GetRows ( ) {
    struct Rows * _result = 0;
    HRESULT _hr = get_Rows(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RowsPtr(_result, false);
}

#pragma implementation_key(3272)
inline PPT::CellPtr PPT::Table::Cell ( int Row, int Column ) {
    struct Cell * _result = 0;
    HRESULT _hr = raw_Cell(Row, Column, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CellPtr(_result, false);
}

#pragma implementation_key(3273)
inline enum PPT::PpDirection PPT::Table::GetTableDirection ( ) {
    enum PpDirection _result;
    HRESULT _hr = get_TableDirection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3274)
inline void PPT::Table::PutTableDirection ( enum PpDirection TableDirection ) {
    HRESULT _hr = put_TableDirection(TableDirection);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3275)
inline HRESULT PPT::Table::MergeBorders ( ) {
    HRESULT _hr = raw_MergeBorders();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3276)
inline VARIANT_BOOL PPT::Table::GetFirstRow ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_FirstRow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3277)
inline void PPT::Table::PutFirstRow ( VARIANT_BOOL FirstRow ) {
    HRESULT _hr = put_FirstRow(FirstRow);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3278)
inline VARIANT_BOOL PPT::Table::GetLastRow ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LastRow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3279)
inline void PPT::Table::PutLastRow ( VARIANT_BOOL LastRow ) {
    HRESULT _hr = put_LastRow(LastRow);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3280)
inline VARIANT_BOOL PPT::Table::GetFirstCol ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_FirstCol(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3281)
inline void PPT::Table::PutFirstCol ( VARIANT_BOOL FirstCol ) {
    HRESULT _hr = put_FirstCol(FirstCol);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3282)
inline VARIANT_BOOL PPT::Table::GetLastCol ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LastCol(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3283)
inline void PPT::Table::PutLastCol ( VARIANT_BOOL LastCol ) {
    HRESULT _hr = put_LastCol(LastCol);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3284)
inline VARIANT_BOOL PPT::Table::GetHorizBanding ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HorizBanding(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3285)
inline void PPT::Table::PutHorizBanding ( VARIANT_BOOL HorizBanding ) {
    HRESULT _hr = put_HorizBanding(HorizBanding);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3286)
inline VARIANT_BOOL PPT::Table::GetVertBanding ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_VertBanding(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3287)
inline void PPT::Table::PutVertBanding ( VARIANT_BOOL VertBanding ) {
    HRESULT _hr = put_VertBanding(VertBanding);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3288)
inline PPT::TableStylePtr PPT::Table::GetStyle ( ) {
    struct TableStyle * _result = 0;
    HRESULT _hr = get_Style(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TableStylePtr(_result, false);
}

#pragma implementation_key(3289)
inline PPT::TableBackgroundPtr PPT::Table::GetBackground ( ) {
    struct TableBackground * _result = 0;
    HRESULT _hr = get_Background(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TableBackgroundPtr(_result, false);
}

#pragma implementation_key(3290)
inline HRESULT PPT::Table::ScaleProportionally ( float scale ) {
    HRESULT _hr = raw_ScaleProportionally(scale);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3291)
inline HRESULT PPT::Table::ApplyStyle ( _bstr_t StyleID, VARIANT_BOOL SaveFormatting ) {
    HRESULT _hr = raw_ApplyStyle(StyleID, SaveFormatting);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3292)
inline _bstr_t PPT::Table::GetAlternativeText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AlternativeText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3293)
inline void PPT::Table::PutAlternativeText ( _bstr_t AlternativeText ) {
    HRESULT _hr = put_AlternativeText(AlternativeText);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3294)
inline _bstr_t PPT::Table::GetTitle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Title(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3295)
inline void PPT::Table::PutTitle ( _bstr_t Title ) {
    HRESULT _hr = put_Title(Title);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface Timing wrapper method implementations
//

#pragma implementation_key(3296)
inline PPT::_ApplicationPtr PPT::Timing::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(3297)
inline IDispatchPtr PPT::Timing::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3298)
inline float PPT::Timing::GetDuration ( ) {
    float _result = 0;
    HRESULT _hr = get_Duration(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3299)
inline void PPT::Timing::PutDuration ( float Duration ) {
    HRESULT _hr = put_Duration(Duration);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3300)
inline enum PPT::MsoAnimTriggerType PPT::Timing::GetTriggerType ( ) {
    enum MsoAnimTriggerType _result;
    HRESULT _hr = get_TriggerType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3301)
inline void PPT::Timing::PutTriggerType ( enum MsoAnimTriggerType TriggerType ) {
    HRESULT _hr = put_TriggerType(TriggerType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3302)
inline float PPT::Timing::GetTriggerDelayTime ( ) {
    float _result = 0;
    HRESULT _hr = get_TriggerDelayTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3303)
inline void PPT::Timing::PutTriggerDelayTime ( float TriggerDelayTime ) {
    HRESULT _hr = put_TriggerDelayTime(TriggerDelayTime);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3304)
inline PPT::PPT_ShapePtr PPT::Timing::GetTriggerShape ( ) {
    struct PPT_Shape * _result = 0;
    HRESULT _hr = get_TriggerShape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PPT_ShapePtr(_result, false);
}

#pragma implementation_key(3305)
inline void PPT::Timing::PutTriggerShape ( struct PPT_Shape * TriggerShape ) {
    HRESULT _hr = put_TriggerShape(TriggerShape);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3306)
inline int PPT::Timing::GetRepeatCount ( ) {
    int _result = 0;
    HRESULT _hr = get_RepeatCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3307)
inline void PPT::Timing::PutRepeatCount ( int RepeatCount ) {
    HRESULT _hr = put_RepeatCount(RepeatCount);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3308)
inline float PPT::Timing::GetRepeatDuration ( ) {
    float _result = 0;
    HRESULT _hr = get_RepeatDuration(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3309)
inline void PPT::Timing::PutRepeatDuration ( float RepeatDuration ) {
    HRESULT _hr = put_RepeatDuration(RepeatDuration);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3310)
inline float PPT::Timing::GetSpeed ( ) {
    float _result = 0;
    HRESULT _hr = get_Speed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3311)
inline void PPT::Timing::PutSpeed ( float Speed ) {
    HRESULT _hr = put_Speed(Speed);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3312)
inline float PPT::Timing::GetAccelerate ( ) {
    float _result = 0;
    HRESULT _hr = get_Accelerate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3313)
inline void PPT::Timing::PutAccelerate ( float Accelerate ) {
    HRESULT _hr = put_Accelerate(Accelerate);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3314)
inline float PPT::Timing::GetDecelerate ( ) {
    float _result = 0;
    HRESULT _hr = get_Decelerate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3315)
inline void PPT::Timing::PutDecelerate ( float Decelerate ) {
    HRESULT _hr = put_Decelerate(Decelerate);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3316)
inline enum Office::MsoTriState PPT::Timing::GetAutoReverse ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_AutoReverse(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3317)
inline void PPT::Timing::PutAutoReverse ( enum Office::MsoTriState AutoReverse ) {
    HRESULT _hr = put_AutoReverse(AutoReverse);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3318)
inline enum Office::MsoTriState PPT::Timing::GetSmoothStart ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_SmoothStart(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3319)
inline void PPT::Timing::PutSmoothStart ( enum Office::MsoTriState SmoothStart ) {
    HRESULT _hr = put_SmoothStart(SmoothStart);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3320)
inline enum Office::MsoTriState PPT::Timing::GetSmoothEnd ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_SmoothEnd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3321)
inline void PPT::Timing::PutSmoothEnd ( enum Office::MsoTriState SmoothEnd ) {
    HRESULT _hr = put_SmoothEnd(SmoothEnd);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3322)
inline enum Office::MsoTriState PPT::Timing::GetRewindAtEnd ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_RewindAtEnd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3323)
inline void PPT::Timing::PutRewindAtEnd ( enum Office::MsoTriState RewindAtEnd ) {
    HRESULT _hr = put_RewindAtEnd(RewindAtEnd);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3324)
inline enum PPT::MsoAnimEffectRestart PPT::Timing::GetRestart ( ) {
    enum MsoAnimEffectRestart _result;
    HRESULT _hr = get_Restart(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3325)
inline void PPT::Timing::PutRestart ( enum MsoAnimEffectRestart Restart ) {
    HRESULT _hr = put_Restart(Restart);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3326)
inline enum Office::MsoTriState PPT::Timing::GetBounceEnd ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_BounceEnd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3327)
inline void PPT::Timing::PutBounceEnd ( enum Office::MsoTriState BounceEnd ) {
    HRESULT _hr = put_BounceEnd(BounceEnd);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3328)
inline float PPT::Timing::GetBounceEndIntensity ( ) {
    float _result = 0;
    HRESULT _hr = get_BounceEndIntensity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3329)
inline void PPT::Timing::PutBounceEndIntensity ( float BounceEndIntensity ) {
    HRESULT _hr = put_BounceEndIntensity(BounceEndIntensity);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3330)
inline _bstr_t PPT::Timing::GetTriggerBookmark ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TriggerBookmark(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3331)
inline void PPT::Timing::PutTriggerBookmark ( _bstr_t TriggerBookmark ) {
    HRESULT _hr = put_TriggerBookmark(TriggerBookmark);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface AnimationBehavior wrapper method implementations
//

#pragma implementation_key(3332)
inline PPT::_ApplicationPtr PPT::AnimationBehavior::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(3333)
inline IDispatchPtr PPT::AnimationBehavior::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3334)
inline enum PPT::MsoAnimAdditive PPT::AnimationBehavior::GetAdditive ( ) {
    enum MsoAnimAdditive _result;
    HRESULT _hr = get_Additive(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3335)
inline void PPT::AnimationBehavior::PutAdditive ( enum MsoAnimAdditive Additive ) {
    HRESULT _hr = put_Additive(Additive);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3336)
inline enum PPT::MsoAnimAccumulate PPT::AnimationBehavior::GetAccumulate ( ) {
    enum MsoAnimAccumulate _result;
    HRESULT _hr = get_Accumulate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3337)
inline void PPT::AnimationBehavior::PutAccumulate ( enum MsoAnimAccumulate Accumulate ) {
    HRESULT _hr = put_Accumulate(Accumulate);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3338)
inline enum PPT::MsoAnimType PPT::AnimationBehavior::GetType ( ) {
    enum MsoAnimType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3339)
inline void PPT::AnimationBehavior::PutType ( enum MsoAnimType Type ) {
    HRESULT _hr = put_Type(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3340)
inline PPT::MotionEffectPtr PPT::AnimationBehavior::GetMotionEffect ( ) {
    struct MotionEffect * _result = 0;
    HRESULT _hr = get_MotionEffect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return MotionEffectPtr(_result, false);
}

#pragma implementation_key(3341)
inline PPT::ColorEffectPtr PPT::AnimationBehavior::GetColorEffect ( ) {
    struct ColorEffect * _result = 0;
    HRESULT _hr = get_ColorEffect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColorEffectPtr(_result, false);
}

#pragma implementation_key(3342)
inline PPT::ScaleEffectPtr PPT::AnimationBehavior::GetScaleEffect ( ) {
    struct ScaleEffect * _result = 0;
    HRESULT _hr = get_ScaleEffect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ScaleEffectPtr(_result, false);
}

#pragma implementation_key(3343)
inline PPT::RotationEffectPtr PPT::AnimationBehavior::GetRotationEffect ( ) {
    struct RotationEffect * _result = 0;
    HRESULT _hr = get_RotationEffect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RotationEffectPtr(_result, false);
}

#pragma implementation_key(3344)
inline PPT::PropertyEffectPtr PPT::AnimationBehavior::GetPropertyEffect ( ) {
    struct PropertyEffect * _result = 0;
    HRESULT _hr = get_PropertyEffect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PropertyEffectPtr(_result, false);
}

#pragma implementation_key(3345)
inline PPT::TimingPtr PPT::AnimationBehavior::GetTiming ( ) {
    struct Timing * _result = 0;
    HRESULT _hr = get_Timing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TimingPtr(_result, false);
}

#pragma implementation_key(3346)
inline HRESULT PPT::AnimationBehavior::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3347)
inline PPT::CommandEffectPtr PPT::AnimationBehavior::GetCommandEffect ( ) {
    struct CommandEffect * _result = 0;
    HRESULT _hr = get_CommandEffect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CommandEffectPtr(_result, false);
}

#pragma implementation_key(3348)
inline PPT::FilterEffectPtr PPT::AnimationBehavior::GetFilterEffect ( ) {
    struct FilterEffect * _result = 0;
    HRESULT _hr = get_FilterEffect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FilterEffectPtr(_result, false);
}

#pragma implementation_key(3349)
inline PPT::SetEffectPtr PPT::AnimationBehavior::GetSetEffect ( ) {
    struct SetEffect * _result = 0;
    HRESULT _hr = get_SetEffect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SetEffectPtr(_result, false);
}

//
// interface AnimationBehaviors wrapper method implementations
//

#pragma implementation_key(3350)
inline PPT::_ApplicationPtr PPT::AnimationBehaviors::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(3351)
inline IDispatchPtr PPT::AnimationBehaviors::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3352)
inline PPT::AnimationBehaviorPtr PPT::AnimationBehaviors::Item ( int Index ) {
    struct AnimationBehavior * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AnimationBehaviorPtr(_result, false);
}

#pragma implementation_key(3353)
inline PPT::AnimationBehaviorPtr PPT::AnimationBehaviors::Add ( enum MsoAnimType Type, int Index ) {
    struct AnimationBehavior * _result = 0;
    HRESULT _hr = raw_Add(Type, Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AnimationBehaviorPtr(_result, false);
}

//
// interface Effect wrapper method implementations
//

#pragma implementation_key(3354)
inline PPT::_ApplicationPtr PPT::Effect::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(3355)
inline IDispatchPtr PPT::Effect::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3356)
inline PPT::PPT_ShapePtr PPT::Effect::GetPPT_Shape ( ) {
    struct PPT_Shape * _result = 0;
    HRESULT _hr = get_PPT_Shape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PPT_ShapePtr(_result, false);
}

#pragma implementation_key(3357)
inline void PPT::Effect::PutPPT_Shape ( struct PPT_Shape * PPT_Shape ) {
    HRESULT _hr = put_PPT_Shape(PPT_Shape);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3358)
inline HRESULT PPT::Effect::MoveTo ( int toPos ) {
    HRESULT _hr = raw_MoveTo(toPos);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3359)
inline HRESULT PPT::Effect::MoveBefore ( struct Effect * Effect ) {
    HRESULT _hr = raw_MoveBefore(Effect);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3360)
inline HRESULT PPT::Effect::MoveAfter ( struct Effect * Effect ) {
    HRESULT _hr = raw_MoveAfter(Effect);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3361)
inline HRESULT PPT::Effect::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3362)
inline int PPT::Effect::GetIndex ( ) {
    int _result = 0;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3363)
inline PPT::TimingPtr PPT::Effect::GetTiming ( ) {
    struct Timing * _result = 0;
    HRESULT _hr = get_Timing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TimingPtr(_result, false);
}

#pragma implementation_key(3364)
inline enum PPT::MsoAnimEffect PPT::Effect::GetEffectType ( ) {
    enum MsoAnimEffect _result;
    HRESULT _hr = get_EffectType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3365)
inline void PPT::Effect::PutEffectType ( enum MsoAnimEffect EffectType ) {
    HRESULT _hr = put_EffectType(EffectType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3366)
inline PPT::EffectParametersPtr PPT::Effect::GetEffectParameters ( ) {
    struct EffectParameters * _result = 0;
    HRESULT _hr = get_EffectParameters(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return EffectParametersPtr(_result, false);
}

#pragma implementation_key(3367)
inline int PPT::Effect::GetTextRangeStart ( ) {
    int _result = 0;
    HRESULT _hr = get_TextRangeStart(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3368)
inline int PPT::Effect::GetTextRangeLength ( ) {
    int _result = 0;
    HRESULT _hr = get_TextRangeLength(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3369)
inline int PPT::Effect::GetParagraph ( ) {
    int _result = 0;
    HRESULT _hr = get_Paragraph(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3370)
inline void PPT::Effect::PutParagraph ( int Paragraph ) {
    HRESULT _hr = put_Paragraph(Paragraph);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3371)
inline _bstr_t PPT::Effect::GetDisplayName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DisplayName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3372)
inline enum Office::MsoTriState PPT::Effect::GetExit ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Exit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3373)
inline void PPT::Effect::PutExit ( enum Office::MsoTriState Exit ) {
    HRESULT _hr = put_Exit(Exit);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3374)
inline PPT::AnimationBehaviorsPtr PPT::Effect::GetBehaviors ( ) {
    struct AnimationBehaviors * _result = 0;
    HRESULT _hr = get_Behaviors(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AnimationBehaviorsPtr(_result, false);
}

#pragma implementation_key(3375)
inline PPT::EffectInformationPtr PPT::Effect::GetEffectInformation ( ) {
    struct EffectInformation * _result = 0;
    HRESULT _hr = get_EffectInformation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return EffectInformationPtr(_result, false);
}

//
// interface EApplication wrapper method implementations
//

#pragma implementation_key(3376)
inline HRESULT PPT::EApplication::WindowSelectionChange ( struct Selection * Sel ) {
    HRESULT _hr = raw_WindowSelectionChange(Sel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3377)
inline HRESULT PPT::EApplication::WindowBeforeRightClick ( struct Selection * Sel, VARIANT_BOOL * Cancel ) {
    HRESULT _hr = raw_WindowBeforeRightClick(Sel, Cancel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3378)
inline HRESULT PPT::EApplication::WindowBeforeDoubleClick ( struct Selection * Sel, VARIANT_BOOL * Cancel ) {
    HRESULT _hr = raw_WindowBeforeDoubleClick(Sel, Cancel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3379)
inline HRESULT PPT::EApplication::PresentationClose ( struct _Presentation * Pres ) {
    HRESULT _hr = raw_PresentationClose(Pres);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3380)
inline HRESULT PPT::EApplication::PresentationSave ( struct _Presentation * Pres ) {
    HRESULT _hr = raw_PresentationSave(Pres);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3381)
inline HRESULT PPT::EApplication::PresentationOpen ( struct _Presentation * Pres ) {
    HRESULT _hr = raw_PresentationOpen(Pres);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3382)
inline HRESULT PPT::EApplication::NewPresentation ( struct _Presentation * Pres ) {
    HRESULT _hr = raw_NewPresentation(Pres);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3383)
inline HRESULT PPT::EApplication::PresentationNewSlide ( struct _Slide * Sld ) {
    HRESULT _hr = raw_PresentationNewSlide(Sld);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3384)
inline HRESULT PPT::EApplication::WindowActivate ( struct _Presentation * Pres, struct DocumentWindow * Wn ) {
    HRESULT _hr = raw_WindowActivate(Pres, Wn);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3385)
inline HRESULT PPT::EApplication::WindowDeactivate ( struct _Presentation * Pres, struct DocumentWindow * Wn ) {
    HRESULT _hr = raw_WindowDeactivate(Pres, Wn);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3386)
inline HRESULT PPT::EApplication::SlideShowBegin ( struct SlideShowWindow * Wn ) {
    HRESULT _hr = raw_SlideShowBegin(Wn);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3387)
inline HRESULT PPT::EApplication::SlideShowNextBuild ( struct SlideShowWindow * Wn ) {
    HRESULT _hr = raw_SlideShowNextBuild(Wn);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3388)
inline HRESULT PPT::EApplication::SlideShowNextSlide ( struct SlideShowWindow * Wn ) {
    HRESULT _hr = raw_SlideShowNextSlide(Wn);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3389)
inline HRESULT PPT::EApplication::SlideShowEnd ( struct _Presentation * Pres ) {
    HRESULT _hr = raw_SlideShowEnd(Pres);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3390)
inline HRESULT PPT::EApplication::PresentationPrint ( struct _Presentation * Pres ) {
    HRESULT _hr = raw_PresentationPrint(Pres);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3391)
inline HRESULT PPT::EApplication::SlideSelectionChanged ( struct SlideRange * SldRange ) {
    HRESULT _hr = raw_SlideSelectionChanged(SldRange);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3392)
inline HRESULT PPT::EApplication::ColorSchemeChanged ( struct SlideRange * SldRange ) {
    HRESULT _hr = raw_ColorSchemeChanged(SldRange);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3393)
inline HRESULT PPT::EApplication::PresentationBeforeSave ( struct _Presentation * Pres, VARIANT_BOOL * Cancel ) {
    HRESULT _hr = raw_PresentationBeforeSave(Pres, Cancel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3394)
inline HRESULT PPT::EApplication::SlideShowNextClick ( struct SlideShowWindow * Wn, struct Effect * nEffect ) {
    HRESULT _hr = raw_SlideShowNextClick(Wn, nEffect);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3395)
inline HRESULT PPT::EApplication::AfterNewPresentation ( struct _Presentation * Pres ) {
    HRESULT _hr = raw_AfterNewPresentation(Pres);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3396)
inline HRESULT PPT::EApplication::AfterPresentationOpen ( struct _Presentation * Pres ) {
    HRESULT _hr = raw_AfterPresentationOpen(Pres);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3397)
inline HRESULT PPT::EApplication::PresentationSync ( struct _Presentation * Pres, enum Office::MsoSyncEventType SyncEventType ) {
    HRESULT _hr = raw_PresentationSync(Pres, SyncEventType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3398)
inline HRESULT PPT::EApplication::SlideShowOnNext ( struct SlideShowWindow * Wn ) {
    HRESULT _hr = raw_SlideShowOnNext(Wn);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3399)
inline HRESULT PPT::EApplication::SlideShowOnPrevious ( struct SlideShowWindow * Wn ) {
    HRESULT _hr = raw_SlideShowOnPrevious(Wn);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3400)
inline HRESULT PPT::EApplication::PresentationBeforeClose ( struct _Presentation * Pres, VARIANT_BOOL * Cancel ) {
    HRESULT _hr = raw_PresentationBeforeClose(Pres, Cancel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3401)
inline HRESULT PPT::EApplication::ProtectedViewWindowOpen ( struct ProtectedViewWindow * ProtViewWindow ) {
    HRESULT _hr = raw_ProtectedViewWindowOpen(ProtViewWindow);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3402)
inline HRESULT PPT::EApplication::ProtectedViewWindowBeforeEdit ( struct ProtectedViewWindow * ProtViewWindow, VARIANT_BOOL * Cancel ) {
    HRESULT _hr = raw_ProtectedViewWindowBeforeEdit(ProtViewWindow, Cancel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3403)
inline HRESULT PPT::EApplication::ProtectedViewWindowBeforeClose ( struct ProtectedViewWindow * ProtViewWindow, enum PpProtectedViewCloseReason ProtectedViewCloseReason, VARIANT_BOOL * Cancel ) {
    HRESULT _hr = raw_ProtectedViewWindowBeforeClose(ProtViewWindow, ProtectedViewCloseReason, Cancel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3404)
inline HRESULT PPT::EApplication::ProtectedViewWindowActivate ( struct ProtectedViewWindow * ProtViewWindow ) {
    HRESULT _hr = raw_ProtectedViewWindowActivate(ProtViewWindow);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3405)
inline HRESULT PPT::EApplication::ProtectedViewWindowDeactivate ( struct ProtectedViewWindow * ProtViewWindow ) {
    HRESULT _hr = raw_ProtectedViewWindowDeactivate(ProtViewWindow);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3406)
inline HRESULT PPT::EApplication::PresentationCloseFinal ( struct _Presentation * Pres ) {
    HRESULT _hr = raw_PresentationCloseFinal(Pres);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3407)
inline HRESULT PPT::EApplication::AfterDragDropOnSlide ( struct _Slide * Sld, float X, float Y ) {
    HRESULT _hr = raw_AfterDragDropOnSlide(Sld, X, Y);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3408)
inline HRESULT PPT::EApplication::AfterShapeSizeChange ( struct PPT_Shape * shp ) {
    HRESULT _hr = raw_AfterShapeSizeChange(shp);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface Sequence wrapper method implementations
//

#pragma implementation_key(3409)
inline PPT::_ApplicationPtr PPT::Sequence::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(3410)
inline IDispatchPtr PPT::Sequence::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3411)
inline PPT::EffectPtr PPT::Sequence::Item ( int Index ) {
    struct Effect * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return EffectPtr(_result, false);
}

#pragma implementation_key(3412)
inline PPT::EffectPtr PPT::Sequence::AddEffect ( struct PPT_Shape * PPT_Shape, enum MsoAnimEffect effectId, enum MsoAnimateByLevel Level, enum MsoAnimTriggerType trigger, int Index ) {
    struct Effect * _result = 0;
    HRESULT _hr = raw_AddEffect(PPT_Shape, effectId, Level, trigger, Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return EffectPtr(_result, false);
}

#pragma implementation_key(3413)
inline PPT::EffectPtr PPT::Sequence::Clone ( struct Effect * Effect, int Index ) {
    struct Effect * _result = 0;
    HRESULT _hr = raw_Clone(Effect, Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return EffectPtr(_result, false);
}

#pragma implementation_key(3414)
inline PPT::EffectPtr PPT::Sequence::FindFirstAnimationFor ( struct PPT_Shape * PPT_Shape ) {
    struct Effect * _result = 0;
    HRESULT _hr = raw_FindFirstAnimationFor(PPT_Shape, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return EffectPtr(_result, false);
}

#pragma implementation_key(3415)
inline PPT::EffectPtr PPT::Sequence::FindFirstAnimationForClick ( int click ) {
    struct Effect * _result = 0;
    HRESULT _hr = raw_FindFirstAnimationForClick(click, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return EffectPtr(_result, false);
}

#pragma implementation_key(3416)
inline PPT::EffectPtr PPT::Sequence::ConvertToBuildLevel ( struct Effect * Effect, enum MsoAnimateByLevel Level ) {
    struct Effect * _result = 0;
    HRESULT _hr = raw_ConvertToBuildLevel(Effect, Level, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return EffectPtr(_result, false);
}

#pragma implementation_key(3417)
inline PPT::EffectPtr PPT::Sequence::ConvertToAfterEffect ( struct Effect * Effect, enum MsoAnimAfterEffect After, Office::MsoRGBType DimColor, enum PpColorSchemeIndex DimSchemeColor ) {
    struct Effect * _result = 0;
    HRESULT _hr = raw_ConvertToAfterEffect(Effect, After, DimColor, DimSchemeColor, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return EffectPtr(_result, false);
}

#pragma implementation_key(3418)
inline PPT::EffectPtr PPT::Sequence::ConvertToAnimateBackground ( struct Effect * Effect, enum Office::MsoTriState AnimateBackground ) {
    struct Effect * _result = 0;
    HRESULT _hr = raw_ConvertToAnimateBackground(Effect, AnimateBackground, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return EffectPtr(_result, false);
}

#pragma implementation_key(3419)
inline PPT::EffectPtr PPT::Sequence::ConvertToAnimateInReverse ( struct Effect * Effect, enum Office::MsoTriState animateInReverse ) {
    struct Effect * _result = 0;
    HRESULT _hr = raw_ConvertToAnimateInReverse(Effect, animateInReverse, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return EffectPtr(_result, false);
}

#pragma implementation_key(3420)
inline PPT::EffectPtr PPT::Sequence::ConvertToTextUnitEffect ( struct Effect * Effect, enum MsoAnimTextUnitEffect unitEffect ) {
    struct Effect * _result = 0;
    HRESULT _hr = raw_ConvertToTextUnitEffect(Effect, unitEffect, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return EffectPtr(_result, false);
}

#pragma implementation_key(3421)
inline PPT::EffectPtr PPT::Sequence::AddTriggerEffect ( struct PPT_Shape * pShape, enum MsoAnimEffect effectId, enum MsoAnimTriggerType trigger, struct PPT_Shape * pTriggerShape, _bstr_t bookmark, enum MsoAnimateByLevel Level ) {
    struct Effect * _result = 0;
    HRESULT _hr = raw_AddTriggerEffect(pShape, effectId, trigger, pTriggerShape, bookmark, Level, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return EffectPtr(_result, false);
}

//
// interface Sequences wrapper method implementations
//

#pragma implementation_key(3422)
inline PPT::_ApplicationPtr PPT::Sequences::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(3423)
inline IDispatchPtr PPT::Sequences::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3424)
inline PPT::SequencePtr PPT::Sequences::Item ( int Index ) {
    struct Sequence * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SequencePtr(_result, false);
}

#pragma implementation_key(3425)
inline PPT::SequencePtr PPT::Sequences::Add ( int Index ) {
    struct Sequence * _result = 0;
    HRESULT _hr = raw_Add(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SequencePtr(_result, false);
}

//
// interface TimeLine wrapper method implementations
//

#pragma implementation_key(3426)
inline PPT::_ApplicationPtr PPT::TimeLine::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(3427)
inline IDispatchPtr PPT::TimeLine::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3428)
inline PPT::SequencePtr PPT::TimeLine::GetMainSequence ( ) {
    struct Sequence * _result = 0;
    HRESULT _hr = get_MainSequence(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SequencePtr(_result, false);
}

#pragma implementation_key(3429)
inline PPT::SequencesPtr PPT::TimeLine::GetInteractiveSequences ( ) {
    struct Sequences * _result = 0;
    HRESULT _hr = get_InteractiveSequences(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SequencesPtr(_result, false);
}

//
// interface ResampleMediaTask wrapper method implementations
//

#pragma implementation_key(3430)
inline enum PPT::PpResampleMediaProfile PPT::ResampleMediaTask::Getprofile ( ) {
    enum PpResampleMediaProfile _result;
    HRESULT _hr = get_profile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3431)
inline VARIANT_BOOL PPT::ResampleMediaTask::GetIsLinked ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsLinked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3432)
inline VARIANT_BOOL PPT::ResampleMediaTask::GetIsEmbedded ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsEmbedded(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3433)
inline long PPT::ResampleMediaTask::GetAudioSamplingRate ( ) {
    long _result = 0;
    HRESULT _hr = get_AudioSamplingRate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3434)
inline long PPT::ResampleMediaTask::GetVideoFrameRate ( ) {
    long _result = 0;
    HRESULT _hr = get_VideoFrameRate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3435)
inline long PPT::ResampleMediaTask::GetSampleHeight ( ) {
    long _result = 0;
    HRESULT _hr = get_SampleHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3436)
inline long PPT::ResampleMediaTask::GetSampleWidth ( ) {
    long _result = 0;
    HRESULT _hr = get_SampleWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3437)
inline _bstr_t PPT::ResampleMediaTask::GetContainerType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ContainerType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3438)
inline _bstr_t PPT::ResampleMediaTask::GetVideoCompressionType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_VideoCompressionType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3439)
inline _bstr_t PPT::ResampleMediaTask::GetAudioCompressionType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AudioCompressionType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3440)
inline PPT::PPT_ShapePtr PPT::ResampleMediaTask::GetPPT_Shape ( ) {
    struct PPT_Shape * _result = 0;
    HRESULT _hr = get_PPT_Shape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PPT_ShapePtr(_result, false);
}

//
// interface ResampleMediaTasks wrapper method implementations
//

#pragma implementation_key(3441)
inline PPT::ResampleMediaTaskPtr PPT::ResampleMediaTasks::Item ( int Index ) {
    struct ResampleMediaTask * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ResampleMediaTaskPtr(_result, false);
}

#pragma implementation_key(3442)
inline HRESULT PPT::ResampleMediaTasks::Pause ( ) {
    HRESULT _hr = raw_Pause();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3443)
inline HRESULT PPT::ResampleMediaTasks::Cancel ( ) {
    HRESULT _hr = raw_Cancel();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3444)
inline HRESULT PPT::ResampleMediaTasks::Resume ( ) {
    HRESULT _hr = raw_Resume();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3445)
inline long PPT::ResampleMediaTasks::GetPercentComplete ( ) {
    long _result = 0;
    HRESULT _hr = get_PercentComplete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ShapeRange wrapper method implementations
//

#pragma implementation_key(3446)
inline IDispatchPtr PPT::ShapeRange::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3447)
inline long PPT::ShapeRange::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3448)
inline IDispatchPtr PPT::ShapeRange::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3449)
inline HRESULT PPT::ShapeRange::Apply ( ) {
    HRESULT _hr = raw_Apply();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3450)
inline HRESULT PPT::ShapeRange::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3451)
inline HRESULT PPT::ShapeRange::Flip ( enum Office::MsoFlipCmd FlipCmd ) {
    HRESULT _hr = raw_Flip(FlipCmd);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3452)
inline HRESULT PPT::ShapeRange::IncrementLeft ( float Increment ) {
    HRESULT _hr = raw_IncrementLeft(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3453)
inline HRESULT PPT::ShapeRange::IncrementRotation ( float Increment ) {
    HRESULT _hr = raw_IncrementRotation(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3454)
inline HRESULT PPT::ShapeRange::IncrementTop ( float Increment ) {
    HRESULT _hr = raw_IncrementTop(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3455)
inline HRESULT PPT::ShapeRange::PickUp ( ) {
    HRESULT _hr = raw_PickUp();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3456)
inline HRESULT PPT::ShapeRange::RerouteConnections ( ) {
    HRESULT _hr = raw_RerouteConnections();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3457)
inline HRESULT PPT::ShapeRange::ScaleHeight ( float Factor, enum Office::MsoTriState RelativeToOriginalSize, enum Office::MsoScaleFrom fScale ) {
    HRESULT _hr = raw_ScaleHeight(Factor, RelativeToOriginalSize, fScale);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3458)
inline HRESULT PPT::ShapeRange::ScaleWidth ( float Factor, enum Office::MsoTriState RelativeToOriginalSize, enum Office::MsoScaleFrom fScale ) {
    HRESULT _hr = raw_ScaleWidth(Factor, RelativeToOriginalSize, fScale);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3459)
inline HRESULT PPT::ShapeRange::SetShapesDefaultProperties ( ) {
    HRESULT _hr = raw_SetShapesDefaultProperties();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3460)
inline PPT::ShapeRangePtr PPT::ShapeRange::Ungroup ( ) {
    struct ShapeRange * _result = 0;
    HRESULT _hr = raw_Ungroup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

#pragma implementation_key(3461)
inline HRESULT PPT::ShapeRange::ZOrder ( enum Office::MsoZOrderCmd ZOrderCmd ) {
    HRESULT _hr = raw_ZOrder(ZOrderCmd);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3462)
inline PPT::AdjustmentsPtr PPT::ShapeRange::GetAdjustments ( ) {
    struct Adjustments * _result = 0;
    HRESULT _hr = get_Adjustments(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AdjustmentsPtr(_result, false);
}

#pragma implementation_key(3463)
inline enum Office::MsoAutoShapeType PPT::ShapeRange::GetAutoShapeType ( ) {
    enum Office::MsoAutoShapeType _result;
    HRESULT _hr = get_AutoShapeType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3464)
inline void PPT::ShapeRange::PutAutoShapeType ( enum Office::MsoAutoShapeType AutoShapeType ) {
    HRESULT _hr = put_AutoShapeType(AutoShapeType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3465)
inline enum Office::MsoBlackWhiteMode PPT::ShapeRange::GetBlackWhiteMode ( ) {
    enum Office::MsoBlackWhiteMode _result;
    HRESULT _hr = get_BlackWhiteMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3466)
inline void PPT::ShapeRange::PutBlackWhiteMode ( enum Office::MsoBlackWhiteMode BlackWhiteMode ) {
    HRESULT _hr = put_BlackWhiteMode(BlackWhiteMode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3467)
inline PPT::CalloutFormatPtr PPT::ShapeRange::GetCallout ( ) {
    struct CalloutFormat * _result = 0;
    HRESULT _hr = get_Callout(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CalloutFormatPtr(_result, false);
}

#pragma implementation_key(3468)
inline int PPT::ShapeRange::GetConnectionSiteCount ( ) {
    int _result = 0;
    HRESULT _hr = get_ConnectionSiteCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3469)
inline enum Office::MsoTriState PPT::ShapeRange::GetConnector ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Connector(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3470)
inline PPT::ConnectorFormatPtr PPT::ShapeRange::GetConnectorFormat ( ) {
    struct ConnectorFormat * _result = 0;
    HRESULT _hr = get_ConnectorFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ConnectorFormatPtr(_result, false);
}

#pragma implementation_key(3471)
inline PPT::FillFormatPtr PPT::ShapeRange::GetFill ( ) {
    struct FillFormat * _result = 0;
    HRESULT _hr = get_Fill(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FillFormatPtr(_result, false);
}

#pragma implementation_key(3472)
inline PPT::GroupShapesPtr PPT::ShapeRange::GetGroupItems ( ) {
    struct GroupShapes * _result = 0;
    HRESULT _hr = get_GroupItems(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return GroupShapesPtr(_result, false);
}

#pragma implementation_key(3473)
inline float PPT::ShapeRange::GetHeight ( ) {
    float _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3474)
inline void PPT::ShapeRange::PutHeight ( float Height ) {
    HRESULT _hr = put_Height(Height);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3475)
inline enum Office::MsoTriState PPT::ShapeRange::GetHorizontalFlip ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_HorizontalFlip(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3476)
inline float PPT::ShapeRange::GetLeft ( ) {
    float _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3477)
inline void PPT::ShapeRange::PutLeft ( float Left ) {
    HRESULT _hr = put_Left(Left);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3478)
inline PPT::LineFormatPtr PPT::ShapeRange::GetLine ( ) {
    struct LineFormat * _result = 0;
    HRESULT _hr = get_Line(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return LineFormatPtr(_result, false);
}

#pragma implementation_key(3479)
inline enum Office::MsoTriState PPT::ShapeRange::GetLockAspectRatio ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_LockAspectRatio(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3480)
inline void PPT::ShapeRange::PutLockAspectRatio ( enum Office::MsoTriState LockAspectRatio ) {
    HRESULT _hr = put_LockAspectRatio(LockAspectRatio);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3481)
inline _bstr_t PPT::ShapeRange::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3482)
inline void PPT::ShapeRange::PutName ( _bstr_t Name ) {
    HRESULT _hr = put_Name(Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3483)
inline PPT::ShapeNodesPtr PPT::ShapeRange::GetNodes ( ) {
    struct ShapeNodes * _result = 0;
    HRESULT _hr = get_Nodes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeNodesPtr(_result, false);
}

#pragma implementation_key(3484)
inline float PPT::ShapeRange::GetRotation ( ) {
    float _result = 0;
    HRESULT _hr = get_Rotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3485)
inline void PPT::ShapeRange::PutRotation ( float Rotation ) {
    HRESULT _hr = put_Rotation(Rotation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3486)
inline PPT::PictureFormatPtr PPT::ShapeRange::GetPictureFormat ( ) {
    struct PictureFormat * _result = 0;
    HRESULT _hr = get_PictureFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PictureFormatPtr(_result, false);
}

#pragma implementation_key(3487)
inline PPT::ShadowFormatPtr PPT::ShapeRange::GetShadow ( ) {
    struct ShadowFormat * _result = 0;
    HRESULT _hr = get_Shadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShadowFormatPtr(_result, false);
}

#pragma implementation_key(3488)
inline PPT::TextEffectFormatPtr PPT::ShapeRange::GetTextEffect ( ) {
    struct TextEffectFormat * _result = 0;
    HRESULT _hr = get_TextEffect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextEffectFormatPtr(_result, false);
}

#pragma implementation_key(3489)
inline PPT::TextFramePtr PPT::ShapeRange::GetTextFrame ( ) {
    struct TextFrame * _result = 0;
    HRESULT _hr = get_TextFrame(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextFramePtr(_result, false);
}

#pragma implementation_key(3490)
inline PPT::ThreeDFormatPtr PPT::ShapeRange::GetThreeD ( ) {
    struct ThreeDFormat * _result = 0;
    HRESULT _hr = get_ThreeD(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ThreeDFormatPtr(_result, false);
}

#pragma implementation_key(3491)
inline float PPT::ShapeRange::GetTop ( ) {
    float _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3492)
inline void PPT::ShapeRange::PutTop ( float Top ) {
    HRESULT _hr = put_Top(Top);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3493)
inline enum Office::MsoShapeType PPT::ShapeRange::GetType ( ) {
    enum Office::MsoShapeType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3494)
inline enum Office::MsoTriState PPT::ShapeRange::GetVerticalFlip ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_VerticalFlip(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3495)
inline _variant_t PPT::ShapeRange::GetVertices ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Vertices(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3496)
inline enum Office::MsoTriState PPT::ShapeRange::GetVisible ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3497)
inline void PPT::ShapeRange::PutVisible ( enum Office::MsoTriState Visible ) {
    HRESULT _hr = put_Visible(Visible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3498)
inline float PPT::ShapeRange::GetWidth ( ) {
    float _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3499)
inline void PPT::ShapeRange::PutWidth ( float Width ) {
    HRESULT _hr = put_Width(Width);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3500)
inline int PPT::ShapeRange::GetZOrderPosition ( ) {
    int _result = 0;
    HRESULT _hr = get_ZOrderPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3501)
inline PPT::OLEFormatPtr PPT::ShapeRange::GetOLEFormat ( ) {
    struct OLEFormat * _result = 0;
    HRESULT _hr = get_OLEFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return OLEFormatPtr(_result, false);
}

#pragma implementation_key(3502)
inline PPT::LinkFormatPtr PPT::ShapeRange::GetLinkFormat ( ) {
    struct LinkFormat * _result = 0;
    HRESULT _hr = get_LinkFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return LinkFormatPtr(_result, false);
}

#pragma implementation_key(3503)
inline PPT::PlaceholderFormatPtr PPT::ShapeRange::GetPlaceholderFormat ( ) {
    struct PlaceholderFormat * _result = 0;
    HRESULT _hr = get_PlaceholderFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PlaceholderFormatPtr(_result, false);
}

#pragma implementation_key(3504)
inline PPT::AnimationSettingsPtr PPT::ShapeRange::GetAnimationSettings ( ) {
    struct AnimationSettings * _result = 0;
    HRESULT _hr = get_AnimationSettings(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AnimationSettingsPtr(_result, false);
}

#pragma implementation_key(3505)
inline PPT::ActionSettingsPtr PPT::ShapeRange::GetActionSettings ( ) {
    struct ActionSettings * _result = 0;
    HRESULT _hr = get_ActionSettings(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ActionSettingsPtr(_result, false);
}

#pragma implementation_key(3506)
inline PPT::TagsPtr PPT::ShapeRange::GetTags ( ) {
    struct Tags * _result = 0;
    HRESULT _hr = get_Tags(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TagsPtr(_result, false);
}

#pragma implementation_key(3507)
inline HRESULT PPT::ShapeRange::Cut ( ) {
    HRESULT _hr = raw_Cut();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3508)
inline HRESULT PPT::ShapeRange::Copy ( ) {
    HRESULT _hr = raw_Copy();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3509)
inline HRESULT PPT::ShapeRange::Select ( enum Office::MsoTriState Replace ) {
    HRESULT _hr = raw_Select(Replace);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3510)
inline PPT::ShapeRangePtr PPT::ShapeRange::Duplicate ( ) {
    struct ShapeRange * _result = 0;
    HRESULT _hr = raw_Duplicate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

#pragma implementation_key(3511)
inline enum PPT::PpMediaType PPT::ShapeRange::GetMediaType ( ) {
    enum PpMediaType _result;
    HRESULT _hr = get_MediaType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3512)
inline enum Office::MsoTriState PPT::ShapeRange::GetHasTextFrame ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_HasTextFrame(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3513)
inline PPT::SoundFormatPtr PPT::ShapeRange::GetSoundFormat ( ) {
    struct SoundFormat * _result = 0;
    HRESULT _hr = get_SoundFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SoundFormatPtr(_result, false);
}

#pragma implementation_key(3514)
inline PPT::PPT_ShapePtr PPT::ShapeRange::Item ( const _variant_t & Index ) {
    struct PPT_Shape * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PPT_ShapePtr(_result, false);
}

#pragma implementation_key(3515)
inline IUnknownPtr PPT::ShapeRange::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(3516)
inline _variant_t PPT::ShapeRange::_Index ( int Index ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw__Index(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3517)
inline long PPT::ShapeRange::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3518)
inline PPT::PPT_ShapePtr PPT::ShapeRange::Group ( ) {
    struct PPT_Shape * _result = 0;
    HRESULT _hr = raw_Group(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PPT_ShapePtr(_result, false);
}

#pragma implementation_key(3519)
inline PPT::PPT_ShapePtr PPT::ShapeRange::Regroup ( ) {
    struct PPT_Shape * _result = 0;
    HRESULT _hr = raw_Regroup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PPT_ShapePtr(_result, false);
}

#pragma implementation_key(3520)
inline HRESULT PPT::ShapeRange::Align ( enum Office::MsoAlignCmd AlignCmd, enum Office::MsoTriState RelativeTo ) {
    HRESULT _hr = raw_Align(AlignCmd, RelativeTo);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3521)
inline HRESULT PPT::ShapeRange::Distribute ( enum Office::MsoDistributeCmd DistributeCmd, enum Office::MsoTriState RelativeTo ) {
    HRESULT _hr = raw_Distribute(DistributeCmd, RelativeTo);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3522)
inline HRESULT PPT::ShapeRange::GetPolygonalRepresentation ( unsigned long maxPointsInBuffer, float * pPoints, unsigned long * numPointsInPolygon, enum Office::MsoTriState * IsOpen ) {
    HRESULT _hr = raw_GetPolygonalRepresentation(maxPointsInBuffer, pPoints, numPointsInPolygon, IsOpen);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3523)
inline Office::ScriptPtr PPT::ShapeRange::GetScript ( ) {
    struct Office::Script * _result = 0;
    HRESULT _hr = get_Script(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::ScriptPtr(_result, false);
}

#pragma implementation_key(3524)
inline _bstr_t PPT::ShapeRange::GetAlternativeText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AlternativeText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3525)
inline void PPT::ShapeRange::PutAlternativeText ( _bstr_t AlternativeText ) {
    HRESULT _hr = put_AlternativeText(AlternativeText);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3526)
inline enum Office::MsoTriState PPT::ShapeRange::GetHasTable ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_HasTable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3527)
inline PPT::TablePtr PPT::ShapeRange::GetTable ( ) {
    struct Table * _result = 0;
    HRESULT _hr = get_Table(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TablePtr(_result, false);
}

#pragma implementation_key(3528)
inline HRESULT PPT::ShapeRange::Export ( _bstr_t PathName, enum PpShapeFormat Filter, int ScaleWidth, int ScaleHeight, enum PpExportMode ExportMode ) {
    HRESULT _hr = raw_Export(PathName, Filter, ScaleWidth, ScaleHeight, ExportMode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3529)
inline enum Office::MsoTriState PPT::ShapeRange::GetHasDiagram ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_HasDiagram(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3530)
inline PPT::DiagramPtr PPT::ShapeRange::GetDiagram ( ) {
    struct Diagram * _result = 0;
    HRESULT _hr = get_Diagram(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DiagramPtr(_result, false);
}

#pragma implementation_key(3531)
inline enum Office::MsoTriState PPT::ShapeRange::GetHasDiagramNode ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_HasDiagramNode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3532)
inline PPT::DiagramNodePtr PPT::ShapeRange::GetDiagramNode ( ) {
    struct DiagramNode * _result = 0;
    HRESULT _hr = get_DiagramNode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DiagramNodePtr(_result, false);
}

#pragma implementation_key(3533)
inline enum Office::MsoTriState PPT::ShapeRange::GetChild ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Child(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3534)
inline PPT::PPT_ShapePtr PPT::ShapeRange::GetParentGroup ( ) {
    struct PPT_Shape * _result = 0;
    HRESULT _hr = get_ParentGroup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PPT_ShapePtr(_result, false);
}

#pragma implementation_key(3535)
inline PPT::CanvasShapesPtr PPT::ShapeRange::GetCanvasItems ( ) {
    struct CanvasShapes * _result = 0;
    HRESULT _hr = get_CanvasItems(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CanvasShapesPtr(_result, false);
}

#pragma implementation_key(3536)
inline int PPT::ShapeRange::GetId ( ) {
    int _result = 0;
    HRESULT _hr = get_Id(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3537)
inline HRESULT PPT::ShapeRange::CanvasCropLeft ( float Increment ) {
    HRESULT _hr = raw_CanvasCropLeft(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3538)
inline HRESULT PPT::ShapeRange::CanvasCropTop ( float Increment ) {
    HRESULT _hr = raw_CanvasCropTop(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3539)
inline HRESULT PPT::ShapeRange::CanvasCropRight ( float Increment ) {
    HRESULT _hr = raw_CanvasCropRight(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3540)
inline HRESULT PPT::ShapeRange::CanvasCropBottom ( float Increment ) {
    HRESULT _hr = raw_CanvasCropBottom(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3541)
inline void PPT::ShapeRange::PutRTF ( _bstr_t _arg1 ) {
    HRESULT _hr = put_RTF(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3542)
inline PPT::CustomerDataPtr PPT::ShapeRange::GetCustomerData ( ) {
    struct CustomerData * _result = 0;
    HRESULT _hr = get_CustomerData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CustomerDataPtr(_result, false);
}

#pragma implementation_key(3543)
inline PPT::TextFrame2Ptr PPT::ShapeRange::GetTextFrame2 ( ) {
    struct TextFrame2 * _result = 0;
    HRESULT _hr = get_TextFrame2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextFrame2Ptr(_result, false);
}

#pragma implementation_key(3544)
inline enum Office::MsoTriState PPT::ShapeRange::GetHasChart ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_HasChart(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3545)
inline enum Office::MsoShapeStyleIndex PPT::ShapeRange::GetShapeStyle ( ) {
    enum Office::MsoShapeStyleIndex _result;
    HRESULT _hr = get_ShapeStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3546)
inline void PPT::ShapeRange::PutShapeStyle ( enum Office::MsoShapeStyleIndex ShapeStyle ) {
    HRESULT _hr = put_ShapeStyle(ShapeStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3547)
inline enum Office::MsoBackgroundStyleIndex PPT::ShapeRange::GetBackgroundStyle ( ) {
    enum Office::MsoBackgroundStyleIndex _result;
    HRESULT _hr = get_BackgroundStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3548)
inline void PPT::ShapeRange::PutBackgroundStyle ( enum Office::MsoBackgroundStyleIndex BackgroundStyle ) {
    HRESULT _hr = put_BackgroundStyle(BackgroundStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3549)
inline Office::SoftEdgeFormatPtr PPT::ShapeRange::GetSoftEdge ( ) {
    struct Office::SoftEdgeFormat * _result = 0;
    HRESULT _hr = get_SoftEdge(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::SoftEdgeFormatPtr(_result, false);
}

#pragma implementation_key(3550)
inline Office::GlowFormatPtr PPT::ShapeRange::GetGlow ( ) {
    struct Office::GlowFormat * _result = 0;
    HRESULT _hr = get_Glow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::GlowFormatPtr(_result, false);
}

#pragma implementation_key(3551)
inline Office::ReflectionFormatPtr PPT::ShapeRange::GetReflection ( ) {
    struct Office::ReflectionFormat * _result = 0;
    HRESULT _hr = get_Reflection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::ReflectionFormatPtr(_result, false);
}

#pragma implementation_key(3552)
inline PPT::ChartPtr PPT::ShapeRange::GetChart ( ) {
    struct Chart * _result = 0;
    HRESULT _hr = get_Chart(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartPtr(_result, false);
}

#pragma implementation_key(3553)
inline enum Office::MsoTriState PPT::ShapeRange::GetHasSmartArt ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_HasSmartArt(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3554)
inline Office::SmartArtPtr PPT::ShapeRange::GetSmartArt ( ) {
    struct Office::SmartArt * _result = 0;
    HRESULT _hr = get_SmartArt(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::SmartArtPtr(_result, false);
}

#pragma implementation_key(3555)
inline HRESULT PPT::ShapeRange::ConvertTextToSmartArt ( struct Office::SmartArtLayout * Layout ) {
    HRESULT _hr = raw_ConvertTextToSmartArt(Layout);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3556)
inline _bstr_t PPT::ShapeRange::GetTitle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Title(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3557)
inline void PPT::ShapeRange::PutTitle ( _bstr_t Title ) {
    HRESULT _hr = put_Title(Title);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3558)
inline PPT::MediaFormatPtr PPT::ShapeRange::GetMediaFormat ( ) {
    struct MediaFormat * _result = 0;
    HRESULT _hr = get_MediaFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return MediaFormatPtr(_result, false);
}

#pragma implementation_key(3559)
inline HRESULT PPT::ShapeRange::PickupAnimation ( ) {
    HRESULT _hr = raw_PickupAnimation();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3560)
inline HRESULT PPT::ShapeRange::ApplyAnimation ( ) {
    HRESULT _hr = raw_ApplyAnimation();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3561)
inline HRESULT PPT::ShapeRange::UpgradeMedia ( ) {
    HRESULT _hr = raw_UpgradeMedia();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3562)
inline HRESULT PPT::ShapeRange::MergeShapes ( enum Office::MsoMergeCmd MergeCmd, struct PPT_Shape * PrimaryShape ) {
    HRESULT _hr = raw_MergeShapes(MergeCmd, PrimaryShape);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3563)
inline enum Office::MsoTriState PPT::ShapeRange::GetIsNarration ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_IsNarration(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3564)
inline void PPT::ShapeRange::PutIsNarration ( enum Office::MsoTriState IsNarration ) {
    HRESULT _hr = put_IsNarration(IsNarration);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3565)
inline _bstr_t PPT::ShapeRange::GetInkXML ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_InkXML(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3566)
inline enum Office::MsoTriState PPT::ShapeRange::GetHasInkXML ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_HasInkXML(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3567)
inline enum Office::MsoTriState PPT::ShapeRange::GetHasSectionZoom ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_HasSectionZoom(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3568)
inline enum Office::MsoGraphicStyleIndex PPT::ShapeRange::GetGraphicStyle ( ) {
    enum Office::MsoGraphicStyleIndex _result;
    HRESULT _hr = get_GraphicStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3569)
inline void PPT::ShapeRange::PutGraphicStyle ( enum Office::MsoGraphicStyleIndex GraphicStyle ) {
    HRESULT _hr = put_GraphicStyle(GraphicStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3570)
inline PPT::Model3DFormatPtr PPT::ShapeRange::GetModel3D ( ) {
    struct Model3DFormat * _result = 0;
    HRESULT _hr = get_Model3D(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Model3DFormatPtr(_result, false);
}

#pragma implementation_key(3571)
inline enum Office::MsoTriState PPT::ShapeRange::GetDecorative ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Decorative(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3572)
inline void PPT::ShapeRange::PutDecorative ( enum Office::MsoTriState fDecorative ) {
    HRESULT _hr = put_Decorative(fDecorative);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3573)
inline _bstr_t PPT::ShapeRange::ConvertInkToText ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_ConvertInkToText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3574)
inline enum Office::MsoTriState PPT::ShapeRange::GetLocked ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Locked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3575)
inline void PPT::ShapeRange::PutLocked ( enum Office::MsoTriState pLocked ) {
    HRESULT _hr = put_Locked(pLocked);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface GroupShapes wrapper method implementations
//

#pragma implementation_key(3576)
inline IDispatchPtr PPT::GroupShapes::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3577)
inline long PPT::GroupShapes::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3578)
inline IDispatchPtr PPT::GroupShapes::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3579)
inline int PPT::GroupShapes::GetCount ( ) {
    int _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3580)
inline PPT::PPT_ShapePtr PPT::GroupShapes::Item ( const _variant_t & Index ) {
    struct PPT_Shape * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PPT_ShapePtr(_result, false);
}

#pragma implementation_key(3581)
inline IUnknownPtr PPT::GroupShapes::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(3582)
inline PPT::ShapeRangePtr PPT::GroupShapes::Range ( const _variant_t & Index ) {
    struct ShapeRange * _result = 0;
    HRESULT _hr = raw_Range(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

//
// interface CanvasShapes wrapper method implementations
//

#pragma implementation_key(3583)
inline IDispatchPtr PPT::CanvasShapes::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3584)
inline long PPT::CanvasShapes::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3585)
inline IDispatchPtr PPT::CanvasShapes::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3586)
inline int PPT::CanvasShapes::GetCount ( ) {
    int _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3587)
inline PPT::PPT_ShapePtr PPT::CanvasShapes::Item ( const _variant_t & Index ) {
    struct PPT_Shape * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PPT_ShapePtr(_result, false);
}

#pragma implementation_key(3588)
inline IUnknownPtr PPT::CanvasShapes::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(3589)
inline PPT::PPT_ShapePtr PPT::CanvasShapes::AddCallout ( enum Office::MsoCalloutType Type, float Left, float Top, float Width, float Height ) {
    struct PPT_Shape * _result = 0;
    HRESULT _hr = raw_AddCallout(Type, Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PPT_ShapePtr(_result, false);
}

#pragma implementation_key(3590)
inline PPT::PPT_ShapePtr PPT::CanvasShapes::AddConnector ( enum Office::MsoConnectorType Type, float BeginX, float BeginY, float EndX, float EndY ) {
    struct PPT_Shape * _result = 0;
    HRESULT _hr = raw_AddConnector(Type, BeginX, BeginY, EndX, EndY, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PPT_ShapePtr(_result, false);
}

#pragma implementation_key(3591)
inline PPT::PPT_ShapePtr PPT::CanvasShapes::AddCurve ( const _variant_t & SafeArrayOfPoints ) {
    struct PPT_Shape * _result = 0;
    HRESULT _hr = raw_AddCurve(SafeArrayOfPoints, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PPT_ShapePtr(_result, false);
}

#pragma implementation_key(3592)
inline PPT::PPT_ShapePtr PPT::CanvasShapes::AddLabel ( enum Office::MsoTextOrientation Orientation, float Left, float Top, float Width, float Height ) {
    struct PPT_Shape * _result = 0;
    HRESULT _hr = raw_AddLabel(Orientation, Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PPT_ShapePtr(_result, false);
}

#pragma implementation_key(3593)
inline PPT::PPT_ShapePtr PPT::CanvasShapes::AddLine ( float BeginX, float BeginY, float EndX, float EndY ) {
    struct PPT_Shape * _result = 0;
    HRESULT _hr = raw_AddLine(BeginX, BeginY, EndX, EndY, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PPT_ShapePtr(_result, false);
}

#pragma implementation_key(3594)
inline PPT::PPT_ShapePtr PPT::CanvasShapes::AddPicture ( _bstr_t FileName, enum Office::MsoTriState LinkToFile, enum Office::MsoTriState SaveWithDocument, float Left, float Top, float Width, float Height ) {
    struct PPT_Shape * _result = 0;
    HRESULT _hr = raw_AddPicture(FileName, LinkToFile, SaveWithDocument, Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PPT_ShapePtr(_result, false);
}

#pragma implementation_key(3595)
inline PPT::PPT_ShapePtr PPT::CanvasShapes::AddPolyline ( const _variant_t & SafeArrayOfPoints ) {
    struct PPT_Shape * _result = 0;
    HRESULT _hr = raw_AddPolyline(SafeArrayOfPoints, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PPT_ShapePtr(_result, false);
}

#pragma implementation_key(3596)
inline PPT::PPT_ShapePtr PPT::CanvasShapes::AddShape ( enum Office::MsoAutoShapeType Type, float Left, float Top, float Width, float Height ) {
    struct PPT_Shape * _result = 0;
    HRESULT _hr = raw_AddShape(Type, Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PPT_ShapePtr(_result, false);
}

#pragma implementation_key(3597)
inline PPT::PPT_ShapePtr PPT::CanvasShapes::AddTextEffect ( enum Office::MsoPresetTextEffect PresetTextEffect, _bstr_t Text, _bstr_t FontName, float FontSize, enum Office::MsoTriState FontBold, enum Office::MsoTriState FontItalic, float Left, float Top ) {
    struct PPT_Shape * _result = 0;
    HRESULT _hr = raw_AddTextEffect(PresetTextEffect, Text, FontName, FontSize, FontBold, FontItalic, Left, Top, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PPT_ShapePtr(_result, false);
}

#pragma implementation_key(3598)
inline PPT::PPT_ShapePtr PPT::CanvasShapes::AddTextbox ( enum Office::MsoTextOrientation Orientation, float Left, float Top, float Width, float Height ) {
    struct PPT_Shape * _result = 0;
    HRESULT _hr = raw_AddTextbox(Orientation, Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PPT_ShapePtr(_result, false);
}

#pragma implementation_key(3599)
inline PPT::FreeformBuilderPtr PPT::CanvasShapes::BuildFreeform ( enum Office::MsoEditingType EditingType, float X1, float Y1 ) {
    struct FreeformBuilder * _result = 0;
    HRESULT _hr = raw_BuildFreeform(EditingType, X1, Y1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FreeformBuilderPtr(_result, false);
}

#pragma implementation_key(3600)
inline PPT::ShapeRangePtr PPT::CanvasShapes::Range ( const _variant_t & Index ) {
    struct ShapeRange * _result = 0;
    HRESULT _hr = raw_Range(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

#pragma implementation_key(3601)
inline HRESULT PPT::CanvasShapes::SelectAll ( ) {
    HRESULT _hr = raw_SelectAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3602)
inline PPT::PPT_ShapePtr PPT::CanvasShapes::GetBackground ( ) {
    struct PPT_Shape * _result = 0;
    HRESULT _hr = get_Background(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PPT_ShapePtr(_result, false);
}

//
// interface CustomLayout wrapper method implementations
//

#pragma implementation_key(3603)
inline PPT::_ApplicationPtr PPT::CustomLayout::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(3604)
inline IDispatchPtr PPT::CustomLayout::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3605)
inline PPT::ShapesPtr PPT::CustomLayout::GetShapes ( ) {
    struct Shapes * _result = 0;
    HRESULT _hr = get_Shapes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapesPtr(_result, false);
}

#pragma implementation_key(3606)
inline PPT::HeadersFootersPtr PPT::CustomLayout::GetHeadersFooters ( ) {
    struct HeadersFooters * _result = 0;
    HRESULT _hr = get_HeadersFooters(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return HeadersFootersPtr(_result, false);
}

#pragma implementation_key(3607)
inline PPT::ShapeRangePtr PPT::CustomLayout::GetBackground ( ) {
    struct ShapeRange * _result = 0;
    HRESULT _hr = get_Background(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

#pragma implementation_key(3608)
inline _bstr_t PPT::CustomLayout::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3609)
inline void PPT::CustomLayout::PutName ( _bstr_t Name ) {
    HRESULT _hr = put_Name(Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3610)
inline HRESULT PPT::CustomLayout::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3611)
inline float PPT::CustomLayout::GetHeight ( ) {
    float _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3612)
inline float PPT::CustomLayout::GetWidth ( ) {
    float _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3613)
inline PPT::HyperlinksPtr PPT::CustomLayout::GetHyperlinks ( ) {
    struct Hyperlinks * _result = 0;
    HRESULT _hr = get_Hyperlinks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return HyperlinksPtr(_result, false);
}

#pragma implementation_key(3614)
inline PPT::DesignPtr PPT::CustomLayout::GetDesign ( ) {
    struct Design * _result = 0;
    HRESULT _hr = get_Design(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DesignPtr(_result, false);
}

#pragma implementation_key(3615)
inline PPT::TimeLinePtr PPT::CustomLayout::GetTimeLine ( ) {
    struct TimeLine * _result = 0;
    HRESULT _hr = get_TimeLine(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TimeLinePtr(_result, false);
}

#pragma implementation_key(3616)
inline PPT::SlideShowTransitionPtr PPT::CustomLayout::GetSlideShowTransition ( ) {
    struct SlideShowTransition * _result = 0;
    HRESULT _hr = get_SlideShowTransition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SlideShowTransitionPtr(_result, false);
}

#pragma implementation_key(3617)
inline _bstr_t PPT::CustomLayout::GetMatchingName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MatchingName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3618)
inline void PPT::CustomLayout::PutMatchingName ( _bstr_t MatchingName ) {
    HRESULT _hr = put_MatchingName(MatchingName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3619)
inline enum Office::MsoTriState PPT::CustomLayout::GetPreserved ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Preserved(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3620)
inline void PPT::CustomLayout::PutPreserved ( enum Office::MsoTriState Preserved ) {
    HRESULT _hr = put_Preserved(Preserved);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3621)
inline int PPT::CustomLayout::GetIndex ( ) {
    int _result = 0;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3622)
inline HRESULT PPT::CustomLayout::Select ( ) {
    HRESULT _hr = raw_Select();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3623)
inline HRESULT PPT::CustomLayout::Cut ( ) {
    HRESULT _hr = raw_Cut();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3624)
inline HRESULT PPT::CustomLayout::Copy ( ) {
    HRESULT _hr = raw_Copy();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3625)
inline PPT::CustomLayoutPtr PPT::CustomLayout::Duplicate ( ) {
    struct CustomLayout * _result = 0;
    HRESULT _hr = raw_Duplicate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CustomLayoutPtr(_result, false);
}

#pragma implementation_key(3626)
inline HRESULT PPT::CustomLayout::MoveTo ( int toPos ) {
    HRESULT _hr = raw_MoveTo(toPos);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3627)
inline enum Office::MsoTriState PPT::CustomLayout::GetDisplayMasterShapes ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_DisplayMasterShapes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3628)
inline void PPT::CustomLayout::PutDisplayMasterShapes ( enum Office::MsoTriState DisplayMasterShapes ) {
    HRESULT _hr = put_DisplayMasterShapes(DisplayMasterShapes);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3629)
inline enum Office::MsoTriState PPT::CustomLayout::GetFollowMasterBackground ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_FollowMasterBackground(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3630)
inline void PPT::CustomLayout::PutFollowMasterBackground ( enum Office::MsoTriState FollowMasterBackground ) {
    HRESULT _hr = put_FollowMasterBackground(FollowMasterBackground);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3631)
inline Office::ThemeColorSchemePtr PPT::CustomLayout::GetThemeColorScheme ( ) {
    struct Office::ThemeColorScheme * _result = 0;
    HRESULT _hr = get_ThemeColorScheme(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::ThemeColorSchemePtr(_result, false);
}

#pragma implementation_key(3632)
inline PPT::CustomerDataPtr PPT::CustomLayout::GetCustomerData ( ) {
    struct CustomerData * _result = 0;
    HRESULT _hr = get_CustomerData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CustomerDataPtr(_result, false);
}

#pragma implementation_key(3633)
inline PPT::GuidesPtr PPT::CustomLayout::GetGuides ( ) {
    struct Guides * _result = 0;
    HRESULT _hr = get_Guides(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return GuidesPtr(_result, false);
}

//
// interface CustomLayouts wrapper method implementations
//

#pragma implementation_key(3634)
inline PPT::_ApplicationPtr PPT::CustomLayouts::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(3635)
inline IDispatchPtr PPT::CustomLayouts::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3636)
inline PPT::CustomLayoutPtr PPT::CustomLayouts::Item ( const _variant_t & Index ) {
    struct CustomLayout * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CustomLayoutPtr(_result, false);
}

#pragma implementation_key(3637)
inline PPT::CustomLayoutPtr PPT::CustomLayouts::Add ( int Index ) {
    struct CustomLayout * _result = 0;
    HRESULT _hr = raw_Add(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CustomLayoutPtr(_result, false);
}

#pragma implementation_key(3638)
inline PPT::CustomLayoutPtr PPT::CustomLayouts::Paste ( int Index ) {
    struct CustomLayout * _result = 0;
    HRESULT _hr = raw_Paste(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CustomLayoutPtr(_result, false);
}

//
// interface Comments wrapper method implementations
//

#pragma implementation_key(3639)
inline PPT::_ApplicationPtr PPT::Comments::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(3640)
inline IDispatchPtr PPT::Comments::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3641)
inline PPT::CommentPtr PPT::Comments::Item ( int Index ) {
    struct Comment * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CommentPtr(_result, false);
}

#pragma implementation_key(3642)
inline PPT::CommentPtr PPT::Comments::Add ( float Left, float Top, _bstr_t Author, _bstr_t AuthorInitials, _bstr_t Text ) {
    struct Comment * _result = 0;
    HRESULT _hr = raw_Add(Left, Top, Author, AuthorInitials, Text, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CommentPtr(_result, false);
}

#pragma implementation_key(3643)
inline PPT::CommentPtr PPT::Comments::Add2 ( float Left, float Top, _bstr_t Author, _bstr_t AuthorInitials, _bstr_t Text, _bstr_t ProviderID, _bstr_t UserID ) {
    struct Comment * _result = 0;
    HRESULT _hr = raw_Add2(Left, Top, Author, AuthorInitials, Text, ProviderID, UserID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CommentPtr(_result, false);
}

//
// interface Comment wrapper method implementations
//

#pragma implementation_key(3644)
inline PPT::_ApplicationPtr PPT::Comment::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(3645)
inline IDispatchPtr PPT::Comment::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3646)
inline _bstr_t PPT::Comment::GetAuthor ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Author(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3647)
inline _bstr_t PPT::Comment::GetAuthorInitials ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AuthorInitials(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3648)
inline _bstr_t PPT::Comment::GetText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3649)
inline DATE PPT::Comment::GetDateTime ( ) {
    DATE _result = 0;
    HRESULT _hr = get_DateTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3650)
inline int PPT::Comment::GetAuthorIndex ( ) {
    int _result = 0;
    HRESULT _hr = get_AuthorIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3651)
inline float PPT::Comment::GetLeft ( ) {
    float _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3652)
inline float PPT::Comment::GetTop ( ) {
    float _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3653)
inline HRESULT PPT::Comment::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3654)
inline _bstr_t PPT::Comment::GetProviderID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ProviderID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3655)
inline _bstr_t PPT::Comment::GetUserID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3656)
inline int PPT::Comment::GetTimeZoneBias ( ) {
    int _result = 0;
    HRESULT _hr = get_TimeZoneBias(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3657)
inline PPT::CommentsPtr PPT::Comment::GetReplies ( ) {
    struct Comments * _result = 0;
    HRESULT _hr = get_Replies(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CommentsPtr(_result, false);
}

#pragma implementation_key(3658)
inline VARIANT_BOOL PPT::Comment::GetCollapsed ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Collapsed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface DiagramNode wrapper method implementations
//

#pragma implementation_key(3659)
inline IDispatchPtr PPT::DiagramNode::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3660)
inline long PPT::DiagramNode::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3661)
inline PPT::DiagramNodePtr PPT::DiagramNode::AddNode ( enum Office::MsoRelativeNodePosition Pos, enum Office::MsoDiagramNodeType NodeType ) {
    struct DiagramNode * _result = 0;
    HRESULT _hr = raw_AddNode(Pos, NodeType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DiagramNodePtr(_result, false);
}

#pragma implementation_key(3662)
inline HRESULT PPT::DiagramNode::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3663)
inline HRESULT PPT::DiagramNode::MoveNode ( struct DiagramNode * TargetNode, enum Office::MsoRelativeNodePosition Pos ) {
    HRESULT _hr = raw_MoveNode(TargetNode, Pos);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3664)
inline HRESULT PPT::DiagramNode::ReplaceNode ( struct DiagramNode * TargetNode ) {
    HRESULT _hr = raw_ReplaceNode(TargetNode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3665)
inline HRESULT PPT::DiagramNode::SwapNode ( struct DiagramNode * TargetNode, VARIANT_BOOL SwapChildren ) {
    HRESULT _hr = raw_SwapNode(TargetNode, SwapChildren);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3666)
inline PPT::DiagramNodePtr PPT::DiagramNode::CloneNode ( VARIANT_BOOL CopyChildren, struct DiagramNode * TargetNode, enum Office::MsoRelativeNodePosition Pos ) {
    struct DiagramNode * _result = 0;
    HRESULT _hr = raw_CloneNode(CopyChildren, TargetNode, Pos, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DiagramNodePtr(_result, false);
}

#pragma implementation_key(3667)
inline HRESULT PPT::DiagramNode::TransferChildren ( struct DiagramNode * ReceivingNode ) {
    HRESULT _hr = raw_TransferChildren(ReceivingNode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3668)
inline PPT::DiagramNodePtr PPT::DiagramNode::NextNode ( ) {
    struct DiagramNode * _result = 0;
    HRESULT _hr = raw_NextNode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DiagramNodePtr(_result, false);
}

#pragma implementation_key(3669)
inline PPT::DiagramNodePtr PPT::DiagramNode::PrevNode ( ) {
    struct DiagramNode * _result = 0;
    HRESULT _hr = raw_PrevNode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DiagramNodePtr(_result, false);
}

#pragma implementation_key(3670)
inline IDispatchPtr PPT::DiagramNode::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3671)
inline PPT::DiagramNodeChildrenPtr PPT::DiagramNode::GetChildren ( ) {
    struct DiagramNodeChildren * _result = 0;
    HRESULT _hr = get_Children(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DiagramNodeChildrenPtr(_result, false);
}

#pragma implementation_key(3672)
inline PPT::PPT_ShapePtr PPT::DiagramNode::GetPPT_Shape ( ) {
    struct PPT_Shape * _result = 0;
    HRESULT _hr = get_PPT_Shape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PPT_ShapePtr(_result, false);
}

#pragma implementation_key(3673)
inline PPT::DiagramNodePtr PPT::DiagramNode::GetRoot ( ) {
    struct DiagramNode * _result = 0;
    HRESULT _hr = get_Root(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DiagramNodePtr(_result, false);
}

#pragma implementation_key(3674)
inline PPT::DiagramPtr PPT::DiagramNode::GetDiagram ( ) {
    struct Diagram * _result = 0;
    HRESULT _hr = get_Diagram(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DiagramPtr(_result, false);
}

#pragma implementation_key(3675)
inline enum Office::MsoOrgChartLayoutType PPT::DiagramNode::GetLayout ( ) {
    enum Office::MsoOrgChartLayoutType _result;
    HRESULT _hr = get_Layout(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3676)
inline void PPT::DiagramNode::PutLayout ( enum Office::MsoOrgChartLayoutType Type ) {
    HRESULT _hr = put_Layout(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3677)
inline PPT::PPT_ShapePtr PPT::DiagramNode::GetTextShape ( ) {
    struct PPT_Shape * _result = 0;
    HRESULT _hr = get_TextShape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PPT_ShapePtr(_result, false);
}

//
// interface DiagramNodeChildren wrapper method implementations
//

#pragma implementation_key(3678)
inline IDispatchPtr PPT::DiagramNodeChildren::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3679)
inline long PPT::DiagramNodeChildren::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3680)
inline IUnknownPtr PPT::DiagramNodeChildren::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(3681)
inline PPT::DiagramNodePtr PPT::DiagramNodeChildren::Item ( const _variant_t & Index ) {
    struct DiagramNode * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DiagramNodePtr(_result, false);
}

#pragma implementation_key(3682)
inline PPT::DiagramNodePtr PPT::DiagramNodeChildren::AddNode ( const _variant_t & Index, enum Office::MsoDiagramNodeType NodeType ) {
    struct DiagramNode * _result = 0;
    HRESULT _hr = raw_AddNode(Index, NodeType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DiagramNodePtr(_result, false);
}

#pragma implementation_key(3683)
inline HRESULT PPT::DiagramNodeChildren::SelectAll ( ) {
    HRESULT _hr = raw_SelectAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3684)
inline IDispatchPtr PPT::DiagramNodeChildren::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3685)
inline int PPT::DiagramNodeChildren::GetCount ( ) {
    int _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3686)
inline PPT::DiagramNodePtr PPT::DiagramNodeChildren::GetFirstChild ( ) {
    struct DiagramNode * _result = 0;
    HRESULT _hr = get_FirstChild(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DiagramNodePtr(_result, false);
}

#pragma implementation_key(3687)
inline PPT::DiagramNodePtr PPT::DiagramNodeChildren::GetLastChild ( ) {
    struct DiagramNode * _result = 0;
    HRESULT _hr = get_LastChild(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DiagramNodePtr(_result, false);
}

//
// interface DiagramNodes wrapper method implementations
//

#pragma implementation_key(3688)
inline IDispatchPtr PPT::DiagramNodes::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3689)
inline long PPT::DiagramNodes::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3690)
inline IUnknownPtr PPT::DiagramNodes::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(3691)
inline PPT::DiagramNodePtr PPT::DiagramNodes::Item ( const _variant_t & Index ) {
    struct DiagramNode * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DiagramNodePtr(_result, false);
}

#pragma implementation_key(3692)
inline HRESULT PPT::DiagramNodes::SelectAll ( ) {
    HRESULT _hr = raw_SelectAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3693)
inline IDispatchPtr PPT::DiagramNodes::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3694)
inline int PPT::DiagramNodes::GetCount ( ) {
    int _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface Diagram wrapper method implementations
//

#pragma implementation_key(3695)
inline IDispatchPtr PPT::Diagram::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3696)
inline long PPT::Diagram::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3697)
inline IDispatchPtr PPT::Diagram::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3698)
inline PPT::DiagramNodesPtr PPT::Diagram::GetNodes ( ) {
    struct DiagramNodes * _result = 0;
    HRESULT _hr = get_Nodes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DiagramNodesPtr(_result, false);
}

#pragma implementation_key(3699)
inline enum Office::MsoDiagramType PPT::Diagram::GetType ( ) {
    enum Office::MsoDiagramType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3700)
inline enum Office::MsoTriState PPT::Diagram::GetAutoLayout ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_AutoLayout(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3701)
inline void PPT::Diagram::PutAutoLayout ( enum Office::MsoTriState AutoLayout ) {
    HRESULT _hr = put_AutoLayout(AutoLayout);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3702)
inline enum Office::MsoTriState PPT::Diagram::GetReverse ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Reverse(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3703)
inline void PPT::Diagram::PutReverse ( enum Office::MsoTriState Reverse ) {
    HRESULT _hr = put_Reverse(Reverse);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3704)
inline enum Office::MsoTriState PPT::Diagram::GetAutoFormat ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_AutoFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3705)
inline void PPT::Diagram::PutAutoFormat ( enum Office::MsoTriState AutoFormat ) {
    HRESULT _hr = put_AutoFormat(AutoFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3706)
inline HRESULT PPT::Diagram::Convert ( enum Office::MsoDiagramType Type ) {
    HRESULT _hr = raw_Convert(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3707)
inline HRESULT PPT::Diagram::FitText ( ) {
    HRESULT _hr = raw_FitText();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface FileConverters wrapper method implementations
//

#pragma implementation_key(3708)
inline PPT::FileConverterPtr PPT::FileConverters::Item ( const _variant_t & Index ) {
    struct FileConverter * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FileConverterPtr(_result, false);
}

//
// interface FileConverter wrapper method implementations
//

#pragma implementation_key(3709)
inline PPT::_ApplicationPtr PPT::FileConverter::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(3710)
inline VARIANT_BOOL PPT::FileConverter::GetCanOpen ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CanOpen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3711)
inline VARIANT_BOOL PPT::FileConverter::GetCanSave ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CanSave(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3712)
inline _bstr_t PPT::FileConverter::GetClassName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ClassName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3713)
inline PPT::FileConvertersPtr PPT::FileConverter::GetCreator ( ) {
    struct FileConverters * _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FileConvertersPtr(_result, false);
}

#pragma implementation_key(3714)
inline _bstr_t PPT::FileConverter::GetExtensions ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Extensions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3715)
inline _bstr_t PPT::FileConverter::GetFormatName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FormatName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3716)
inline _bstr_t PPT::FileConverter::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3717)
inline PPT::FileConvertersPtr PPT::FileConverter::GetParent ( ) {
    struct FileConverters * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FileConvertersPtr(_result, false);
}

#pragma implementation_key(3718)
inline _bstr_t PPT::FileConverter::GetPath ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Path(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3719)
inline long PPT::FileConverter::GetOpenFormat ( ) {
    long _result = 0;
    HRESULT _hr = get_OpenFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3720)
inline long PPT::FileConverter::GetSaveFormat ( ) {
    long _result = 0;
    HRESULT _hr = get_SaveFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}
